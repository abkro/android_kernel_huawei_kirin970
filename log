net/mac80211/sta_info.c:	sta->last_connected = ktime_get_seconds();
net/mac80211/sta_info.c:	sinfo->connected_time = ktime_get_seconds() - sta->last_connected;
net/dccp/timer.c:static ktime_t dccp_timestamp_seed;
net/dccp/timer.c:	u64 delta = (u64)ktime_us_delta(ktime_get_real(), dccp_timestamp_seed);
net/dccp/timer.c:	dccp_timestamp_seed = ktime_get_real();
net/dccp/ccids/ccid3.h:#include <linux/ktime.h>
net/dccp/ccids/ccid3.h:	ktime_t				tx_t_last_win_count;
net/dccp/ccids/ccid3.h:	ktime_t				tx_t_ld;
net/dccp/ccids/ccid3.h:	ktime_t				tx_t_nom;
net/dccp/ccids/ccid3.h:	ktime_t				rx_tstamp_last_feedback;
net/dccp/ccids/lib/packet_history.c:	entry->stamp = ktime_get_real();
net/dccp/ccids/lib/packet_history.c:	entry->tfrchrx_tstamp = ktime_get_real();
net/dccp/ccids/lib/packet_history.c:				         ktime_us_delta(tfrc_rx_hist_rtt_prev_s(h)->tfrchrx_tstamp,
net/dccp/ccids/lib/packet_history.c:		sample = ktime_to_us(net_timedelta(tfrc_rx_hist_rtt_last_s(h)->tfrchrx_tstamp));
net/dccp/ccids/lib/packet_history.h:	ktime_t			  stamp;
net/dccp/ccids/lib/packet_history.h:	ktime_t		 tfrchrx_tstamp;
net/dccp/ccids/lib/loss_interval.h:#include <linux/ktime.h>
net/dccp/ccids/ccid3.c:static u32 ccid3_hc_tx_idle_rtt(struct ccid3_hc_tx_sock *hc, ktime_t now)
net/dccp/ccids/ccid3.c:	u32 delta = ktime_us_delta(now, hc->tx_t_last_win_count);
net/dccp/ccids/ccid3.c:static void ccid3_hc_tx_update_x(struct sock *sk, ktime_t *stamp)
net/dccp/ccids/ccid3.c:	ktime_t now = stamp ? *stamp : ktime_get_real();
net/dccp/ccids/ccid3.c:	} else if (ktime_us_delta(now, hc->tx_t_ld) - (s64)hc->tx_rtt >= 0) {
net/dccp/ccids/ccid3.c:						ktime_t now)
net/dccp/ccids/ccid3.c:	u32 delta = ktime_us_delta(now, hc->tx_t_last_win_count),
net/dccp/ccids/ccid3.c:	ktime_t now = ktime_get_real();
net/dccp/ccids/ccid3.c:		delay = ktime_us_delta(hc->tx_t_nom, now);
net/dccp/ccids/ccid3.c:	hc->tx_t_nom = ktime_add_us(hc->tx_t_nom, hc->tx_t_ipi);
net/dccp/ccids/ccid3.c:	ktime_t now;
net/dccp/ccids/ccid3.c:	now	  = ktime_get_real();
net/dccp/ccids/ccid3.c:	r_sample  = dccp_sample_rtt(sk, ktime_us_delta(now, acked->stamp));
net/dccp/ccids/ccid3.c:	ktime_t now = ktime_get_real();
net/dccp/ccids/ccid3.c:		delta = ktime_us_delta(now, hc->rx_tstamp_last_feedback);
net/dccp/ccids/ccid3.c:	delta  = ktime_to_us(net_timedelta(hc->rx_tstamp_last_feedback));
net/dccp/dccp.h:#include <linux/ktime.h>
net/ipv6/mip6.c:	ktime_t stamp;
net/ipv6/mip6.c:static inline int mip6_report_rl_allow(ktime_t stamp,
net/ipv6/mip6.c:	if (!ktime_equal(mip6_report_rl.stamp, stamp) ||
net/ipv6/mip6.c:	ktime_t stamp;
net/ipv6/mip6.c:	stamp = skb_get_ktime(skb);
net/bluetooth/selftest.c:	ktime_t calltime, delta, rettime;
net/bluetooth/selftest.c:	calltime = ktime_get();
net/bluetooth/selftest.c:	rettime = ktime_get();
net/bluetooth/selftest.c:	delta = ktime_sub(rettime, calltime);
net/bluetooth/selftest.c:	duration = (unsigned long long) ktime_to_ns(delta) >> 10;
net/bluetooth/smp.c:	ktime_t calltime, delta, rettime;
net/bluetooth/smp.c:	calltime = ktime_get();
net/bluetooth/smp.c:	rettime = ktime_get();
net/bluetooth/smp.c:	delta = ktime_sub(rettime, calltime);
net/bluetooth/smp.c:	duration = (unsigned long long) ktime_to_ns(delta) >> 10;
net/bluetooth/mgmt_util.c:					    skb_get_ktime(skb), flag, skip_sk);
net/bluetooth/hci_sock.c:				 void *data, u16 data_len, ktime_t tstamp,
net/netfilter/nf_conntrack_standalone.c:	st->time_now = ktime_get_real_ns();
net/netfilter/nfnetlink_log.c:		struct timespec64 kts = ktime_to_timespec64(skb->tstamp);
net/netfilter/nfnetlink_queue.c:		struct timespec64 kts = ktime_to_timespec64(entskb->tstamp);
net/netfilter/nft_limit.c:	now = ktime_get_ns();
net/netfilter/nft_limit.c:	limit->last = ktime_get_ns();
net/netfilter/xt_time.c:#include <linux/ktime.h>
net/netfilter/xt_time.c:	stamp = ktime_to_ns(skb->tstamp);
net/netfilter/nf_conntrack_netlink.c:		tstamp->start = ktime_get_real_ns();
net/netfilter/nf_conntrack_core.c:		tstamp->stop = ktime_get_real_ns();
net/netfilter/nf_conntrack_core.c:		tstamp->start = ktime_to_ns(skb->tstamp);
net/mac802154/util.c:				      ktime_set(0, hw->phy->lifs_period * NSEC_PER_USEC),
net/mac802154/util.c:				      ktime_set(0, hw->phy->sifs_period * NSEC_PER_USEC),
net/ipv4/tcp_probe.c:#include <linux/ktime.h>
net/ipv4/tcp_probe.c:	ktime_t tstamp;
net/ipv4/tcp_probe.c:	ktime_t		start;
net/ipv4/tcp_probe.c:			p->tstamp = ktime_get();
net/ipv4/tcp_probe.c:	tcp_probe.start = ktime_get();
net/ipv4/tcp_probe.c:		= ktime_to_timespec64(ktime_sub(p->tstamp, tcp_probe.start));
net/ipv4/tcp_cubic.c:	return ktime_to_ms(ktime_get_real());
net/ipv4/af_inet.c:	ktime_get_real_ts64(&ts);
net/xfrm/xfrm_state.c:#include <linux/ktime.h>
net/xfrm/xfrm_state.c:		tasklet_hrtimer_start(&x->mtimer, ktime_set(next, 0), HRTIMER_MODE_REL);
net/xfrm/xfrm_state.c:			tasklet_hrtimer_start(&x->mtimer, ktime_set(net->xfrm.sysctl_acq_expires, 0), HRTIMER_MODE_REL);
net/xfrm/xfrm_state.c:	tasklet_hrtimer_start(&x->mtimer, ktime_set(1, 0), HRTIMER_MODE_REL);
net/xfrm/xfrm_state.c:		tasklet_hrtimer_start(&x->mtimer, ktime_set(net->xfrm.sysctl_acq_expires, 0), HRTIMER_MODE_REL);
net/xfrm/xfrm_state.c:		tasklet_hrtimer_start(&x1->mtimer, ktime_set(1, 0), HRTIMER_MODE_REL);
net/xfrm/xfrm_state.c:		tasklet_hrtimer_start(&x->mtimer, ktime_set(0, 0), HRTIMER_MODE_REL);
net/sctp/probe.c:	ktime_get_ts64(&sctpw.tstart);
net/sctp/probe.c:		ktime_get_ts64(&now);
net/sctp/sm_make_chunk.c:	cookie->c.expiration = ktime_add(asoc->cookie_life,
net/sctp/sm_make_chunk.c:					 ktime_get_real());
net/sctp/sm_make_chunk.c:	ktime_t kt;
net/sctp/sm_make_chunk.c:		kt = skb_get_ktime(skb);
net/sctp/sm_make_chunk.c:		kt = ktime_get_real();
net/sctp/sm_make_chunk.c:	if (!asoc && ktime_before(bear_cookie->expiration, kt)) {
net/sctp/sm_make_chunk.c:			suseconds_t usecs = ktime_to_us(ktime_sub(kt, bear_cookie->expiration));
net/sctp/sm_make_chunk.c:		asoc->cookie_life = ktime_add_ms(asoc->cookie_life, stale);
net/sctp/transport.c:	peer->last_time_heard = ktime_set(0, 0);
net/sctp/associola.c:	asoc->cookie_life = ms_to_ktime(sp->assocparams.sasoc_cookie_life);
net/sctp/associola.c:			chunk->transport->last_time_heard = ktime_get();
net/sctp/associola.c:		   ktime_after(trans2->last_time_heard,
net/sctp/associola.c:		    ktime_after(trans->last_time_heard,
net/sctp/associola.c:			   ktime_after(trans->last_time_heard,
net/sctp/socket.c:			asoc->cookie_life = ms_to_ktime(assocparams.sasoc_cookie_life);
net/sctp/socket.c:		assocparams.sasoc_cookie_life = ktime_to_ms(asoc->cookie_life);
net/sctp/endpointola.c:			chunk->transport->last_time_heard = ktime_get();
net/compat.c:	struct timeval ktime;
net/compat.c:	    __get_user(ktime.tv_sec, &up->tv_sec) ||
net/compat.c:	    __get_user(ktime.tv_usec, &up->tv_usec))
net/compat.c:	err = sock_setsockopt(sock, level, optname, (char *)&ktime, sizeof(ktime));
net/compat.c:	struct timeval ktime;
net/compat.c:	len = sizeof(ktime);
net/compat.c:	err = sock_getsockopt(sock, level, optname, (char *) &ktime, &len);
net/compat.c:		    __put_user(ktime.tv_sec, &up->tv_sec) ||
net/compat.c:		    __put_user(ktime.tv_usec, &up->tv_usec))
net/compat.c:	tv = ktime_to_timeval(sk->sk_stamp);
net/compat.c:		sk->sk_stamp = ktime_get_real();
net/compat.c:		tv = ktime_to_timeval(sk->sk_stamp);
net/compat.c:	ts = ktime_to_timespec(sk->sk_stamp);
net/compat.c:		sk->sk_stamp = ktime_get_real();
net/compat.c:		ts = ktime_to_timespec(sk->sk_stamp);
net/openvswitch/flow.c:	ktime_get_ts(&cur_ts);
net/packet/af_packet.c:	    ktime_to_timespec_cond(shhwtstamps->hwtstamp, ts))
net/packet/af_packet.c:	if (ktime_to_timespec_cond(skb->tstamp, ts))
net/core/dev.c:			hrtimer_start(&n->timer, ns_to_ktime(timeout),
net/core/secure_seq.c:#include <linux/ktime.h>
net/core/secure_seq.c:	return seq + (ktime_get_real_ns() >> 6);
net/core/secure_seq.c:	seq += ktime_get_real_ns();
net/core/secure_seq.c:	seq += ktime_get_real_ns();
net/core/skbuff.c:		skb->tstamp = ktime_get_real();
net/core/filter.c:	case BPF_FUNC_ktime_get_ns:
net/core/filter.c:		return &bpf_ktime_get_ns_proto;
net/core/neighbour.c:	 * neighbour entry. Otherwise we risk to move the locktime window with
net/core/neighbour.c:		NEIGH_SYSCTL_USERHZ_JIFFIES_ENTRY(LOCKTIME, "locktime"),
net/core/sock.c:	sk->sk_stamp = ktime_set(-1L, 0);
net/core/sock.c:	tv = ktime_to_timeval(sk->sk_stamp);
net/core/sock.c:		sk->sk_stamp = ktime_get_real();
net/core/sock.c:		tv = ktime_to_timeval(sk->sk_stamp);
net/core/sock.c:	ts = ktime_to_timespec(sk->sk_stamp);
net/core/sock.c:		sk->sk_stamp = ktime_get_real();
net/core/sock.c:		ts = ktime_to_timespec(sk->sk_stamp);
net/core/pktgen.c:	ktime_t next_tx;
net/core/pktgen.c:	ktime_t started_at;
net/core/pktgen.c:	ktime_t stopped_at;
net/core/pktgen.c:	ktime_t stopped;
net/core/pktgen.c:	stopped = pkt_dev->running ? ktime_get() : pkt_dev->stopped_at;
net/core/pktgen.c:		   (unsigned long long) ktime_to_us(pkt_dev->started_at),
net/core/pktgen.c:		   (unsigned long long) ktime_to_us(stopped),
net/core/pktgen.c:static void spin(struct pktgen_dev *pkt_dev, ktime_t spin_until)
net/core/pktgen.c:	ktime_t start_time, end_time;
net/core/pktgen.c:	remaining = ktime_to_ns(hrtimer_expires_remaining(&t.timer));
net/core/pktgen.c:	start_time = ktime_get();
net/core/pktgen.c:			end_time = ktime_get();
net/core/pktgen.c:		} while (ktime_compare(end_time, spin_until) < 0);
net/core/pktgen.c:		end_time = ktime_get();
net/core/pktgen.c:	pkt_dev->idle_acc += ktime_to_ns(ktime_sub(end_time, start_time));
net/core/pktgen.c:	pkt_dev->next_tx = ktime_add_ns(spin_until, pkt_dev->delay);
net/core/pktgen.c:			pkt_dev->started_at = pkt_dev->next_tx = ktime_get();
net/core/pktgen.c:	ktime_t elapsed = ktime_sub(pkt_dev->stopped_at,
net/core/pktgen.c:	ktime_t idle = ns_to_ktime(pkt_dev->idle_acc);
net/core/pktgen.c:		     (unsigned long long)ktime_to_us(elapsed),
net/core/pktgen.c:		     (unsigned long long)ktime_to_us(ktime_sub(elapsed, idle)),
net/core/pktgen.c:		     (unsigned long long)ktime_to_us(idle),
net/core/pktgen.c:			ktime_to_ns(elapsed));
net/core/pktgen.c:	pkt_dev->stopped_at = ktime_get();
net/core/pktgen.c:		else if (ktime_compare(pkt_dev->next_tx, best->next_tx) < 0)
net/core/pktgen.c:	ktime_t idle_start = ktime_get();
net/core/pktgen.c:	pkt_dev->idle_acc += ktime_to_ns(ktime_sub(ktime_get(), idle_start));
net/core/pktgen.c:	ktime_t idle_start = ktime_get();
net/core/pktgen.c:	pkt_dev->idle_acc += ktime_to_ns(ktime_sub(ktime_get(), idle_start));
net/core/pktgen.c:		pkt_dev->next_tx = ktime_add_ns(ktime_get(), ULONG_MAX);
net/socket.c:	    ktime_to_timespec_cond(skb->tstamp, tss.ts + 0))
net/socket.c:	    ktime_to_timespec_cond(shhwtstamps->hwtstamp, tss.ts + 2))
net/socket.c:			ktime_get_ts64(&timeout64);
net/rxrpc/ar-internal.h:	ktime_t			rtt_last_req;	/* Time of last RTT request */
net/rxrpc/ar-internal.h:	ktime_t			ack_at;		/* When deferred ACK needs to happen */
net/rxrpc/ar-internal.h:	ktime_t			resend_at;	/* When next resend needs to happen */
net/rxrpc/ar-internal.h:	ktime_t			ping_at;	/* When next to send a ping */
net/rxrpc/ar-internal.h:	ktime_t			expire_at;	/* When the call times out */
net/rxrpc/ar-internal.h:	ktime_t			cong_tstamp;	/* Last time cwnd was changed */
net/rxrpc/ar-internal.h:	ktime_t			ping_time;	/* Time last ping sent */
net/rxrpc/ar-internal.h:	ktime_t			acks_latest_ts;	/* Timestamp of latest ACK received */
net/rxrpc/ar-internal.h:void __rxrpc_set_timer(struct rxrpc_call *, enum rxrpc_timer_trace, ktime_t);
net/rxrpc/ar-internal.h:void rxrpc_set_timer(struct rxrpc_call *, enum rxrpc_timer_trace, ktime_t);
net/rxrpc/ar-internal.h:			rxrpc_serial_t, rxrpc_serial_t, ktime_t, ktime_t);
net/rxrpc/call_event.c:		       ktime_t now)
net/rxrpc/call_event.c:	ktime_t t;
net/rxrpc/call_event.c:		if (!ktime_after(t, now)) {
net/rxrpc/call_event.c:		if (!ktime_after(call->resend_at, now)) {
net/rxrpc/call_event.c:		} else if (ktime_before(call->resend_at, t)) {
net/rxrpc/call_event.c:		if (!ktime_after(call->ack_at, now)) {
net/rxrpc/call_event.c:		} else if (ktime_before(call->ack_at, t)) {
net/rxrpc/call_event.c:		if (!ktime_after(call->ping_at, now)) {
net/rxrpc/call_event.c:		} else if (ktime_before(call->ping_at, t)) {
net/rxrpc/call_event.c:		t_j = nsecs_to_jiffies(ktime_to_ns(ktime_sub(t, now)));
net/rxrpc/call_event.c:		     ktime_t now)
net/rxrpc/call_event.c:		ktime_t now = ktime_get_real();
net/rxrpc/call_event.c:		ktime_t ping_at = ktime_add_ms(now, rxrpc_idle_ack_delay);
net/rxrpc/call_event.c:		if (ktime_before(ping_at, call->ping_at)) {
net/rxrpc/call_event.c:	ktime_t now, ack_at;
net/rxrpc/call_event.c:		now = ktime_get_real();
net/rxrpc/call_event.c:		ack_at = ktime_add_ms(now, expiry);
net/rxrpc/call_event.c:		if (ktime_before(ack_at, call->ack_at)) {
net/rxrpc/call_event.c:static void rxrpc_resend(struct rxrpc_call *call, ktime_t now)
net/rxrpc/call_event.c:	ktime_t max_age, oldest, ack_ts;
net/rxrpc/call_event.c:	max_age = ktime_sub_ms(now, rxrpc_resend_timeout);
net/rxrpc/call_event.c:			if (ktime_after(skb->tstamp, max_age)) {
net/rxrpc/call_event.c:				if (ktime_before(skb->tstamp, oldest))
net/rxrpc/call_event.c:				       ktime_to_ns(ktime_sub(skb->tstamp, max_age)));
net/rxrpc/call_event.c:	call->resend_at = ktime_add_ms(oldest, rxrpc_resend_timeout);
net/rxrpc/call_event.c:		ack_ts = ktime_sub(now, call->acks_latest_ts);
net/rxrpc/call_event.c:		if (ktime_to_ns(ack_ts) < call->peer->rtt)
net/rxrpc/call_event.c:	ktime_t now;
net/rxrpc/call_event.c:	now = ktime_get_real();
net/rxrpc/call_event.c:	if (ktime_before(call->expire_at, now)) {
net/rxrpc/call_object.c:		rxrpc_set_timer(call, rxrpc_timer_expired, ktime_get_real());
net/rxrpc/call_object.c:	ktime_t now;
net/rxrpc/call_object.c:	now = ktime_get_real();
net/rxrpc/call_object.c:	ktime_t now = ktime_get_real(), expire_at;
net/rxrpc/call_object.c:	expire_at = ktime_add_ms(now, rxrpc_max_call_lifetime);
net/rxrpc/peer_object.c:	peer->rtt_last_req = ktime_get_real();
net/rxrpc/output.c:		call->ping_time = ktime_get_real();
net/rxrpc/output.c:		call->ping_time = ktime_get_real();
net/rxrpc/output.c:	     ktime_before(ktime_add_ms(call->peer->rtt_last_req, 1000),
net/rxrpc/output.c:			  ktime_get_real())))
net/rxrpc/output.c:		ktime_t now = ktime_get_real();
net/rxrpc/peer_event.c:			ktime_t send_time, ktime_t resp_time)
net/rxrpc/peer_event.c:	rtt = ktime_to_ns(ktime_sub(resp_time, send_time));
net/rxrpc/sendmsg.c:	skb->tstamp = ktime_get_real();
net/rxrpc/sendmsg.c:					  ktime_get_real());
net/rxrpc/sendmsg.c:		ktime_t now = ktime_get_real(), resend_at;
net/rxrpc/sendmsg.c:		resend_at = ktime_add_ms(now, rxrpc_resend_timeout);
net/rxrpc/sendmsg.c:		if (ktime_before(resend_at, call->resend_at)) {
net/rxrpc/input.c:		if (ktime_before(skb->tstamp,
net/rxrpc/input.c:				 ktime_add_ns(call->cong_tstamp,
net/rxrpc/input.c:	ktime_t now = skb->tstamp;
net/rxrpc/input.c:	    ktime_before(ktime_add_ms(call->peer->rtt_last_req, 1000), now))
net/rxrpc/input.c:				ktime_get_real());
net/rxrpc/input.c:				      ktime_t resp_time,
net/rxrpc/input.c:	ktime_t sent_at;
net/rxrpc/input.c:				      ktime_t resp_time,
net/rxrpc/input.c:	ktime_t ping_time;
net/sunrpc/xprt.c:#include <linux/ktime.h>
net/sunrpc/xprt.c:	long m = usecs_to_jiffies(ktime_to_us(req->rq_rtt));
net/sunrpc/xprt.c:	req->rq_rtt = ktime_sub(ktime_get(), req->rq_xtime);
net/sunrpc/xprt.c:	req->rq_xtime = ktime_get();
net/sunrpc/sched.c:	task->tk_start = ktime_get();
net/sunrpc/svcsock.c:		skb->tstamp = ktime_get_real();
net/sunrpc/stats.c:	ktime_t delta, now;
net/sunrpc/stats.c:	now = ktime_get();
net/sunrpc/stats.c:	delta = ktime_sub(req->rq_xtime, task->tk_start);
net/sunrpc/stats.c:	op_metrics->om_queue = ktime_add(op_metrics->om_queue, delta);
net/sunrpc/stats.c:	op_metrics->om_rtt = ktime_add(op_metrics->om_rtt, req->rq_rtt);
net/sunrpc/stats.c:	delta = ktime_sub(now, task->tk_start);
net/sunrpc/stats.c:	op_metrics->om_execute = ktime_add(op_metrics->om_execute, delta);
net/sunrpc/stats.c:				ktime_to_ms(metrics->om_queue),
net/sunrpc/stats.c:				ktime_to_ms(metrics->om_rtt),
net/sunrpc/stats.c:				ktime_to_ms(metrics->om_execute));
net/sched/sch_tbf.c:		now = ktime_get_ns();
net/sched/sch_tbf.c:	q->t_c = ktime_get_ns();
net/sched/sch_tbf.c:	q->t_c = ktime_get_ns();
net/sched/sch_api.c:		      ns_to_ktime(expires),
net/sched/act_police.c:	police->tcfp_t_c = ktime_get_ns();
net/sched/act_police.c:		now = ktime_get_ns();
net/sched/sch_hfsc.c: * The clock source resolution with ktime and PSCHED_SHIFT 10 is 1.024us.
net/sched/sch_fq.c:	u64 now = ktime_get_ns();
net/sched/sch_fq.c:	st.time_next_delayed_flow = q->time_next_delayed_flow - ktime_get_ns();
net/sched/sch_htb.c:	q->now = ktime_get_ns();
net/sched/sch_htb.c:	parent->t_c = ktime_get_ns();
net/sched/sch_htb.c:		cl->t_c = ktime_get_ns();
net/sched/sch_cbq.c:		ktime_t time;
net/sched/sch_cbq.c:		time = ktime_set(0, 0);
net/sched/sch_cbq.c:		time = ktime_add_ns(time, PSCHED_TICKS2NS(now + delay));
net/sched/sch_netem.c:	ktime_t		tstamp_save;
net/can/bcm.c:	ktime_t rx_stamp, kt_ival1, kt_ival2, kt_lastmsg;
net/can/bcm.c:static inline ktime_t bcm_timeval_to_ktime(struct bcm_timeval tv)
net/can/bcm.c:	return ktime_set(tv.tv_sec, tv.tv_usec * NSEC_PER_USEC);
net/can/bcm.c:				   (long long)ktime_to_us(op->kt_ival1));
net/can/bcm.c:				   (long long)ktime_to_us(op->kt_ival2));
net/can/bcm.c:				   (long long)ktime_to_us(op->kt_ival1));
net/can/bcm.c:				   (long long)ktime_to_us(op->kt_ival2));
net/can/bcm.c:			      ktime_add(ktime_get(), op->kt_ival1),
net/can/bcm.c:			      ktime_add(ktime_get(), op->kt_ival2),
net/can/bcm.c:	if (ktime_us_delta(ktime_get(), op->kt_lastmsg) <
net/can/bcm.c:	    ktime_to_us(op->kt_ival2)) {
net/can/bcm.c:			      ktime_add(op->kt_lastmsg, op->kt_ival2),
net/can/bcm.c:	op->kt_lastmsg = ktime_get();
net/can/bcm.c:		hrtimer_forward(hrtimer, ktime_get(), op->kt_ival2);
net/can/bcm.c:		op->kt_lastmsg = ktime_set(0, 0);
net/can/bcm.c:		op->kt_ival1 = bcm_timeval_to_ktime(msg_head->ival1);
net/can/bcm.c:		op->kt_ival2 = bcm_timeval_to_ktime(msg_head->ival2);
net/can/bcm.c:			op->kt_ival1 = bcm_timeval_to_ktime(msg_head->ival1);
net/can/bcm.c:			op->kt_ival2 = bcm_timeval_to_ktime(msg_head->ival2);
net/can/bcm.c:			op->kt_lastmsg = ktime_set(0, 0);
kernel/bpf/core.c:const struct bpf_func_proto bpf_ktime_get_ns_proto __weak;
kernel/bpf/helpers.c:#include <linux/ktime.h>
kernel/bpf/helpers.c:BPF_CALL_0(bpf_ktime_get_ns)
kernel/bpf/helpers.c:	return ktime_get_mono_fast_ns();
kernel/bpf/helpers.c:const struct bpf_func_proto bpf_ktime_get_ns_proto = {
kernel/bpf/helpers.c:	.func		= bpf_ktime_get_ns,
kernel/cpuset.c:	now = ktime_get_seconds();
kernel/printk/hisi_printk.c:	np = of_find_compatible_node(NULL, NULL, "hisilicon,prktimer");
kernel/printk/hisi_printk.c:	        printk("NOT FOUND device node 'hisilicon,prktimer'!\n");
kernel/printk/hisi_printk.c:	        printk("failed to get prktimer resource. lisc addr init fail\n");
kernel/printk/hisi_printk.c:	pr_err("should be printktimer=<base>,<offset>,<offset>\n");
kernel/printk/hisi_printk.c:early_param("printktimer", early_printk_timer_setup);
kernel/torture.c:#include <linux/ktime.h>
kernel/torture.c:static ktime_t shutdown_time;		/* time to system shutdown. */
kernel/torture.c:	ktime_t ktime_snap;
kernel/torture.c:	ktime_snap = ktime_get();
kernel/torture.c:	while (ktime_before(ktime_snap, shutdown_time) &&
kernel/torture.c:				 ktime_ms_delta(shutdown_time, ktime_snap));
kernel/torture.c:		ktime_snap = ktime_get();
kernel/torture.c:		shutdown_time = ktime_add(ktime_get(), ktime_set(ssecs, 0));
kernel/rcu/rcuperf.c:	t = ktime_get_mono_fast_ns();
kernel/rcu/rcuperf.c:		*wdp = ktime_get_mono_fast_ns();
kernel/rcu/rcuperf.c:		t = ktime_get_mono_fast_ns();
kernel/debug/kdb/kdb_main.c:	ktime_get_ts(&uptime);
kernel/delayacct.c:	s64 ns = ktime_get_ns() - *start;
kernel/delayacct.c:	current->delays->blkio_start = ktime_get_ns();
kernel/delayacct.c:	current->delays->freepages_start = ktime_get_ns();
kernel/time/timer.c:	ktime_t kmin;
kernel/time/timer.c:	kmin = ktime_set(0, min * NSEC_PER_USEC);
kernel/time/hrtimer.c:			.get_time = &ktime_get,
kernel/time/hrtimer.c:			.get_time = &ktime_get_real,
kernel/time/hrtimer.c:			.get_time = &ktime_get_boottime,
kernel/time/hrtimer.c:			.get_time = &ktime_get_clocktai,
kernel/time/hrtimer.c:	ktime_t expires;
kernel/time/hrtimer.c:	expires = ktime_sub(hrtimer_get_expires(timer), new_base->offset);
kernel/time/hrtimer.c: * Functions for the union type storage format of ktime_t which are
kernel/time/hrtimer.c: * Divide a ktime value by a nanosecond value
kernel/time/hrtimer.c:s64 __ktime_divns(const ktime_t kt, s64 div)
kernel/time/hrtimer.c:	dclc = ktime_to_ns(kt);
kernel/time/hrtimer.c:EXPORT_SYMBOL_GPL(__ktime_divns);
kernel/time/hrtimer.c: * Add two ktime values and do a safety check for overflow:
kernel/time/hrtimer.c:ktime_t ktime_add_safe(const ktime_t lhs, const ktime_t rhs)
kernel/time/hrtimer.c:	ktime_t res = ktime_add_unsafe(lhs, rhs);
kernel/time/hrtimer.c:		res = ktime_set(KTIME_SEC_MAX, 0);
kernel/time/hrtimer.c:EXPORT_SYMBOL_GPL(ktime_add_safe);
kernel/time/hrtimer.c:static ktime_t __hrtimer_get_next_event(struct hrtimer_cpu_base *cpu_base)
kernel/time/hrtimer.c:	ktime_t expires, expires_next = { .tv64 = KTIME_MAX };
kernel/time/hrtimer.c:		expires = ktime_sub(hrtimer_get_expires(timer), base->offset);
kernel/time/hrtimer.c:static inline ktime_t hrtimer_update_base(struct hrtimer_cpu_base *base)
kernel/time/hrtimer.c:	ktime_t *offs_real = &base->clock_base[HRTIMER_BASE_REALTIME].offset;
kernel/time/hrtimer.c:	ktime_t *offs_boot = &base->clock_base[HRTIMER_BASE_BOOTTIME].offset;
kernel/time/hrtimer.c:	ktime_t *offs_tai = &base->clock_base[HRTIMER_BASE_TAI].offset;
kernel/time/hrtimer.c:	return ktime_get_update_offsets_now(&base->clock_was_set_seq,
kernel/time/hrtimer.c:	ktime_t expires_next;
kernel/time/hrtimer.c:	ktime_t expires = ktime_sub(hrtimer_get_expires(timer), base->offset);
kernel/time/hrtimer.c:u64 hrtimer_forward(struct hrtimer *timer, ktime_t now, ktime_t interval)
kernel/time/hrtimer.c:	ktime_t delta;
kernel/time/hrtimer.c:	delta = ktime_sub(now, hrtimer_get_expires(timer));
kernel/time/hrtimer.c:		s64 incr = ktime_to_ns(interval);
kernel/time/hrtimer.c:		orun = ktime_divns(delta, incr);
kernel/time/hrtimer.c:		 * This (and the ktime_add() below) is the
kernel/time/hrtimer.c:static inline ktime_t hrtimer_update_lowres(struct hrtimer *timer, ktime_t tim,
kernel/time/hrtimer.c:		tim = ktime_add_safe(tim, ktime_set(0, hrtimer_resolution));
kernel/time/hrtimer.c:void hrtimer_start_range_ns(struct hrtimer *timer, ktime_t tim,
kernel/time/hrtimer.c:		tim = ktime_add_safe(tim, base->get_time());
kernel/time/hrtimer.c:ktime_t __hrtimer_get_remaining(const struct hrtimer *timer, bool adjust)
kernel/time/hrtimer.c:	ktime_t rem;
kernel/time/hrtimer.c:			  struct hrtimer *timer, ktime_t *now)
kernel/time/hrtimer.c:static void __hrtimer_run_queues(struct hrtimer_cpu_base *cpu_base, ktime_t now)
kernel/time/hrtimer.c:		ktime_t basenow;
kernel/time/hrtimer.c:		basenow = ktime_add(now, base->offset);
kernel/time/hrtimer.c:	ktime_t expires_next, now, entry_time, delta;
kernel/time/hrtimer.c:	delta = ktime_sub(now, entry_time);
kernel/time/hrtimer.c:		expires_next = ktime_add_ns(now, 100 * NSEC_PER_MSEC);
kernel/time/hrtimer.c:		expires_next = ktime_add(now, delta);
kernel/time/hrtimer.c:		    ktime_to_ns(delta));
kernel/time/hrtimer.c:	ktime_t now;
kernel/time/hrtimer.c:	ktime_t rem;
kernel/time/hrtimer.c:	rmt = ktime_to_timespec(rem);
kernel/time/hrtimer.c:	hrtimer_set_expires_range_ns(&t.timer, timespec_to_ktime(*rqtp), slack);
kernel/time/hrtimer.c: * @expires:	timeout value (ktime_t)
kernel/time/hrtimer.c: * @delta:	slack in expires timeout (ktime_t)
kernel/time/hrtimer.c:schedule_hrtimeout_range_clock(ktime_t *expires, u64 delta,
kernel/time/hrtimer.c: * @expires:	timeout value (ktime_t)
kernel/time/hrtimer.c: * @delta:	slack in expires timeout (ktime_t)
kernel/time/hrtimer.c:int __sched schedule_hrtimeout_range(ktime_t *expires, u64 delta,
kernel/time/hrtimer.c: * @expires:	timeout value (ktime_t)
kernel/time/hrtimer.c:int __sched schedule_hrtimeout(ktime_t *expires,
kernel/time/ntp_internal.h:extern ktime_t ntp_get_next_leap(void);
kernel/time/tick-oneshot.c:int tick_program_event(ktime_t expires, int force)
kernel/time/tick-oneshot.c:	clockevents_program_event(dev, ktime_get(), true);
kernel/time/tick-oneshot.c:			ktime_t next_event)
kernel/time/timer_list.c:		(unsigned long long)ktime_to_ns(hrtimer_get_softexpires(timer)),
kernel/time/timer_list.c:		(unsigned long long)ktime_to_ns(hrtimer_get_expires(timer)),
kernel/time/timer_list.c:		(long long)(ktime_to_ns(hrtimer_get_softexpires(timer)) - now),
kernel/time/timer_list.c:		(long long)(ktime_to_ns(hrtimer_get_expires(timer)) - now));
kernel/time/timer_list.c:		   (unsigned long long) ktime_to_ns(base->offset));
kernel/time/timer_list.c:	print_active_timers(m, base, now + ktime_to_ns(base->offset));
kernel/time/timer_list.c:		   (unsigned long long)(ktime_to_ns(cpu_base->x)))
kernel/time/timer_list.c:		   (unsigned long long)(ktime_to_ns(ts->x)))
kernel/time/timer_list.c:		   (unsigned long long) ktime_to_ns(dev->next_event));
kernel/time/timer_list.c:	u64 now = ktime_to_ns(ktime_get());
kernel/time/timer_list.c:		iter->now = ktime_to_ns(ktime_get());
kernel/time/tick-sched.h:	ktime_t				last_tick;
kernel/time/tick-sched.h:	ktime_t				idle_entrytime;
kernel/time/tick-sched.h:	ktime_t				idle_waketime;
kernel/time/tick-sched.h:	ktime_t				idle_exittime;
kernel/time/tick-sched.h:	ktime_t				idle_sleeptime;
kernel/time/tick-sched.h:	ktime_t				iowait_sleeptime;
kernel/time/tick-sched.h:	ktime_t				sleep_length;
kernel/time/tick-sched.h:	ktime_t				idle_expires;
kernel/time/alarmtimer.c:	ktime_t			(*gettime)(void);
kernel/time/alarmtimer.c:static ktime_t freezer_delta;
kernel/time/alarmtimer.c:ktime_t alarm_expires_remaining(const struct alarm *alarm)
kernel/time/alarmtimer.c:	return ktime_sub(alarm->node.expires, base->gettime());
kernel/time/alarmtimer.c:	ktime_t min, now;
kernel/time/alarmtimer.c:	ktime_t alarm;
kernel/time/alarmtimer.c:	freezer_delta = ktime_set(0, 0);
kernel/time/alarmtimer.c:		ktime_t delta;
kernel/time/alarmtimer.c:		delta = ktime_sub(next->expires, base->gettime());
kernel/time/alarmtimer.c:	if (ktime_to_ns(min) < 2 * NSEC_PER_SEC) {
kernel/time/alarmtimer.c:		alarm = rtc_tm_to_ktime(tm);
kernel/time/alarmtimer.c:		alarm = ktime_add(alarm, min);
kernel/time/alarmtimer.c:		tm = rtc_ktime_to_tm(alarm);
kernel/time/alarmtimer.c:	now = rtc_tm_to_ktime(tm);
kernel/time/alarmtimer.c:	now = ktime_add(now, min);
kernel/time/alarmtimer.c:	ret = rtc_timer_start(rtc, &rtctimer, now, ktime_set(0, 0));
kernel/time/alarmtimer.c:static void alarmtimer_freezerset(ktime_t absexp, enum alarmtimer_type type)
kernel/time/alarmtimer.c:	ktime_t delta;
kernel/time/alarmtimer.c:	delta = ktime_sub(absexp, base->gettime());
kernel/time/alarmtimer.c:		enum alarmtimer_restart (*function)(struct alarm *, ktime_t))
kernel/time/alarmtimer.c:void alarm_start(struct alarm *alarm, ktime_t start)
kernel/time/alarmtimer.c:void alarm_start_relative(struct alarm *alarm, ktime_t start)
kernel/time/alarmtimer.c:	start = ktime_add_safe(start, base->gettime());
kernel/time/alarmtimer.c:u64 alarm_forward(struct alarm *alarm, ktime_t now, ktime_t interval)
kernel/time/alarmtimer.c:	ktime_t delta;
kernel/time/alarmtimer.c:	delta = ktime_sub(now, alarm->node.expires);
kernel/time/alarmtimer.c:		s64 incr = ktime_to_ns(interval);
kernel/time/alarmtimer.c:		overrun = ktime_divns(delta, incr);
kernel/time/alarmtimer.c:		alarm->node.expires = ktime_add_ns(alarm->node.expires,
kernel/time/alarmtimer.c:		 * This (and the ktime_add() below) is the
kernel/time/alarmtimer.c:	alarm->node.expires = ktime_add_safe(alarm->node.expires, interval);
kernel/time/alarmtimer.c:u64 alarm_forward_now(struct alarm *alarm, ktime_t interval)
kernel/time/alarmtimer.c:							ktime_t now)
kernel/time/alarmtimer.c:	*tp = ktime_to_timespec(base->gettime());
kernel/time/alarmtimer.c:	ktime_t relative_expiry_time =
kernel/time/alarmtimer.c:	if (ktime_to_ns(relative_expiry_time) > 0) {
kernel/time/alarmtimer.c:		cur_setting->it_value = ktime_to_timespec(relative_expiry_time);
kernel/time/alarmtimer.c:	cur_setting->it_interval = ktime_to_timespec(timr->it.alarm.interval);
kernel/time/alarmtimer.c:	ktime_t exp;
kernel/time/alarmtimer.c:	timr->it.alarm.interval = timespec_to_ktime(new_setting->it_interval);
kernel/time/alarmtimer.c:			ktime_to_ns(timr->it.alarm.interval) < TICK_NSEC)
kernel/time/alarmtimer.c:		timr->it.alarm.interval = ktime_set(0, TICK_NSEC);
kernel/time/alarmtimer.c:	exp = timespec_to_ktime(new_setting->it_value);
kernel/time/alarmtimer.c:		ktime_t now;
kernel/time/alarmtimer.c:		exp = ktime_add_safe(now, exp);
kernel/time/alarmtimer.c:								ktime_t now)
kernel/time/alarmtimer.c:static int alarmtimer_do_nsleep(struct alarm *alarm, ktime_t absexp)
kernel/time/alarmtimer.c:static int update_rmtp(ktime_t exp, enum  alarmtimer_type type,
kernel/time/alarmtimer.c:	ktime_t rem;
kernel/time/alarmtimer.c:	rem = ktime_sub(exp, alarm_bases[type].gettime());
kernel/time/alarmtimer.c:	rmt = ktime_to_timespec(rem);
kernel/time/alarmtimer.c:	ktime_t exp;
kernel/time/alarmtimer.c:	ktime_t exp;
kernel/time/alarmtimer.c:	exp = timespec_to_ktime(*tsreq);
kernel/time/alarmtimer.c:		ktime_t now = alarm_bases[type].gettime();
kernel/time/alarmtimer.c:		exp = ktime_add_safe(now, exp);
kernel/time/alarmtimer.c:	alarm_bases[ALARM_REALTIME].gettime = &ktime_get_real;
kernel/time/alarmtimer.c:	alarm_bases[ALARM_POWEROFF_REALTIME].gettime = &ktime_get_real;
kernel/time/alarmtimer.c:	alarm_bases[ALARM_BOOTTIME].gettime = &ktime_get_boottime;
kernel/time/timekeeping.h:extern ktime_t ktime_get_update_offsets_now(unsigned int *cwsseq,
kernel/time/timekeeping.h:					    ktime_t *offs_real,
kernel/time/timekeeping.h:					    ktime_t *offs_boot,
kernel/time/timekeeping.h:					    ktime_t *offs_tai);
kernel/time/tick-internal.h:extern ktime_t tick_next_period;
kernel/time/tick-internal.h:extern ktime_t tick_period;
kernel/time/tick-internal.h:				     ktime_t expires, bool force);
kernel/time/tick-internal.h:			       ktime_t nextevt);
kernel/time/tick-internal.h:extern int tick_program_event(ktime_t expires, int force);
kernel/time/tick-internal.h:			ktime_t nextevt) { BUG(); }
kernel/time/tick-internal.h:static inline int tick_program_event(ktime_t expires, int force) { return 0; }
kernel/time/itimer.c:	ktime_t rem = __hrtimer_get_remaining(timer, true);
kernel/time/itimer.c:	return ktime_to_timeval(rem);
kernel/time/itimer.c:			ktime_to_timeval(tsk->signal->it_real_incr);
kernel/time/itimer.c:	 * Use the to_ktime conversion because that clamps the maximum
kernel/time/itimer.c:	ns_nval = ktime_to_ns(timeval_to_ktime(value->it_value));
kernel/time/itimer.c:	ns_ninterval = ktime_to_ns(timeval_to_ktime(value->it_interval));
kernel/time/itimer.c:	ktime_t expires;
kernel/time/itimer.c:				= ktime_to_timeval(tsk->signal->it_real_incr);
kernel/time/itimer.c:		expires = timeval_to_ktime(value->it_value);
kernel/time/itimer.c:				timeval_to_ktime(value->it_interval);
kernel/time/tick-sched.c:static ktime_t last_jiffies_update;
kernel/time/tick-sched.c:static void tick_do_update_jiffies64(ktime_t now)
kernel/time/tick-sched.c:	ktime_t delta;
kernel/time/tick-sched.c:	delta = ktime_sub(now, last_jiffies_update);
kernel/time/tick-sched.c:	delta = ktime_sub(now, last_jiffies_update);
kernel/time/tick-sched.c:		delta = ktime_sub(delta, tick_period);
kernel/time/tick-sched.c:		last_jiffies_update = ktime_add(last_jiffies_update,
kernel/time/tick-sched.c:			s64 incr = ktime_to_ns(tick_period);
kernel/time/tick-sched.c:			ticks = ktime_divns(delta, incr);
kernel/time/tick-sched.c:			last_jiffies_update = ktime_add_ns(last_jiffies_update,
kernel/time/tick-sched.c:		tick_next_period = ktime_add(last_jiffies_update, tick_period);
kernel/time/tick-sched.c:static ktime_t tick_init_jiffy_update(void)
kernel/time/tick-sched.c:	ktime_t period;
kernel/time/tick-sched.c:static void tick_sched_do_timer(ktime_t now)
kernel/time/tick-sched.c:static void tick_nohz_update_jiffies(ktime_t now)
kernel/time/tick-sched.c:update_ts_time_stats(int cpu, struct tick_sched *ts, ktime_t now, u64 *last_update_time)
kernel/time/tick-sched.c:	ktime_t delta;
kernel/time/tick-sched.c:		delta = ktime_sub(now, ts->idle_entrytime);
kernel/time/tick-sched.c:			ts->iowait_sleeptime = ktime_add(ts->iowait_sleeptime, delta);
kernel/time/tick-sched.c:			ts->idle_sleeptime = ktime_add(ts->idle_sleeptime, delta);
kernel/time/tick-sched.c:		*last_update_time = ktime_to_us(now);
kernel/time/tick-sched.c:static void tick_nohz_stop_idle(struct tick_sched *ts, ktime_t now)
kernel/time/tick-sched.c:static ktime_t tick_nohz_start_idle(struct tick_sched *ts)
kernel/time/tick-sched.c:	ktime_t now = ktime_get();
kernel/time/tick-sched.c: * and is as accurate as ktime_get() is.
kernel/time/tick-sched.c:	ktime_t now, idle;
kernel/time/tick-sched.c:	now = ktime_get();
kernel/time/tick-sched.c:			ktime_t delta = ktime_sub(now, ts->idle_entrytime);
kernel/time/tick-sched.c:			idle = ktime_add(ts->idle_sleeptime, delta);
kernel/time/tick-sched.c:	return ktime_to_us(idle);
kernel/time/tick-sched.c: * and is as accurate as ktime_get() is.
kernel/time/tick-sched.c:	ktime_t now, iowait;
kernel/time/tick-sched.c:	now = ktime_get();
kernel/time/tick-sched.c:			ktime_t delta = ktime_sub(now, ts->idle_entrytime);
kernel/time/tick-sched.c:			iowait = ktime_add(ts->iowait_sleeptime, delta);
kernel/time/tick-sched.c:	return ktime_to_us(iowait);
kernel/time/tick-sched.c:static void tick_nohz_restart(struct tick_sched *ts, ktime_t now)
kernel/time/tick-sched.c:static ktime_t tick_nohz_stop_sched_tick(struct tick_sched *ts,
kernel/time/tick-sched.c:					 ktime_t now, int cpu)
kernel/time/tick-sched.c:	ktime_t	tick;
kernel/time/tick-sched.c:	ts->sleep_length = ktime_sub(dev->next_event, now);
kernel/time/tick-sched.c:static void tick_nohz_restart_sched_tick(struct tick_sched *ts, ktime_t now)
kernel/time/tick-sched.c:		tick_nohz_stop_sched_tick(ts, ktime_get(), cpu);
kernel/time/tick-sched.c:		tick_nohz_restart_sched_tick(ts, ktime_get());
kernel/time/tick-sched.c:		ts->sleep_length = (ktime_t) { .tv64 = NSEC_PER_SEC/HZ };
kernel/time/tick-sched.c:	ktime_t now, expires;
kernel/time/tick-sched.c:ktime_t tick_nohz_get_sleep_length(void)
kernel/time/tick-sched.c:	ktime_t now;
kernel/time/tick-sched.c:		now = ktime_get();
kernel/time/tick-sched.c:	ktime_t now = ktime_get();
kernel/time/tick-sched.c:	ktime_t next;
kernel/time/tick-sched.c:	ktime_t now;
kernel/time/tick-sched.c:	now = ktime_get();
kernel/time/tick-sched.c:	ktime_t now = ktime_get();
kernel/time/tick-sched.c:	ktime_t now = ktime_get();
kernel/time/tick-sched.c:		u64 offset = ktime_to_ns(tick_period) >> 1;
kernel/time/ntp.c:	secs = (long)(__ktime_get_real_seconds() - time_reftime);
kernel/time/ntp.c:	time_reftime = __ktime_get_real_seconds();
kernel/time/ntp.c: * ntp_get_next_leap - Returns the next leapsecond in CLOCK_REALTIME ktime_t
kernel/time/ntp.c: * a ktime_t format. Returns KTIME_MAX if no leapsecond is pending.
kernel/time/ntp.c:ktime_t ntp_get_next_leap(void)
kernel/time/ntp.c:	ktime_t ret;
kernel/time/ntp.c:		return ktime_set(ntp_next_leap_sec, 0);
kernel/time/ntp.c:		time_reftime = __ktime_get_real_seconds();
kernel/time/timekeeping_internal.h:extern time64_t __ktime_get_real_seconds(void);
kernel/time/tick-broadcast-hrtimer.c:static int bc_set_next(ktime_t expires, struct clock_event_device *bc)
kernel/time/tick-broadcast-hrtimer.c:	.set_next_ktime		= bc_set_next,
kernel/time/sched_clock.c:#include <linux/ktime.h>
kernel/time/sched_clock.c:	ktime_t			wrap_kt;
kernel/time/sched_clock.c:	cd.wrap_kt = ns_to_ktime(wrap);
kernel/time/timer_stats.c:static ktime_t time_start, time_stop;
kernel/time/timer_stats.c:	ktime_t time;
kernel/time/timer_stats.c:		time_stop = ktime_get();
kernel/time/timer_stats.c:	time = ktime_sub(time_stop, time_start);
kernel/time/timer_stats.c:	period = ktime_to_timespec64(time);
kernel/time/timer_stats.c:			time_stop = ktime_get();
kernel/time/timer_stats.c:			time_start = ktime_get();
kernel/time/posix-timers.c:	ktime_get_real_ts(tp);
kernel/time/posix-timers.c:static int posix_ktime_get_ts(clockid_t which_clock, struct timespec *tp)
kernel/time/posix-timers.c:	ktime_get_ts(tp);
kernel/time/posix-timers.c:	*tp = ktime_to_timespec(KTIME_LOW_RES);
kernel/time/posix-timers.c:		.clock_get	= posix_ktime_get_ts,
kernel/time/posix-timers.c:			ktime_t now = hrtimer_cb_get_time(timer);
kernel/time/posix-timers.c:				ktime_t kj = ktime_set(0, NSEC_PER_SEC / HZ);
kernel/time/posix-timers.c:					now = ktime_add(now, kj);
kernel/time/posix-timers.c:	ktime_t now, remaining, iv;
kernel/time/posix-timers.c:		cur_setting->it_interval = ktime_to_timespec(iv);
kernel/time/posix-timers.c:		cur_setting->it_value = ktime_to_timespec(remaining);
kernel/time/posix-timers.c:	hrtimer_set_expires(timer, timespec_to_ktime(new_setting->it_value));
kernel/time/posix-timers.c:	timr->it.real.interval = timespec_to_ktime(new_setting->it_interval);
kernel/time/tick-broadcast.c:		ktime_t next = ktime_add(dev->next_event, tick_period);
kernel/time/tick-broadcast.c:				     ktime_t expires)
kernel/time/tick-broadcast.c:	ktime_t now, next_event;
kernel/time/tick-broadcast.c:	now = ktime_get();
kernel/time/tick-broadcast.c:	ktime_t now;
kernel/time/tick-broadcast.c:			now = ktime_get();
kernel/time/tick-broadcast.c:					   ktime_t expires)
kernel/time/timekeeping.c:	WARN_ON_ONCE(tk->offs_real.tv64 != timespec64_to_ktime(tmp).tv64);
kernel/time/timekeeping.c:	tk->offs_real = timespec64_to_ktime(tmp);
kernel/time/timekeeping.c:	tk->offs_tai = ktime_add(tk->offs_real, ktime_set(tk->tai_offset, 0));
kernel/time/timekeeping.c:static inline void tk_update_sleep_time(struct timekeeper *tk, ktime_t delta)
kernel/time/timekeeping.c:	tk->offs_boot = ktime_add(tk->offs_boot, delta);
kernel/time/timekeeping.c: * @ktime_get_mono_fast_ns.
kernel/time/timekeeping.c: * ktime_get_mono_fast_ns - Fast NMI safe access to clock monotonic
kernel/time/timekeeping.c:static __always_inline u64 __ktime_get_fast_ns(struct tk_fast *tkf)
kernel/time/timekeeping.c:		now = ktime_to_ns(tkr->base);
kernel/time/timekeeping.c:u64 ktime_get_mono_fast_ns(void)
kernel/time/timekeeping.c:	return __ktime_get_fast_ns(&tk_fast_mono);
kernel/time/timekeeping.c:EXPORT_SYMBOL_GPL(ktime_get_mono_fast_ns);
kernel/time/timekeeping.c:u64 ktime_get_raw_fast_ns(void)
kernel/time/timekeeping.c:	return __ktime_get_fast_ns(&tk_fast_raw);
kernel/time/timekeeping.c:EXPORT_SYMBOL_GPL(ktime_get_raw_fast_ns);
kernel/time/timekeeping.c: * ktime_get_boot_fast_ns - NMI safe and fast access to boot clock.
kernel/time/timekeeping.c:u64 notrace ktime_get_boot_fast_ns(void)
kernel/time/timekeeping.c:	return (ktime_get_mono_fast_ns() + ktime_to_ns(tk->offs_boot));
kernel/time/timekeeping.c:EXPORT_SYMBOL_GPL(ktime_get_boot_fast_ns);
kernel/time/timekeeping.c: * tk_update_leap_state - helper to update the next_leap_ktime
kernel/time/timekeeping.c:	tk->next_leap_ktime = ntp_get_next_leap();
kernel/time/timekeeping.c:	if (tk->next_leap_ktime.tv64 != KTIME_MAX)
kernel/time/timekeeping.c:		tk->next_leap_ktime = ktime_sub(tk->next_leap_ktime, tk->offs_real);
kernel/time/timekeeping.c: * Update the ktime_t based scalar nsec members of the timekeeper
kernel/time/timekeeping.c:static inline void tk_update_ktime_data(struct timekeeper *tk)
kernel/time/timekeeping.c:	 * The ktime based monotonic readout is:
kernel/time/timekeeping.c:	tk->tkr_mono.base = ns_to_ktime(seconds * NSEC_PER_SEC + nsec);
kernel/time/timekeeping.c:	 * this into account before updating tk->ktime_sec.
kernel/time/timekeeping.c:	tk->ktime_sec = seconds;
kernel/time/timekeeping.c:	tk->tkr_raw.base = ns_to_ktime(tk->raw_sec * NSEC_PER_SEC);
kernel/time/timekeeping.c:	tk_update_ktime_data(tk);
kernel/time/timekeeping.c:ktime_t ktime_get(void)
kernel/time/timekeeping.c:	ktime_t base;
kernel/time/timekeeping.c:	return ktime_add_ns(base, nsecs);
kernel/time/timekeeping.c:EXPORT_SYMBOL_GPL(ktime_get);
kernel/time/timekeeping.c:u32 ktime_get_resolution_ns(void)
kernel/time/timekeeping.c:EXPORT_SYMBOL_GPL(ktime_get_resolution_ns);
kernel/time/timekeeping.c:static ktime_t *offsets[TK_OFFS_MAX] = {
kernel/time/timekeeping.c:ktime_t ktime_get_with_offset(enum tk_offsets offs)
kernel/time/timekeeping.c:	ktime_t base, *offset = offsets[offs];
kernel/time/timekeeping.c:		base = ktime_add(tk->tkr_mono.base, *offset);
kernel/time/timekeeping.c:	return ktime_add_ns(base, nsecs);
kernel/time/timekeeping.c:EXPORT_SYMBOL_GPL(ktime_get_with_offset);
kernel/time/timekeeping.c: * ktime_mono_to_any() - convert mononotic time to any other time
kernel/time/timekeeping.c:ktime_t ktime_mono_to_any(ktime_t tmono, enum tk_offsets offs)
kernel/time/timekeeping.c:	ktime_t *offset = offsets[offs];
kernel/time/timekeeping.c:	ktime_t tconv;
kernel/time/timekeeping.c:		tconv = ktime_add(tmono, *offset);
kernel/time/timekeeping.c:EXPORT_SYMBOL_GPL(ktime_mono_to_any);
kernel/time/timekeeping.c: * ktime_get_raw - Returns the raw monotonic time in ktime_t format
kernel/time/timekeeping.c:ktime_t ktime_get_raw(void)
kernel/time/timekeeping.c:	ktime_t base;
kernel/time/timekeeping.c:	return ktime_add_ns(base, nsecs);
kernel/time/timekeeping.c:EXPORT_SYMBOL_GPL(ktime_get_raw);
kernel/time/timekeeping.c: * ktime_get_ts64 - get the monotonic clock in timespec64 format
kernel/time/timekeeping.c:void ktime_get_ts64(struct timespec64 *ts)
kernel/time/timekeeping.c:EXPORT_SYMBOL_GPL(ktime_get_ts64);
kernel/time/timekeeping.c: * ktime_get_seconds - Get the seconds portion of CLOCK_MONOTONIC
kernel/time/timekeeping.c: * serialized read. tk->ktime_sec is of type 'unsigned long' so this
kernel/time/timekeeping.c:time64_t ktime_get_seconds(void)
kernel/time/timekeeping.c:	return tk->ktime_sec;
kernel/time/timekeeping.c:EXPORT_SYMBOL_GPL(ktime_get_seconds);
kernel/time/timekeeping.c: * ktime_get_real_seconds - Get the seconds portion of CLOCK_REALTIME
kernel/time/timekeeping.c:time64_t ktime_get_real_seconds(void)
kernel/time/timekeeping.c:EXPORT_SYMBOL_GPL(ktime_get_real_seconds);
kernel/time/timekeeping.c: * __ktime_get_real_seconds - The same as ktime_get_real_seconds
kernel/time/timekeeping.c:time64_t __ktime_get_real_seconds(void)
kernel/time/timekeeping.c: * ktime_get_snapshot - snapshots the realtime/monotonic raw clocks with counter
kernel/time/timekeeping.c:void ktime_get_snapshot(struct system_time_snapshot *systime_snapshot)
kernel/time/timekeeping.c:	ktime_t base_raw;
kernel/time/timekeeping.c:	ktime_t base_real;
kernel/time/timekeeping.c:		base_real = ktime_add(tk->tkr_mono.base,
kernel/time/timekeeping.c:	systime_snapshot->real = ktime_add_ns(base_real, nsec_real);
kernel/time/timekeeping.c:	systime_snapshot->raw = ktime_add_ns(base_raw, nsec_raw);
kernel/time/timekeeping.c:EXPORT_SYMBOL_GPL(ktime_get_snapshot);
kernel/time/timekeeping.c:	corr_raw = (u64)ktime_to_ns(
kernel/time/timekeeping.c:		ktime_sub(ts->sys_monoraw, history->raw));
kernel/time/timekeeping.c:		corr_real = (u64)ktime_to_ns(
kernel/time/timekeeping.c:			ktime_sub(ts->sys_realtime, history->real));
kernel/time/timekeeping.c:		ts->sys_monoraw = ktime_add_ns(history->raw, corr_raw);
kernel/time/timekeeping.c:		ts->sys_realtime = ktime_add_ns(history->real, corr_real);
kernel/time/timekeeping.c:		ts->sys_monoraw = ktime_sub_ns(ts->sys_monoraw, corr_raw);
kernel/time/timekeeping.c:		ts->sys_realtime = ktime_sub_ns(ts->sys_realtime, corr_real);
kernel/time/timekeeping.c:				  (ktime_t *device_time,
kernel/time/timekeeping.c:	ktime_t base_real, base_raw;
kernel/time/timekeeping.c:		base_real = ktime_add(tk->tkr_mono.base,
kernel/time/timekeeping.c:	xtstamp->sys_realtime = ktime_add_ns(base_real, nsec_real);
kernel/time/timekeeping.c:	xtstamp->sys_monoraw = ktime_add_ns(base_raw, nsec_raw);
kernel/time/timekeeping.c:	tk->offs_tai = ktime_add(tk->offs_real, ktime_set(tai_offset, 0));
kernel/time/timekeeping.c:	tk_update_sleep_time(tk, timespec64_to_ktime(*delta));
kernel/time/timekeeping.c:	ktime_t t = ktime_sub(tk->offs_real, tk->offs_boot);
kernel/time/timekeeping.c:	*ts = ktime_to_timespec64(t);
kernel/time/timekeeping.c: * ktime_get_update_offsets_now - hrtimer helper
kernel/time/timekeeping.c:ktime_t ktime_get_update_offsets_now(unsigned int *cwsseq, ktime_t *offs_real,
kernel/time/timekeeping.c:				     ktime_t *offs_boot, ktime_t *offs_tai)
kernel/time/timekeeping.c:	ktime_t base;
kernel/time/timekeeping.c:		base = ktime_add_ns(base, nsecs);
kernel/time/timekeeping.c:		if (unlikely(base.tv64 >= tk->next_leap_ktime.tv64))
kernel/time/timekeeping.c:			*offs_real = ktime_sub(tk->offs_real, ktime_set(1, 0));
kernel/time/time.c: * mktime64 - Converts date to seconds.
kernel/time/time.c:time64_t mktime64(const unsigned int year0, const unsigned int mon0,
kernel/time/time.c:EXPORT_SYMBOL(mktime64);
kernel/time/tick-common.c:ktime_t tick_next_period;
kernel/time/tick-common.c:ktime_t tick_period;
kernel/time/tick-common.c:		tick_next_period = ktime_add(tick_next_period, tick_period);
kernel/time/tick-common.c:	ktime_t next = dev->next_event;
kernel/time/tick-common.c:		next = ktime_add(next, tick_period);
kernel/time/tick-common.c:		ktime_t next;
kernel/time/tick-common.c:			next = ktime_add(next, tick_period);
kernel/time/tick-common.c:	ktime_t next_event;
kernel/time/tick-common.c:			tick_next_period = ktime_get();
kernel/time/tick-common.c:			tick_period = ktime_set(0, NSEC_PER_SEC / HZ);
kernel/time/clockevents.c:		dev->next_event = ktime_add_ns(ktime_get(), delta);
kernel/time/clockevents.c:	dev->next_event = ktime_add_ns(ktime_get(), delta);
kernel/time/clockevents.c:int clockevents_program_event(struct clock_event_device *dev, ktime_t expires,
kernel/time/clockevents.c:	/* Shortcut for clockevent devices that can deal with ktime. */
kernel/time/clockevents.c:		return dev->set_next_ktime(expires, dev);
kernel/time/clockevents.c:	delta = ktime_to_ns(ktime_sub(expires, ktime_get()));
kernel/time/test_udelay.c:#include <linux/ktime.h>
kernel/time/test_udelay.c:		kt1 = ktime_get_ns();
kernel/time/test_udelay.c:		kt2 = ktime_get_ns();
kernel/time/test_udelay.c:		ktime_get_ts64(&ts);
kernel/async.c:#include <linux/ktime.h>
kernel/async.c:	ktime_t uninitialized_var(calltime), delta, rettime;
kernel/async.c:		calltime = ktime_get();
kernel/async.c:		rettime = ktime_get();
kernel/async.c:		delta = ktime_sub(rettime, calltime);
kernel/async.c:			(long long)ktime_to_ns(delta) >> 10);
kernel/async.c:	ktime_t uninitialized_var(starttime), delta, endtime;
kernel/async.c:		starttime = ktime_get();
kernel/async.c:		endtime = ktime_get();
kernel/async.c:		delta = ktime_sub(endtime, starttime);
kernel/async.c:			(long long)ktime_to_ns(delta) >> 10);
kernel/futex_compat.c:	ktime_t t, *tp = NULL;
kernel/futex_compat.c:		t = timespec_to_ktime(ts);
kernel/futex_compat.c:			t = ktime_add_safe(ktime_get(), t);
kernel/events/core.c:	cpuctx->hrtimer_interval = ns_to_ktime(NSEC_PER_MSEC * interval);
kernel/events/core.c:	hrtimer_forward_now(hrtimer, ns_to_ktime(period));
kernel/events/core.c:	hrtimer_start(&hwc->hrtimer, ns_to_ktime(period),
kernel/events/core.c:		ktime_t remaining = hrtimer_get_remaining(&hwc->hrtimer);
kernel/events/core.c:		local64_set(&hwc->period_left, ktime_to_ns(remaining));
kernel/events/core.c:		cpuctx->hrtimer_interval = ns_to_ktime(NSEC_PER_MSEC * timer);
kernel/events/core.c:		event->clock = &ktime_get_mono_fast_ns;
kernel/events/core.c:		event->clock = &ktime_get_raw_fast_ns;
kernel/events/core.c:		event->clock = &ktime_get_real_ns;
kernel/events/core.c:		event->clock = &ktime_get_boot_ns;
kernel/events/core.c:		event->clock = &ktime_get_tai_ns;
kernel/futex.c:		      ktime_t *abs_time, u32 bitset)
kernel/futex.c:	ktime_t t, *tp = NULL;
kernel/futex.c:			 ktime_t *time, int trylock)
kernel/futex.c:				 u32 val, ktime_t *abs_time, u32 bitset,
kernel/futex.c:long do_futex(u32 __user *uaddr, int op, u32 val, ktime_t *timeout,
kernel/futex.c:	ktime_t t, *tp = NULL;
kernel/futex.c:		t = timespec_to_ktime(ts);
kernel/futex.c:			t = ktime_add_safe(ktime_get(), t);
kernel/sysctl_binary.c:	/* NET_NEIGH_LOCKTIME "locktime" no longer used */
kernel/workqueue.c:	uptime = ktime_get_ns();
kernel/acct.c:	run_time = ktime_get_ns();
kernel/power/swap.c:#include <linux/ktime.h>
kernel/power/swap.c:	ktime_t start;
kernel/power/swap.c:	ktime_t stop;
kernel/power/swap.c:	start = ktime_get();
kernel/power/swap.c:	stop = ktime_get();
kernel/power/swap.c:	ktime_t start;
kernel/power/swap.c:	ktime_t stop;
kernel/power/swap.c:	start = ktime_get();
kernel/power/swap.c:	stop = ktime_get();
kernel/power/swap.c:	ktime_t start;
kernel/power/swap.c:	ktime_t stop;
kernel/power/swap.c:	start = ktime_get();
kernel/power/swap.c:	stop = ktime_get();
kernel/power/swap.c:	ktime_t start;
kernel/power/swap.c:	ktime_t stop;
kernel/power/swap.c:	start = ktime_get();
kernel/power/swap.c:	stop = ktime_get();
kernel/power/wakelock.c:	ktime_t now;
kernel/power/wakelock.c:	now = ktime_get();
kernel/power/wakelock.c:		idle_time_ns = ktime_to_ns(ktime_sub(now, wl->ws.last_time));
kernel/power/power.h:extern void swsusp_show_speed(ktime_t, ktime_t, unsigned int, char *);
kernel/power/process.c:	ktime_t start, end, elapsed;
kernel/power/process.c:	start = ktime_get_boottime();
kernel/power/process.c:	end = ktime_get_boottime();
kernel/power/process.c:	elapsed = ktime_sub(end, start);
kernel/power/process.c:	elapsed_msecs = ktime_to_ms(elapsed);
kernel/power/wakeup_reason.c:static ktime_t last_monotime; /* monotonic time before last suspend */
kernel/power/wakeup_reason.c:static ktime_t curr_monotime; /* monotonic time after last suspend */
kernel/power/wakeup_reason.c:static ktime_t last_stime; /* monotonic boottime offset before last suspend */
kernel/power/wakeup_reason.c:static ktime_t curr_stime; /* monotonic boottime offset after last suspend */
kernel/power/wakeup_reason.c:	total_time = ktime_to_timespec(ktime_sub(curr_stime, last_stime));
kernel/power/wakeup_reason.c:	suspend_resume_time = ktime_to_timespec(ktime_sub(curr_monotime, last_monotime));
kernel/power/wakeup_reason.c:		last_monotime = ktime_get();
kernel/power/wakeup_reason.c:		last_stime = ktime_get_boottime();
kernel/power/wakeup_reason.c:		curr_monotime = ktime_get();
kernel/power/wakeup_reason.c:		curr_stime = ktime_get_boottime();
kernel/power/snapshot.c:#include <linux/ktime.h>
kernel/power/snapshot.c:	ktime_t start, stop;
kernel/power/snapshot.c:	start = ktime_get();
kernel/power/snapshot.c:	stop = ktime_get();
kernel/power/hibernate.c:#include <linux/ktime.h>
kernel/power/hibernate.c:void swsusp_show_speed(ktime_t start, ktime_t stop,
kernel/power/hibernate.c:	ktime_t diff;
kernel/power/hibernate.c:	diff = ktime_sub(stop, start);
kernel/power/hibernate.c:	elapsed_centisecs64 = ktime_divns(diff, 10*NSEC_PER_MSEC);
kernel/trace/blktrace.c:		t->time = ktime_to_ns(ktime_get());
kernel/trace/blktrace.c:	ktime_get_real_ts64(&now);
kernel/trace/blktrace.c:		t->time = ktime_to_ns(ktime_get());
kernel/trace/trace_clock.c:#include <linux/ktime.h>
kernel/trace/bpf_trace.c:	case BPF_FUNC_ktime_get_ns:
kernel/trace/bpf_trace.c:		return &bpf_ktime_get_ns_proto;
kernel/trace/ring_buffer_benchmark.c:#include <linux/ktime.h>
kernel/trace/ring_buffer_benchmark.c:	ktime_t start_time, end_time, timeout;
kernel/trace/ring_buffer_benchmark.c:	start_time = ktime_get();
kernel/trace/ring_buffer_benchmark.c:	timeout = ktime_add_ns(start_time, RUN_TIME * NSEC_PER_SEC);
kernel/trace/ring_buffer_benchmark.c:		end_time = ktime_get();
kernel/trace/ring_buffer_benchmark.c:	} while (ktime_before(end_time, timeout) && !break_test());
kernel/trace/ring_buffer_benchmark.c:	time = ktime_us_delta(end_time, start_time);
kernel/trace/trace.c:	{ ktime_get_mono_fast_ns,	"mono",		1 },
kernel/trace/trace.c:	{ ktime_get_raw_fast_ns,	"mono_raw",	1 },
kernel/trace/trace.c:	{ ktime_get_boot_fast_ns,	"boot",		1 },
kernel/signal.c:	ktime_t *to = NULL, timeout = { .tv64 = KTIME_MAX };
kernel/signal.c:		timeout = timespec_to_ktime(*ts);
kernel/fork.c:	p->start_time = ktime_get_ns();
kernel/fork.c:	p->real_start_time = ktime_get_boot_ns();
kernel/tsacct.c:	delta = ktime_get_ns() - tsk->start_time;
kernel/watchdog.c:	hrtimer_forward_now(hrtimer, ns_to_ktime(sample_period));
kernel/watchdog.c:	hrtimer_start(hrtimer, ns_to_ktime(sample_period),
kernel/sched/core.c:		p->last_wake_ts = walt_ktime_clock();
kernel/sched/core.c:	ktime_t time;
kernel/sched/core.c:	time = ktime_add_ns(timer->base->get_time(), delta);
kernel/sched/core.c:	hrtimer_start(&rq->hrtick_timer, ns_to_ktime(delay),
kernel/sched/core.c:			ktime_t to = ktime_set(0, NSEC_PER_SEC/HZ);
kernel/sched/core.c:	wallclock = walt_ktime_clock();
kernel/sched/core.c:		wallclock = walt_ktime_clock();
kernel/sched/core.c:		u64 wallclock = walt_ktime_clock();
kernel/sched/core.c:	wallclock = walt_ktime_clock();
kernel/sched/core.c:	wallclock = walt_ktime_clock();
kernel/sched/core.c:	period = ktime_to_ns(tg->rt_bandwidth.rt_period);
kernel/sched/core.c:		period = ktime_to_ns(child->rt_bandwidth.rt_period);
kernel/sched/core.c:	tg->rt_bandwidth.rt_period = ns_to_ktime(rt_period);
kernel/sched/core.c:	rt_period = ktime_to_ns(tg->rt_bandwidth.rt_period);
kernel/sched/core.c:	rt_period_us = ktime_to_ns(tg->rt_bandwidth.rt_period);
kernel/sched/core.c:	def_rt_bandwidth.rt_period = ns_to_ktime(global_rt_period());
kernel/sched/core.c:	cfs_b->period = ns_to_ktime(period);
kernel/sched/core.c:	period = ktime_to_ns(tg->cfs_bandwidth.period);
kernel/sched/core.c:	cfs_period_us = ktime_to_ns(tg->cfs_bandwidth.period);
kernel/sched/clock.c:#include <linux/ktime.h>
kernel/sched/clock.c:	u64 ktime_now = ktime_to_ns(ktime_get());
kernel/sched/clock.c:		scd->tick_gtod = ktime_now;
kernel/sched/clock.c:		scd->clock = ktime_now;
kernel/sched/clock.c:	now_gtod = ktime_to_ns(ktime_get());
kernel/sched/debug.c:	u64 ktime, sched_clk, cpu_clk;
kernel/sched/debug.c:	ktime = ktime_to_ns(ktime_get());
kernel/sched/debug.c:	PN(ktime);
kernel/sched/frame/frame_debug.c:	u64 now = ktime_get_ns();
kernel/sched/frame/frame_info.c:	wallclock = ktime_get_ns();
kernel/sched/frame/frame_info.c:	timestamp = ktime_get_ns();
kernel/sched/sched.h:	ktime_t			rt_period;
kernel/sched/sched.h:	ktime_t period;
kernel/sched/sched.h:extern u64 walt_ktime_clock(void);
kernel/sched/sched.h:	u64 clock = use_pelt_freq() ? rq_clock(rq) : walt_ktime_clock();
kernel/sched/walt.h:u64 walt_ktime_clock(void);
kernel/sched/walt.h:static inline u64 walt_ktime_clock(void) { return 0; }
kernel/sched/hisi_rtg.c:	wallclock = walt_ktime_clock();
kernel/sched/hisi_rtg.c:	wallclock = walt_ktime_clock();
kernel/sched/hisi_rtg.c:	now = ktime_get_ns();
kernel/sched/hisi_rtg.c:	now = ktime_get_ns();
kernel/sched/hisi_rtg.c:	u64 now = ktime_get_ns();
kernel/sched/cpufreq_schedutil.c:	/* End time of boost pulse in ktime converted to usecs */
kernel/sched/cpufreq_schedutil.c:	ktime_t start_time;
kernel/sched/cpufreq_schedutil.c:	ktime_t end_time;
kernel/sched/cpufreq_schedutil.c:	now = ktime_to_us(ktime_get());
kernel/sched/cpufreq_schedutil.c:	now = use_pelt() ? ktime_get_ns() : walt_ktime_clock();
kernel/sched/cpufreq_schedutil.c:		if (LONGER_MIN_SAMPLE_TIME_ELAPSED_DURATION > ktime_to_ns(ktime_sub(ktime_get(), sg_policy->end_time))) { //lint !e446
kernel/sched/cpufreq_schedutil.c:			walt_update_task_ravg(rq->curr, rq, TASK_UPDATE, walt_ktime_clock(), 0);
kernel/sched/cpufreq_schedutil.c:		walt_update_task_ravg(rq->curr, rq, TASK_UPDATE, walt_ktime_clock(), 0);
kernel/sched/cpufreq_schedutil.c:		tunables->boostpulse_endtime = ktime_to_us(ktime_get());
kernel/sched/cpufreq_schedutil.c:	now = ktime_to_us(ktime_get());
kernel/sched/cpufreq_schedutil.c:	sg_policy->start_time = ktime_get();
kernel/sched/cpufreq_schedutil.c:	ktime_t now;
kernel/sched/cpufreq_schedutil.c:		sg_policy->start_time = ktime_get();
kernel/sched/cpufreq_schedutil.c:		now = ktime_get();
kernel/sched/cpufreq_schedutil.c:		delta = ktime_to_ns(ktime_sub(now, sg_policy->start_time));
kernel/sched/fair.c:	cfs_b->runtime_expires = now + ktime_to_ns(cfs_b->period);
kernel/sched/fair.c:	remaining = ktime_to_ns(hrtimer_expires_remaining(refresh_timer));
kernel/sched/fair.c:			ns_to_ktime(cfs_bandwidth_slack_period),
kernel/sched/fair.c:	cfs_b->period = ns_to_ktime(default_cfs_period());
kernel/sched/rt.c:	rt_b->rt_period = ns_to_ktime(period);
kernel/sched/rt.c:		hrtimer_forward_now(&rt_b->rt_period_timer, ns_to_ktime(0));
kernel/sched/rt.c:			ktime_to_ns(def_rt_bandwidth.rt_period), 0);
kernel/sched/rt.c:	return ktime_to_ns(rt_rq->tg->rt_bandwidth.rt_period);
kernel/sched/rt.c:	return ktime_to_ns(def_rt_bandwidth.rt_period);
kernel/sched/rt.c:	rt_period = ktime_to_ns(rt_b->rt_period);
kernel/sched/hwstatus.c:	u64 ktime_last;
kernel/sched/hwstatus.c:	u64 ktime_now;
kernel/sched/hwstatus.c:	u64  ktime_iodelay;
kernel/sched/hwstatus.c:static u64 ktime_last = 0;
kernel/sched/hwstatus.c:		caller.ktime_iodelay = ktime_get_ns();
kernel/sched/hwstatus.c:	if(caller.ktime_iodelay >= ktime_last) {
kernel/sched/hwstatus.c:			if(caller.ktime_iodelay >= ktime_last) {
kernel/sched/hwstatus.c:				hwstatus_rst.caller.ktime_iodelay = caller.ktime_iodelay;
kernel/sched/hwstatus.c:				hwstatus_rst.caller.ktime_iodelay  = 0;
kernel/sched/hwstatus.c:	hwstatus_rst.head.ktime_last = ktime_last;
kernel/sched/hwstatus.c:	hwstatus_rst.head.ktime_now  = ktime_get_ns();
kernel/sched/hwstatus.c:	ktime_last = ktime_get_ns();
kernel/sched/walt.c:static ktime_t ktime_last;
kernel/sched/walt.c:static __read_mostly bool walt_ktime_suspended;
kernel/sched/walt.c:u64 walt_ktime_clock(void)
kernel/sched/walt.c:	if (unlikely(walt_ktime_suspended))
kernel/sched/walt.c:		return ktime_to_ns(ktime_last);
kernel/sched/walt.c:	return ktime_get_ns();
kernel/sched/walt.c:	walt_ktime_suspended = false;
kernel/sched/walt.c:	ktime_last = ktime_get();
kernel/sched/walt.c:	walt_ktime_suspended = true;
kernel/sched/walt.c:		walt_update_task_ravg(curr, rq, IRQ_UPDATE, walt_ktime_clock(),
kernel/sched/walt.c:	wallclock = walt_ktime_clock();
kernel/sched/walt.c:	wallclock = walt_ktime_clock();
kernel/sched/hisi_core_ctl.c:	now = ktime_to_ms(ktime_get());
kernel/sched/hisi_core_ctl.c:	now = ktime_to_ms(ktime_get());
kernel/sched/hisi_core_ctl.c:			c->isolate_ts = ktime_to_ms(ktime_get());
kernel/sched/hisi_core_ctl.c:	ts = ktime_to_ms(ktime_get());
kernel/sched/deadline.c:	ktime_t now, act;
kernel/sched/deadline.c:	act = ns_to_ktime(dl_next_period(dl_se));
kernel/sched/deadline.c:	delta = ktime_to_ns(now) - rq_clock(rq);
kernel/sched/deadline.c:	act = ktime_add_ns(act, delta);
kernel/sched/deadline.c:	if (ktime_us_delta(act, now) < 0)
samples/bpf/lathist_kern.c:		*ts = bpf_ktime_get_ns();
samples/bpf/lathist_kern.c:	cur_ts = bpf_ktime_get_ns();
samples/bpf/tracex4_kern.c:		.val = bpf_ktime_get_ns(),
samples/bpf/tracex3_kern.c:	u64 val = bpf_ktime_get_ns();
samples/bpf/tracex3_kern.c:	u64 cur_time = bpf_ktime_get_ns();
samples/bpf/bpf_helpers.h:static unsigned long long (*bpf_ktime_get_ns)(void) =
samples/bpf/bpf_helpers.h:	(void *) BPF_FUNC_ktime_get_ns;
samples/bpf/offwaketime_kern.c:	ts = bpf_ktime_get_ns();
samples/bpf/offwaketime_kern.c:	delta = bpf_ktime_get_ns() - *tsp;
samples/kprobes/kretprobe_example.c:#include <linux/ktime.h>
samples/kprobes/kretprobe_example.c:	ktime_t entry_stamp;
samples/kprobes/kretprobe_example.c:	data->entry_stamp = ktime_get();
samples/kprobes/kretprobe_example.c:	ktime_t now;
samples/kprobes/kretprobe_example.c:	now = ktime_get();
samples/kprobes/kretprobe_example.c:	delta = ktime_to_ns(ktime_sub(now, data->entry_stamp));
example.log:/home/ubuntu/kirin970/include/linux/ktime.h:60:43: error: 'time_start.tv64' may be used uninitialized in this function [-Werror=maybe-uninitialized]
example.log:   60 |   ({ (ktime_t){ .tv64 = (lhs).tv64 - (rhs).tv64 }; })
Binary file .git/objects/pack/pack-63b925f97008266e4e9afae1448d0c3ecb109970.pack matches
Binary file .git/index matches
ipc/mqueue.c:		    ktime_t *timeout, struct ext_wait_queue *ewp)
ipc/mqueue.c:			   ktime_t *expires, struct timespec *ts)
ipc/mqueue.c:	*expires = timespec_to_ktime(*ts);
ipc/mqueue.c:	ktime_t expires, *timeout = NULL;
ipc/mqueue.c:	ktime_t expires, *timeout = NULL;
scripts/analyze_suspend.py:		ktime = '0'
scripts/analyze_suspend.py:			m = re.match('[ \t]*(\[ *)(?P<ktime>[0-9\.]*)(\]) (?P<msg>.*)', line)
scripts/analyze_suspend.py:				ktime = m.group('ktime')
scripts/analyze_suspend.py:		self.dmesgstart = float(ktime)
scripts/analyze_suspend.py:			m = re.match('[ \t]*(\[ *)(?P<ktime>[0-9\.]*)(\]) (?P<msg>.*)', line)
scripts/analyze_suspend.py:			ktime = float(m.group('ktime'))
scripts/analyze_suspend.py:			if ktime > self.dmesgstart:
scripts/analyze_suspend.py:	def setPhase(self, phase, ktime, isbegin):
scripts/analyze_suspend.py:			self.dmesg[phase]['start'] = ktime
scripts/analyze_suspend.py:			self.dmesg[phase]['end'] = ktime
scripts/analyze_suspend.py:		m = re.match('[ \t]*(\[ *)(?P<ktime>[0-9\.]*)(\]) (?P<msg>.*)', line)
scripts/analyze_suspend.py:		m = re.match('[ \t]*(\[ *)(?P<ktime>[0-9\.]*)(\]) (?P<msg>.*)', line)
scripts/analyze_suspend.py:	prevktime = -1.0
scripts/analyze_suspend.py:		m = re.match('[ \t]*(\[ *)(?P<ktime>[0-9\.]*)(\]) (?P<msg>.*)', line)
scripts/analyze_suspend.py:			val = m.group('ktime')
scripts/analyze_suspend.py:				ktime = float(val)
scripts/analyze_suspend.py:				data.setStart(ktime)
scripts/analyze_suspend.py:				t0 = ktime
scripts/analyze_suspend.py:			data.dmesg['resume_machine']['end'] = ktime
scripts/analyze_suspend.py:			data.dmesg[phase]['start'] = ktime
scripts/analyze_suspend.py:			data.dmesg[phase]['start'] = ktime
scripts/analyze_suspend.py:			data.setStart(ktime)
scripts/analyze_suspend.py:			data.dmesg['suspend_prepare']['end'] = ktime
scripts/analyze_suspend.py:			data.dmesg[phase]['start'] = ktime
scripts/analyze_suspend.py:			data.dmesg['suspend']['end'] = ktime
scripts/analyze_suspend.py:			data.dmesg[phase]['start'] = ktime
scripts/analyze_suspend.py:			data.dmesg['suspend_late']['end'] = ktime
scripts/analyze_suspend.py:			data.dmesg[phase]['start'] = ktime
scripts/analyze_suspend.py:			data.dmesg['suspend_noirq']['end'] = ktime
scripts/analyze_suspend.py:			data.dmesg[phase]['start'] = ktime
scripts/analyze_suspend.py:				data.tSuspended = prevktime
scripts/analyze_suspend.py:				data.dmesg['suspend_machine']['end'] = prevktime
scripts/analyze_suspend.py:				data.tSuspended = ktime
scripts/analyze_suspend.py:				data.dmesg['suspend_machine']['end'] = ktime
scripts/analyze_suspend.py:			data.tResumed = ktime
scripts/analyze_suspend.py:			data.dmesg[phase]['start'] = ktime
scripts/analyze_suspend.py:			data.dmesg['resume_machine']['end'] = ktime
scripts/analyze_suspend.py:			data.dmesg[phase]['start'] = ktime
scripts/analyze_suspend.py:			data.dmesg['resume_noirq']['end'] = ktime
scripts/analyze_suspend.py:			data.dmesg[phase]['start'] = ktime
scripts/analyze_suspend.py:			data.dmesg['resume_early']['end'] = ktime
scripts/analyze_suspend.py:			data.dmesg[phase]['start'] = ktime
scripts/analyze_suspend.py:			data.dmesg['resume']['end'] = ktime
scripts/analyze_suspend.py:			data.dmesg[phase]['start'] = ktime
scripts/analyze_suspend.py:			data.dmesg['resume_complete']['end'] = ktime
scripts/analyze_suspend.py:			data.setEnd(ktime)
scripts/analyze_suspend.py:					data.newAction(phase, f, int(n), p, ktime, -1, '')
scripts/analyze_suspend.py:					dev['end'] = ktime
scripts/analyze_suspend.py:					actions[a].append({'begin': ktime, 'end': ktime})
scripts/analyze_suspend.py:						actions[a][-1]['end'] = ktime
scripts/analyze_suspend.py:				cpu_start = ktime
scripts/analyze_suspend.py:				cpu_start = ktime
scripts/analyze_suspend.py:				actions[cpu].append({'begin': cpu_start, 'end': ktime})
scripts/analyze_suspend.py:				cpu_start = ktime
scripts/analyze_suspend.py:				actions[cpu].append({'begin': cpu_start, 'end': ktime})
scripts/analyze_suspend.py:				cpu_start = ktime
scripts/analyze_suspend.py:		prevktime = ktime
scripts/analyze_suspend.py:			sktime = '%.3f'%((data.dmesg['suspend_machine']['end'] - \
scripts/analyze_suspend.py:			rktime = '%.3f'%((data.dmesg['resume_complete']['end'] - \
scripts/analyze_suspend.py:			devtl.html['header'] += html_timegroups.format(sktime, \
scripts/analyze_suspend.py:				sftime, rftime, rktime, testdesc2)
lib/wbt.c:	now = ktime_to_ns(ktime_get());
lib/Kconfig.debug:	  During linktime or runtime, some sections are dropped;
lib/test_bpf.c:	start = ktime_get_ns();
lib/test_bpf.c:	finish = ktime_get_ns();
lib/test_rhashtable.c:	start = ktime_get_ns();
lib/test_rhashtable.c:	end = ktime_get_ns();
lib/crc32.c:	nsec = ktime_get_ns();
lib/crc32.c:	nsec = ktime_get_ns() - nsec;
lib/crc32.c:	nsec = ktime_get_ns();
lib/crc32.c:	nsec = ktime_get_ns() - nsec;
virt/kvm/kvm_main.c:	ktime_t start, cur;
virt/kvm/kvm_main.c:	start = cur = ktime_get();
virt/kvm/kvm_main.c:		ktime_t stop = ktime_add_ns(ktime_get(), vcpu->halt_poll_ns);
virt/kvm/kvm_main.c:			cur = ktime_get();
virt/kvm/kvm_main.c:		} while (single_task_running() && ktime_before(cur, stop));
virt/kvm/kvm_main.c:	cur = ktime_get();
virt/kvm/kvm_main.c:	block_ns = ktime_to_ns(cur) - ktime_to_ns(start);
virt/kvm/arm/arch_timer.c:	hrtimer_start(&timer->timer, ktime_add_ns(ktime_get(), ns),
virt/kvm/arm/arch_timer.c:		hrtimer_forward_now(hrt, ns_to_ktime(ns));
block/blk-stat.c:	__blk_stat_init(stat, ktime_to_ns(ktime_get()));
block/blk-stat.c:	now = ktime_to_ns(ktime_get());
block/hisi-blk-flush.S:	.file 34 "/mnt/disk/jenkins/ci/workspace/chipset_patch_970_docker/opensource/component_code/vendor/huawei/extra/build/build_script/kirin_kernel_release/kernel/include/linux/ktime.h"
block/hisi-blk-flush.S:	.string	"total_busy_ktime"
block/hisi-blk-flush.S:	.string	"bio_stage_ktime"
block/hisi-blk-flush.S:	.string	"total_idle_ktime"
block/hisi-blk-flush.S:	.string	"last_busy_ktime"
block/hisi-blk-flush.S:	.string	"req_stage_ktime"
block/hisi-blk-flush.S:	.string	"ktime_t"
block/hisi-blk-flush.S:	.string	"ktime"
block/hisi-blk-flush.S:	.string	"last_idle_ktime"
block/hisi-blk-ft.S:	.file 30 "/mnt/disk/jenkins/ci/workspace/chipset_patch_970_docker/opensource/component_code/vendor/huawei/extra/build/build_script/kirin_kernel_release/kernel/include/linux/ktime.h"
block/hisi-blk-ft.S:	.string	"total_busy_ktime"
block/hisi-blk-ft.S:	.string	"bio_stage_ktime"
block/hisi-blk-ft.S:	.string	"total_idle_ktime"
block/hisi-blk-ft.S:	.string	"last_busy_ktime"
block/hisi-blk-ft.S:	.string	"req_stage_ktime"
block/hisi-blk-ft.S:	.string	"ktime_t"
block/hisi-blk-ft.S:	.string	"ktime"
block/hisi-blk-ft.S:	.string	"last_idle_ktime"
block/hisi-blk-iosched-ufs-mq.S:	bl	ktime_get
block/hisi-blk-iosched-ufs-mq.S:	bl	ktime_get
block/hisi-blk-iosched-ufs-mq.S:	bl	ktime_get
block/hisi-blk-iosched-ufs-mq.S:	bl	ktime_get
block/hisi-blk-iosched-ufs-mq.S:	bl	ktime_get
block/hisi-blk-iosched-ufs-mq.S:	.file 16 "/mnt/disk/jenkins/ci/workspace/chipset_patch_970_docker/opensource/component_code/vendor/huawei/extra/build/build_script/kirin_kernel_release/kernel/include/linux/ktime.h"
block/hisi-blk-iosched-ufs-mq.S:	bl	ktime_get
block/hisi-blk-iosched-ufs-mq.S:	bl	ktime_get
block/hisi-blk-iosched-ufs-mq.S:	bl	ktime_get
block/hisi-blk-iosched-ufs-mq.S:	bl	ktime_get
block/hisi-blk-iosched-ufs-mq.S:	bl	ktime_get
block/hisi-blk-iosched-ufs-mq.S:	bl	ktime_get
block/hisi-blk-iosched-ufs-mq.S:	bl	ktime_get
block/hisi-blk-iosched-ufs-mq.S:	bl	ktime_get
block/hisi-blk-iosched-ufs-mq.S:	bl	ktime_get
block/hisi-blk-iosched-ufs-mq.S:	bl	ktime_get
block/hisi-blk-iosched-ufs-mq.S:	bl	ktime_get
block/hisi-blk-iosched-ufs-mq.S:	bl	ktime_get
block/hisi-blk-iosched-ufs-mq.S:	bl	ktime_get
block/hisi-blk-iosched-ufs-mq.S:	bl	ktime_get
block/hisi-blk-iosched-ufs-mq.S:	bl	ktime_get
block/hisi-blk-iosched-ufs-mq.S:	bl	ktime_get
block/hisi-blk-iosched-ufs-mq.S:	bl	ktime_get
block/hisi-blk-iosched-ufs-mq.S:	bl	ktime_get
block/hisi-blk-iosched-ufs-mq.S:	bl	ktime_get
block/hisi-blk-iosched-ufs-mq.S:	bl	ktime_get
block/hisi-blk-iosched-ufs-mq.S:	bl	ktime_get
block/hisi-blk-iosched-ufs-mq.S:	bl	ktime_get
block/hisi-blk-iosched-ufs-mq.S:	.string	"ktime_compare"
block/hisi-blk-iosched-ufs-mq.S:	.string	"now_ktime"
block/hisi-blk-iosched-ufs-mq.S:	.string	"total_busy_ktime"
block/hisi-blk-iosched-ufs-mq.S:	.string	"ktime_get"
block/hisi-blk-iosched-ufs-mq.S:	.string	"last_async_io_inflight_limit_update_ktime"
block/hisi-blk-iosched-ufs-mq.S:	.string	"bio_stage_ktime"
block/hisi-blk-iosched-ufs-mq.S:	.string	"total_idle_ktime"
block/hisi-blk-iosched-ufs-mq.S:	.string	"ktime_add_ms"
block/hisi-blk-iosched-ufs-mq.S:	.string	"last_sync_burst_trigger_ktime"
block/hisi-blk-iosched-ufs-mq.S:	.string	"last_sync_io_complete_ktime"
block/hisi-blk-iosched-ufs-mq.S:	.string	"last_sync_io_submit_ktime"
block/hisi-blk-iosched-ufs-mq.S:	.string	"ktime_before"
block/hisi-blk-iosched-ufs-mq.S:	.string	"ktime_after"
block/hisi-blk-iosched-ufs-mq.S:	.string	"last_busy_ktime"
block/hisi-blk-iosched-ufs-mq.S:	.string	"req_stage_ktime"
block/hisi-blk-iosched-ufs-mq.S:	.string	"ktime_t"
block/hisi-blk-iosched-ufs-mq.S:	.string	"last_async_io_complete_ktime"
block/hisi-blk-iosched-ufs-mq.S:	.string	"ktime"
block/hisi-blk-iosched-ufs-mq.S:	.string	"last_idle_ktime"
block/hisi-blk-latency.S:	bl	ktime_get_with_offset
block/hisi-blk-latency.S:	bl	ktime_get_with_offset
block/hisi-blk-latency.S:	bl	ktime_get_with_offset
block/hisi-blk-latency.S:	bl	ktime_get_with_offset
block/hisi-blk-latency.S:	bl	ktime_get
block/hisi-blk-latency.S:	bl	ktime_get
block/hisi-blk-latency.S:	.file 39 "/mnt/disk/jenkins/ci/workspace/chipset_patch_970_docker/opensource/component_code/vendor/huawei/extra/build/build_script/kirin_kernel_release/kernel/include/linux/ktime.h"
block/hisi-blk-latency.S:	.string	"total_busy_ktime"
block/hisi-blk-latency.S:	.string	"ktime_get"
block/hisi-blk-latency.S:	.string	"bio_stage_ktime"
block/hisi-blk-latency.S:	.string	"total_idle_ktime"
block/hisi-blk-latency.S:	.string	"ktime_get_boottime"
block/hisi-blk-latency.S:	.string	"ktime_get_with_offset"
block/hisi-blk-latency.S:	.string	"last_busy_ktime"
block/hisi-blk-latency.S:	.string	"req_stage_ktime"
block/hisi-blk-latency.S:	.string	"ktime_t"
block/hisi-blk-latency.S:	.string	"ktime"
block/hisi-blk-latency.S:	.string	"last_idle_ktime"
block/row-iosched.c:	ktime_t			last_insert_time;
block/row-iosched.c:		diff_ms = ktime_to_ms(ktime_sub(ktime_get(),
block/row-iosched.c:		rqueue->idle_data.last_insert_time = ktime_get();
block/row-iosched.c:		ktime_set(0, rd->rd_idle_data.idle_time_ms * NSEC_PER_MSEC),
block/row-iosched.c:			ktime_set(0, 0);
block/hisi-blk-busy-idle-notify.S:	bl	ktime_get
block/hisi-blk-busy-idle-notify.S:	.file 2 "/mnt/disk/jenkins/ci/workspace/chipset_patch_970_docker/opensource/component_code/vendor/huawei/extra/build/build_script/kirin_kernel_release/kernel/include/linux/ktime.h"
block/hisi-blk-busy-idle-notify.S:	bl	ktime_get
block/hisi-blk-busy-idle-notify.S:	bl	ktime_get
block/hisi-blk-busy-idle-notify.S:	bl	ktime_get
block/hisi-blk-busy-idle-notify.S:	bl	ktime_get
block/hisi-blk-busy-idle-notify.S:	bl	ktime_get
block/hisi-blk-busy-idle-notify.S:	bl	ktime_get
block/hisi-blk-busy-idle-notify.S:	.string	"ktime_compare"
block/hisi-blk-busy-idle-notify.S:	.string	"total_busy_ktime"
block/hisi-blk-busy-idle-notify.S:	.string	"ktime_to_ms"
block/hisi-blk-busy-idle-notify.S:	.string	"ktime_get"
block/hisi-blk-busy-idle-notify.S:	.string	"bio_stage_ktime"
block/hisi-blk-busy-idle-notify.S:	.string	"total_idle_ktime"
block/hisi-blk-busy-idle-notify.S:	.string	"ktime_add_ms"
block/hisi-blk-busy-idle-notify.S:	.string	"notify_start_ktime"
block/hisi-blk-busy-idle-notify.S:	.string	"ktime_equal"
block/hisi-blk-busy-idle-notify.S:	.string	"ktime_after"
block/hisi-blk-busy-idle-notify.S:	.string	"hisi_ktime_to_common_time"
block/hisi-blk-busy-idle-notify.S:	.string	"last_busy_ktime"
block/hisi-blk-busy-idle-notify.S:	.string	"req_stage_ktime"
block/hisi-blk-busy-idle-notify.S:	.string	"ktime_set"
block/hisi-blk-busy-idle-notify.S:	.string	"ktime_divns"
block/hisi-blk-busy-idle-notify.S:	.string	"ktime_t"
block/hisi-blk-busy-idle-notify.S:	.string	"ktime"
block/hisi-blk-busy-idle-notify.S:	.string	"last_idle_ktime"
block/hisi-bkops-core.S:	bl	ktime_get_with_offset
block/hisi-bkops-core.S:	bl	ktime_get
block/hisi-bkops-core.S:	bl	ktime_get
block/hisi-bkops-core.S:	bl	ktime_get
block/hisi-bkops-core.S:	bl	ktime_get
block/hisi-bkops-core.S:	bl	ktime_get
block/hisi-bkops-core.S:	.file 35 "/mnt/disk/jenkins/ci/workspace/chipset_patch_970_docker/opensource/component_code/vendor/huawei/extra/build/build_script/kirin_kernel_release/kernel/include/linux/ktime.h"
block/hisi-bkops-core.S:	.string	"total_busy_ktime"
block/hisi-bkops-core.S:	.string	"ktime_get"
block/hisi-bkops-core.S:	.string	"bio_stage_ktime"
block/hisi-bkops-core.S:	.string	"total_idle_ktime"
block/hisi-bkops-core.S:	.string	"ktime_get_boottime"
block/hisi-bkops-core.S:	.string	"ktime_get_ns"
block/hisi-bkops-core.S:	.string	"ktime_get_with_offset"
block/hisi-bkops-core.S:	.string	"last_busy_ktime"
block/hisi-bkops-core.S:	.string	"req_stage_ktime"
block/hisi-bkops-core.S:	.string	"ktime_t"
block/hisi-bkops-core.S:	.string	"ktime"
block/hisi-bkops-core.S:	.string	"last_idle_ktime"
block/hisi_freq_ctl.S:	.file 37 "/mnt/disk/jenkins/ci/workspace/chipset_patch_970_docker/opensource/component_code/vendor/huawei/extra/build/build_script/kirin_kernel_release/kernel/include/linux/ktime.h"
block/hisi_freq_ctl.S:	.string	"ktime_t"
block/hisi_freq_ctl.S:	.string	"ktime"
block/cfq-iosched.c:#include <linux/ktime.h>
block/cfq-iosched.c: * below this threshold, we consider thinktime immediate
block/cfq-iosched.c:	u64 min_vdisktime;
block/cfq-iosched.c:			.ttime = {.last_end_request = ktime_get_ns(),},}
block/cfq-iosched.c:	u64 vdisktime;
block/cfq-iosched.c:	 * vfraction is the fraction of vdisktime that the tasks in this
block/cfq-iosched.c:static inline bool cfq_io_thinktime_big(struct cfq_data *cfqd,
block/cfq-iosched.c:static inline u64 max_vdisktime(u64 min_vdisktime, u64 vdisktime)
block/cfq-iosched.c:	s64 delta = (s64)(vdisktime - min_vdisktime);
block/cfq-iosched.c:		min_vdisktime = vdisktime;
block/cfq-iosched.c:	return min_vdisktime;
block/cfq-iosched.c:static inline u64 min_vdisktime(u64 min_vdisktime, u64 vdisktime)
block/cfq-iosched.c:	s64 delta = (s64)(vdisktime - min_vdisktime);
block/cfq-iosched.c:		min_vdisktime = vdisktime;
block/cfq-iosched.c:	return min_vdisktime;
block/cfq-iosched.c:static void update_min_vdisktime(struct cfq_rb_root *st)
block/cfq-iosched.c:		st->min_vdisktime = max_vdisktime(st->min_vdisktime,
block/cfq-iosched.c:						  cfqg->vdisktime);
block/cfq-iosched.c:	u64 now = ktime_get_ns();
block/cfq-iosched.c:	if (ktime_get_ns() < cfqq->slice_end)
block/cfq-iosched.c:	return cfqg->vdisktime - st->min_vdisktime;
block/cfq-iosched.c:static inline u64 cfq_get_cfqg_vdisktime_delay(struct cfq_data *cfqd)
block/cfq-iosched.c:		cfqg->vdisktime = __cfqg->vdisktime +
block/cfq-iosched.c:			cfq_get_cfqg_vdisktime_delay(cfqd);
block/cfq-iosched.c:		cfqg->vdisktime = st->min_vdisktime;
block/cfq-iosched.c:	u64 now = ktime_get_ns();
block/cfq-iosched.c:	u64 now = ktime_get_ns();
block/cfq-iosched.c:	 * Can't update vdisktime while on service tree and cfqg->vfraction
block/cfq-iosched.c:	 * update vdisktime and go back on.  The re-addition to the tree
block/cfq-iosched.c:	cfqg->vdisktime += cfqg_scale_charge(charge, vfr);
block/cfq-iosched.c:	cfq_log_cfqg(cfqd, cfqg, "served: vt=%llu min_vt=%llu", cfqg->vdisktime,
block/cfq-iosched.c:					st->min_vdisktime);
block/cfq-iosched.c:	cfqg->ttime.last_end_request = ktime_get_ns();
block/cfq-iosched.c:	u64 now = ktime_get_ns();
block/cfq-iosched.c:		cfqq->dispatch_start = ktime_get_ns();
block/cfq-iosched.c:			cfqq->slice_resid = cfqq->slice_end - ktime_get_ns();
block/cfq-iosched.c:	   !cfq_io_thinktime_big(cfqd, &st->ttime, false))
block/cfq-iosched.c:	u64 now = ktime_get_ns();
block/cfq-iosched.c:	 * it has too big thinktime, don't do group idle.
block/cfq-iosched.c:	     cfq_io_thinktime_big(cfqd, &st->ttime, true)))
block/cfq-iosched.c:	hrtimer_start(&cfqd->idle_slice_timer, ns_to_ktime(sl),
block/cfq-iosched.c:	if (ktime_get_ns() < rq->fifo_time)
block/cfq-iosched.c:	u64 now = ktime_get_ns();
block/cfq-iosched.c:	update_min_vdisktime(st);
block/cfq-iosched.c:	u64 now = ktime_get_ns();
block/cfq-iosched.c:	u64 now = ktime_get_ns();
block/cfq-iosched.c:	    !cfq_io_thinktime_big(cfqd, &cfqq->cfqg->ttime, true)) {
block/cfq-iosched.c:	u64 now = ktime_get_ns();
block/cfq-iosched.c:		u64 last_sync = ktime_get_ns() - cfqd->last_delayed_sync;
block/cfq-iosched.c:		cfqq->slice_end = ktime_get_ns() + 1;
block/cfq-iosched.c:	cic->ttime.last_end_request = ktime_get_ns();
block/cfq-iosched.c:__cfq_update_io_thinktime(struct cfq_ttime *ttime, u64 slice_idle)
block/cfq-iosched.c:	u64 elapsed = ktime_get_ns() - ttime->last_end_request;
block/cfq-iosched.c:cfq_update_io_thinktime(struct cfq_data *cfqd, struct cfq_queue *cfqq,
block/cfq-iosched.c:		__cfq_update_io_thinktime(&cic->ttime, cfqd->cfq_slice_idle);
block/cfq-iosched.c:		__cfq_update_io_thinktime(&cfqq->service_tree->ttime,
block/cfq-iosched.c:	__cfq_update_io_thinktime(&cfqq->cfqg->ttime, cfqd->cfq_group_idle);
block/cfq-iosched.c:cfq_update_io_seektime(struct cfq_data *cfqd, struct cfq_queue *cfqq,
block/cfq-iosched.c:	cfq_update_io_thinktime(cfqd, cfqq, cic);
block/cfq-iosched.c:	cfq_update_io_seektime(cfqd, cfqq, rq);
block/cfq-iosched.c:		 * idle and has expired it's mean thinktime or this new queue
block/cfq-iosched.c:	rq->fifo_time = ktime_get_ns() + cfqd->cfq_fifo_expire[rq_is_sync(rq)];
block/cfq-iosched.c:	u64 now = ktime_get_ns();
block/cfq-iosched.c:	if (cfq_io_thinktime_big(cfqd, &cfqq->cfqg->ttime, true))
block/cfq-iosched.c:	u64 now = ktime_get_ns();
block/cfq-iosched.c:	cfqd->last_delayed_sync = ktime_get_ns() - NSEC_PER_SEC;
block/hisi-blk-core.S:	.file 31 "/mnt/disk/jenkins/ci/workspace/chipset_patch_970_docker/opensource/component_code/vendor/huawei/extra/build/build_script/kirin_kernel_release/kernel/include/linux/ktime.h"
block/hisi-blk-core.S:	.string	"total_busy_ktime"
block/hisi-blk-core.S:	.string	"bio_stage_ktime"
block/hisi-blk-core.S:	.string	"total_idle_ktime"
block/hisi-blk-core.S:	.string	"last_busy_ktime"
block/hisi-blk-core.S:	.string	"req_stage_ktime"
block/hisi-blk-core.S:	.string	"ktime_t"
block/hisi-blk-core.S:	.string	"ktime"
block/hisi-blk-core.S:	.string	"last_idle_ktime"
block/hisi-bkops-sysfs.S:	.file 23 "/mnt/disk/jenkins/ci/workspace/chipset_patch_970_docker/opensource/component_code/vendor/huawei/extra/build/build_script/kirin_kernel_release/kernel/include/linux/ktime.h"
block/hisi-bkops-sysfs.S:	.string	"total_busy_ktime"
block/hisi-bkops-sysfs.S:	.string	"bio_stage_ktime"
block/hisi-bkops-sysfs.S:	.string	"ktime_t"
block/hisi-bkops-sysfs.S:	.string	"last_idle_ktime"
block/hisi-bkops-sysfs.S:	.string	"req_stage_ktime"
block/hisi-bkops-sysfs.S:	.string	"last_busy_ktime"
block/hisi-bkops-sysfs.S:	.string	"ktime"
block/hisi-bkops-sysfs.S:	.string	"total_idle_ktime"
block/hisi-blk-dump.S:	bl	ktime_get
block/hisi-blk-dump.S:	bl	ktime_get
block/hisi-blk-dump.S:	.file 30 "/mnt/disk/jenkins/ci/workspace/chipset_patch_970_docker/opensource/component_code/vendor/huawei/extra/build/build_script/kirin_kernel_release/kernel/include/linux/ktime.h"
block/hisi-blk-dump.S:	.string	"total_busy_ktime"
block/hisi-blk-dump.S:	.string	"bio_stage_ktime"
block/hisi-blk-dump.S:	.string	"ktime_get"
block/hisi-blk-dump.S:	.string	"ktime_t"
block/hisi-blk-dump.S:	.string	"last_idle_ktime"
block/hisi-blk-dump.S:	.string	"req_stage_ktime"
block/hisi-blk-dump.S:	.string	"last_busy_ktime"
block/hisi-blk-dump.S:	.string	"ktime"
block/hisi-blk-dump.S:	.string	"total_idle_ktime"
drivers/atm/eni.h:	ktime_t timestamp;		/* for RX timing */
drivers/atm/eni.c:		ENI_VCC(vcc)->timestamp = ktime_get_real();
drivers/cpuidle/governors/menu.c:#include <linux/ktime.h>
drivers/cpuidle/governors/menu.c:	data->next_timer_us = ktime_to_us(tick_nohz_get_sleep_length());
drivers/cpuidle/governors/menu.c:			hrtimer_start(hrtmr, ns_to_ktime(1000 * (unsigned long)timer_us),
drivers/cpuidle/governors/menu.c:			hrtimer_start(hrtmr, ns_to_ktime(1000 * (unsigned long)timer_us),
drivers/cpuidle/cpuidle.c:#include <linux/ktime.h>
drivers/cpuidle/cpuidle.c:	ktime_t time_start, time_end;
drivers/cpuidle/cpuidle.c:	time_start = ns_to_ktime(local_clock());
drivers/cpuidle/cpuidle.c:	time_end = ns_to_ktime(local_clock());
drivers/cpuidle/cpuidle.c:	diff = ktime_us_delta(time_end, time_start);
drivers/mmc/host/cmdq_hci.c:	pr_err(DRV_NAME ": current time:0x%lld\n", ktime_to_ns(ktime_get()));
drivers/mmc/host/cmdq_hci.c:			ktime_to_ns(cmdq_task_info[tag].issue_time),
drivers/mmc/host/cmdq_hci.c:			ktime_to_ns(cmdq_task_info[tag].start_dbr_time),
drivers/mmc/host/cmdq_hci.c:			ktime_to_ns(cmdq_task_info[tag].end_dbr_time));
drivers/mmc/host/cmdq_hci.c:		mmc->cmdq_task_info[tag].start_dbr_time = ktime_get();
drivers/mmc/host/cmdq_hci.c:			mmc->cmdq_task_info[tag].start_dbr_time = ktime_get();
drivers/mmc/host/cmdq_hci.c:			mmc->cmdq_task_info[tag].start_dbr_time = ktime_get();
drivers/mmc/host/cmdq_hci.c:					mmc->cmdq_task_info[tag].start_dbr_time = ktime_get();
drivers/mmc/host/cmdq_hci.c:			mmc->cmdq_task_info[tag].end_dbr_time = ktime_get();
drivers/mmc/card/hisi_cmdq_card.c:		ktime_to_ns(cmdq_task_info[req->tag].issue_time),
drivers/mmc/card/hisi_cmdq_card.c:		ktime_to_ns(cmdq_task_info[req->tag].start_dbr_time),
drivers/mmc/card/hisi_cmdq_card.c:		ktime_to_ns(cmdq_task_info[req->tag].end_dbr_time));
drivers/mmc/card/hisi_cmdq_card.c:		card->host->cmdq_task_info[req->tag].issue_time = ktime_get();
drivers/mmc/core/core.c:				ktime_t completion;
drivers/mmc/core/core.c:				completion = ktime_get();
drivers/mmc/core/core.c:				delta_us = ktime_us_delta(completion,
drivers/mmc/core/core.c:			areq->mrq->io_start = ktime_get();
drivers/pci/xen-pcifront.c:#include <linux/ktime.h>
drivers/pci/xen-pcifront.c:	ns_timeout = ktime_get_ns() + 2 * (s64)NSEC_PER_SEC;
drivers/pci/xen-pcifront.c:		ns = ktime_get_ns();
drivers/pci/quirks.c:#include <linux/ktime.h>
drivers/pci/quirks.c:static ktime_t fixup_debug_start(struct pci_dev *dev,
drivers/pci/quirks.c:	ktime_t calltime = ktime_set(0, 0);
drivers/pci/quirks.c:		calltime = ktime_get();
drivers/pci/quirks.c:static void fixup_debug_report(struct pci_dev *dev, ktime_t calltime,
drivers/pci/quirks.c:	ktime_t delta, rettime;
drivers/pci/quirks.c:		rettime = ktime_get();
drivers/pci/quirks.c:		delta = ktime_sub(rettime, calltime);
drivers/pci/quirks.c:		duration = (unsigned long long) ktime_to_ns(delta) >> 10;
drivers/pci/quirks.c:	ktime_t calltime;
drivers/dubai/dubai_stats.c:	exit_time = ktime_get_ns();
drivers/dubai/dubai_stats.c:	current_time = ktime_get_ns() / NSEC_PER_MSEC;
drivers/oprofile/timer_int.c:	hrtimer_forward_now(hrtimer, ns_to_ktime(TICK_NSEC));
drivers/oprofile/timer_int.c:	hrtimer_start(hrtimer, ns_to_ktime(TICK_NSEC),
drivers/watchdog/xen_wdt.c:#include <linux/ktime.h>
drivers/watchdog/xen_wdt.c:	return ktime_to_timespec(ktime_get()).tv_sec + timeout;
drivers/watchdog/xen_wdt.c:		retval = wdt_expires - ktime_to_timespec(ktime_get()).tv_sec;
drivers/mailbox/mailbox.c:		hrtimer_start(&chan->mbox->poll_hrt, ktime_set(0, 0),
drivers/mailbox/mailbox.c:		hrtimer_forward_now(hrtimer, ms_to_ktime(mbox->txpoll_period));
drivers/usb/host/ehci.h:	ktime_t			hr_timeouts[EHCI_HRTIMER_NUM_EVENTS];
drivers/usb/host/ehci.h:	ktime_t			last_periodic_enable;
drivers/usb/host/ehci-hcd.c:	ehci->last_periodic_enable = ktime_get_real();
drivers/usb/host/fotg210.h:	ktime_t			hr_timeouts[FOTG210_HRTIMER_NUM_EVENTS];
drivers/usb/host/fotg210.h:	ktime_t			last_periodic_enable;
drivers/usb/host/fotg210-hcd.c:	ktime_t *timeout = &fotg210->hr_timeouts[event];
drivers/usb/host/fotg210-hcd.c:		*timeout = ktime_add(ktime_get(),
drivers/usb/host/fotg210-hcd.c:				ktime_set(0, event_delays_ns[event]));
drivers/usb/host/fotg210-hcd.c:	ktime_t now;
drivers/usb/host/fotg210-hcd.c:	now = ktime_get();
drivers/usb/host/fotg210-hcd.c:	fotg210->last_periodic_enable = ktime_get_real();
drivers/usb/host/ehci-timer.c:	ktime_t		*timeout = &ehci->hr_timeouts[event];
drivers/usb/host/ehci-timer.c:		*timeout = ktime_add(ktime_get(),
drivers/usb/host/ehci-timer.c:				ktime_set(0, event_delays_ns[event]));
drivers/usb/host/ehci-timer.c:	ktime_t		now;
drivers/usb/host/ehci-timer.c:	now = ktime_get();
drivers/usb/dwc3/hisi_usb3_31phy.c:void usb31phy_cr_dbg_setacktime(int n)
drivers/usb/dwc2/core.c:	ktime_t start;
drivers/usb/dwc2/core.c:	ktime_t end;
drivers/usb/dwc2/core.c:	start = ktime_get();
drivers/usb/dwc2/core.c:		end = ktime_get();
drivers/usb/dwc2/core.c:		ms = ktime_to_ms(ktime_sub(end, start));
drivers/usb/chipidea/otg_fsm.c:	ci->hr_timeouts[t] = ktime_add(ktime_get(),
drivers/usb/chipidea/otg_fsm.c:				ktime_set(timer_sec, timer_nsec));
drivers/usb/chipidea/otg_fsm.c:	ktime_t	now, *timeout;
drivers/usb/chipidea/otg_fsm.c:	now = ktime_get();
drivers/usb/chipidea/ci.h:	ktime_t				hr_timeouts[NUM_OTG_FSM_TIMERS];
drivers/usb/musb/musb_cppi41.c:				ktime_set(0, 20 * NSEC_PER_USEC));
drivers/usb/musb/musb_cppi41.c:				ktime_set(0, usecs * NSEC_PER_USEC),
drivers/usb/gadget/udc/dummy_hcd.c:	ktime_get_ts64(&ts64);
drivers/usb/gadget/function/uvc_queue.c:	buf->buf.vb2_buf.timestamp = ktime_get_ns();
drivers/usb/gadget/function/f_ncm.c:			      ktime_set(0, TX_TIMEOUT_NSECS),
drivers/usb/gadget/function/f_audio_source.c:	ktime_t				start_time;
drivers/usb/gadget/function/f_audio_source.c:	ktime_t now;
drivers/usb/gadget/function/f_audio_source.c:	now = ktime_get();
drivers/usb/gadget/function/f_audio_source.c:	msecs = div_s64((ktime_to_ns(now) - ktime_to_ns(audio->start_time)),
drivers/usb/gadget/function/f_audio_source.c:	audio->start_time = ktime_get();
drivers/usb/mon/mon_text.c:#include <linux/ktime.h>
drivers/usb/mon/mon_text.c:	ktime_get_ts64(&now);
drivers/usb/misc/usbtest.c:	ktime_get_ts64(&start);
drivers/usb/misc/usbtest.c:	ktime_get_ts64(&end);
drivers/net/usb/cdc_ncm.c:				ktime_set(0, ctx->timer_interval),
drivers/net/ieee802154/at86rf230.c:	ktime_t tim;
drivers/net/ieee802154/at86rf230.c:			tim = ktime_set(0, c->t_off_to_aack * NSEC_PER_USEC);
drivers/net/ieee802154/at86rf230.c:			tim = ktime_set(0, c->t_off_to_tx_on * NSEC_PER_USEC);
drivers/net/ieee802154/at86rf230.c:				tim = ktime_set(0, (c->t_frame + c->t_p_ack) *
drivers/net/ieee802154/at86rf230.c:			tim = ktime_set(0, c->t_reset_to_off * NSEC_PER_USEC);
drivers/net/phy/dp83640.c:			shhwtstamps->hwtstamp = ns_to_ktime(rxts->ns);
drivers/net/phy/dp83640.c:	shhwtstamps.hwtstamp = ns_to_ktime(ns);
drivers/net/phy/dp83640.c:			shhwtstamps->hwtstamp = ns_to_ktime(rxts->ns);
drivers/net/hamradio/baycom_ser_fdx.c:	ktime_get_ts64(&ts);
drivers/net/irda/nsc-ircc.c:			diff = ktime_us_delta(ktime_get(), self->stamp);
drivers/net/irda/nsc-ircc.c:			self->stamp = ktime_get();
drivers/net/irda/vlsi_ir.c:#include <linux/ktime.h>
drivers/net/irda/vlsi_ir.c:	sec = div_s64_rem(ktime_us_delta(ktime_get(), idev->last_rx),
drivers/net/irda/vlsi_ir.c:	idev->last_rx = ktime_get(); /* remember "now" for later mtt delay */
drivers/net/irda/vlsi_ir.c:		diff = ktime_us_delta(ktime_get(), idev->last_rx);
drivers/net/irda/vlsi_ir.c:	idev->last_rx = ktime_get();	/* first mtt may start from now on */
drivers/net/irda/vlsi_ir.c:	idev->last_rx = ktime_get();  /* first mtt may start from now on */
drivers/net/irda/ali-ircc.c:			diff = ktime_us_delta(ktime_get(), self->stamp);
drivers/net/irda/ali-ircc.c:			self->stamp = ktime_get();
drivers/net/irda/nsc-ircc.h:#include <linux/ktime.h>
drivers/net/irda/nsc-ircc.h:	ktime_t stamp;
drivers/net/irda/irda-usb.h:#include <linux/ktime.h>
drivers/net/irda/irda-usb.h:	ktime_t stamp;
drivers/net/irda/ali-ircc.h:#include <linux/ktime.h>
drivers/net/irda/ali-ircc.h:	ktime_t stamp;
drivers/net/irda/stir4200.c:#include <linux/ktime.h>
drivers/net/irda/stir4200.c:	ktime_t		rx_time;
drivers/net/irda/stir4200.c:	us -= ktime_us_delta(ktime_get(), stir->rx_time);
drivers/net/irda/stir4200.c:		stir->rx_time = ktime_get();
drivers/net/irda/stir4200.c:	stir->rx_time = ktime_get();
drivers/net/irda/vlsi_ir.h:	ktime_t			last_rx;
drivers/net/irda/irda-usb.c:			diff = ktime_us_delta(ktime_get(), self->stamp);
drivers/net/irda/irda-usb.c:	self->stamp = ktime_get();
drivers/net/wireless/realtek/rtl818x/rtl8180/dev.c:		/* when preamble changes, acktime duration changes, and erp must
drivers/net/wireless/realtek/rtlwifi/rtl8192se/fw.c:	u32 ichecktime = 200;
drivers/net/wireless/realtek/rtlwifi/rtl8192se/fw.c:	} while (ichecktime--);
drivers/net/wireless/mac80211_hwsim.c:#include <linux/ktime.h>
drivers/net/wireless/mac80211_hwsim.c:	return ktime_to_us(ktime_get_real());
drivers/net/wireless/mac80211_hwsim.c:	ktime_t next_bcn;
drivers/net/wireless/mac80211_hwsim.c:	next_bcn = ktime_add(hrtimer_get_expires(timer),
drivers/net/wireless/mac80211_hwsim.c:			     ns_to_ktime(bcn_int * 1000));
drivers/net/wireless/mac80211_hwsim.c:				      ns_to_ktime(until_tbtt * 1000),
drivers/net/wireless/mac80211_hwsim.c:					      ns_to_ktime(until_tbtt * 1000),
drivers/net/wireless/intel/iwlwifi/mvm/utils.c:	*boottime = ktime_get_boot_ns();
drivers/net/wireless/intel/iwlwifi/mvm/rx.c:		rx_status->boottime_ns = ktime_get_boot_ns();
drivers/net/wireless/intel/iwlwifi/mvm/rxmq.c:			rx_status->boottime_ns = ktime_get_boot_ns();
drivers/net/wireless/intersil/prism54/isl_38xx.c:#include <linux/ktime.h>
drivers/net/wireless/intersil/prism54/isl_38xx.c:		ktime_get_real_ts64(&current_ts64);
drivers/net/wireless/intersil/prism54/isl_38xx.c:			ktime_get_real_ts64(&current_ts64);
drivers/net/wireless/intersil/prism54/isl_38xx.c:			ktime_get_real_ts64(&current_ts64);
drivers/net/wireless/intersil/prism54/isl_38xx.c:		ktime_get_real_ts64(&current_ts64);
drivers/net/wireless/ath/ath9k/dynack.c:	/* init acktimeout */
drivers/net/wireless/ath/ath9k/hw.c:	int acktimeout, ctstimeout, ack_offset = 0;
drivers/net/wireless/ath/ath9k/hw.c:	acktimeout = slottime + sifstime + ack_offset;
drivers/net/wireless/ath/ath9k/hw.c:	ctstimeout = acktimeout;
drivers/net/wireless/ath/ath9k/hw.c:		acktimeout += 64 - sifstime - ah->slottime;
drivers/net/wireless/ath/ath9k/hw.c:		acktimeout = ah->dynack.ackto;
drivers/net/wireless/ath/ath9k/hw.c:		ctstimeout = acktimeout;
drivers/net/wireless/ath/ath9k/hw.c:		slottime = (acktimeout - 3) / 2;
drivers/net/wireless/ath/ath9k/hw.c:		ah->dynack.ackto = acktimeout;
drivers/net/wireless/ath/ath9k/hw.c:	ath9k_hw_set_ack_timeout(ah, acktimeout);
drivers/net/wireless/marvell/mwifiex/wmm.c:	ns = ktime_get_ns();
drivers/net/wireless/marvell/mwifiex/wmm.c:	u32 queue_delay = ktime_to_ms(net_timedelta(skb->tstamp));
drivers/net/wireless/ralink/rt2x00/rt2400pci.h: * ACK_TIMEOUT: Ack timeout, default = sifs + 2*slottime + acktime @ 1mbps.
drivers/net/wireless/ralink/rt2x00/rt2400pci.h: * ACK_CONSUME_TIME: Ack consume time, default = sifs + acktime @ 1mbps.
drivers/net/wireless/ralink/rt2x00/rt2800usb.c:			      ktime_set(0, TXSTATUS_READ_INTERVAL),
drivers/net/wireless/ralink/rt2x00/rt2800usb.c:		      ktime_set(0, 2*TXSTATUS_READ_INTERVAL),
drivers/net/wireless/ralink/rt2x00/rt2500pci.h: * ACK_TIMEOUT: Ack timeout, default = sifs + 2*slottime + acktime @ 1mbps.
drivers/net/wireless/ralink/rt2x00/rt2500pci.h: * ACK_CONSUME_TIME: Ack consume time, default = sifs + acktime @ 1mbps.
drivers/net/ethernet/broadcom/bnx2x/bnx2x_main.c:	SHMEM2_WR(bp, drv_info.epoc, (u32)ktime_get_real_seconds());
drivers/net/ethernet/broadcom/bnx2x/bnx2x_main.c:		ktime_t now = ktime_get_boottime();
drivers/net/ethernet/broadcom/bnx2x/bnx2x_main.c:		ktime_t fw_ready_time = ktime_set(5, 0);
drivers/net/ethernet/broadcom/bnx2x/bnx2x_main.c:		if (ktime_before(now, fw_ready_time))
drivers/net/ethernet/broadcom/bnx2x/bnx2x_main.c:			msleep(ktime_ms_delta(fw_ready_time, now));
drivers/net/ethernet/broadcom/bnx2x/bnx2x_main.c:		shhwtstamps.hwtstamp = ns_to_ktime(ns);
drivers/net/ethernet/broadcom/bnx2x/bnx2x_main.c:	skb_hwtstamps(skb)->hwtstamp = ns_to_ktime(ns);
drivers/net/ethernet/broadcom/bnx2x/bnx2x_main.c:				 ktime_to_ns(ktime_get_real()));
drivers/net/ethernet/broadcom/tg3.c:	timestamp->hwtstamp  = ns_to_ktime((hwclock & TG3_TSTAMP_MASK) +
drivers/net/ethernet/broadcom/tg3.c:	tg3_refclk_write(tp, ktime_to_ns(ktime_get_real()));
drivers/net/ethernet/broadcom/tg3.c:	tg3_refclk_write(tp, ktime_to_ns(ktime_get_real()) + tp->ptp_adjust);
drivers/net/ethernet/cisco/enic/enic_main.c:#include <linux/ktime.h>
drivers/net/ethernet/cisco/enic/enic_main.c:	ktime_t now = ktime_get();
drivers/net/ethernet/cisco/enic/enic_main.c:	delta = ktime_us_delta(now, cq->prev_ts);
drivers/net/ethernet/cisco/enic/vnic_cq.h:	ktime_t prev_ts;
drivers/net/ethernet/adi/bfin_mac.c:			shhwtstamps.hwtstamp = ns_to_ktime(ns);
drivers/net/ethernet/adi/bfin_mac.c:	shhwtstamps->hwtstamp = ns_to_ktime(ns);
drivers/net/ethernet/sfc/ptp.c:#include <linux/ktime.h>
drivers/net/ethernet/sfc/ptp.c:	ktime_t hwtimestamp;
drivers/net/ethernet/sfc/ptp.c:	ktime_t (*nic_to_kernel_time)(u32 nic_major, u32 nic_minor,
drivers/net/ethernet/sfc/ptp.c:static ktime_t efx_ptp_s_ns_to_ktime_correction(u32 nic_major, u32 nic_minor,
drivers/net/ethernet/sfc/ptp.c:	ktime_t kt = ktime_set(nic_major, nic_minor);
drivers/net/ethernet/sfc/ptp.c:		kt = ktime_add_ns(kt, (u64)correction);
drivers/net/ethernet/sfc/ptp.c:		kt = ktime_sub_ns(kt, (u64)-correction);
drivers/net/ethernet/sfc/ptp.c:static inline ktime_t efx_ptp_s27_to_ktime(u32 nic_major, u32 nic_minor)
drivers/net/ethernet/sfc/ptp.c:	return ktime_set(nic_major, ns);
drivers/net/ethernet/sfc/ptp.c:static ktime_t efx_ptp_s27_to_ktime_correction(u32 nic_major, u32 nic_minor,
drivers/net/ethernet/sfc/ptp.c:	return efx_ptp_s27_to_ktime(nic_major, nic_minor);
drivers/net/ethernet/sfc/ptp.c:		ptp->nic_to_kernel_time = efx_ptp_s27_to_ktime_correction;
drivers/net/ethernet/sfc/ptp.c:		ptp->nic_to_kernel_time = efx_ptp_s_ns_to_ktime_correction;
drivers/net/ethernet/sfc/ptp.c:	ktime_t mc_time;
drivers/net/ethernet/sfc/ptp.c:		wait = ktime_to_timespec64(
drivers/net/ethernet/sfc/ptp.c:	delta.tv_nsec += ktime_to_timespec64(mc_time).tv_nsec;
drivers/net/ethernet/sfc/ptp.c:		efx_ptp_s27_to_ktime(pkt_timestamp_major, pkt_timestamp_minor);
drivers/net/ethernet/sfc/ptp.c:	ktime_t kt;
drivers/net/ethernet/sfc/ptp.c:	*ts = ktime_to_timespec64(kt);
drivers/net/ethernet/tile/tilegx.c:#include <linux/ktime.h>
drivers/net/ethernet/tile/tilegx.c:		shhwtstamps->hwtstamp = ktime_set(idesc->time_stamp_sec,
drivers/net/ethernet/tile/tilegx.c:		shhwtstamps.hwtstamp = ktime_set(ts.tv_sec, ts.tv_nsec);
drivers/net/ethernet/tile/tilegx.c:		      ktime_set(0, TX_TIMER_DELAY_USEC * 1000UL),
drivers/net/ethernet/tile/tilegx.c:			      ktime_set(0, EGRESS_TIMER_DELAY_USEC * 1000UL),
drivers/net/ethernet/tile/tilegx.c:	ktime_get_ts64(&ts);
drivers/net/ethernet/renesas/ravb_ptp.c:		u64 now = ktime_to_ns(timespec64_to_ktime(ts));
drivers/net/ethernet/renesas/ravb_main.c:		shhwtstamps.hwtstamp = timespec64_to_ktime(ts);
drivers/net/ethernet/renesas/ravb_main.c:				shhwtstamps->hwtstamp = timespec64_to_ktime(ts);
drivers/net/ethernet/oki-semi/pch_gbe/pch_gbe_main.c:	shhwtstamps->hwtstamp = ns_to_ktime(ns);
drivers/net/ethernet/oki-semi/pch_gbe/pch_gbe_main.c:	shhwtstamps.hwtstamp = ns_to_ktime(ns);
drivers/net/ethernet/intel/i40e/i40e_ptp.c: * bit nanosecond value, we can call ns_to_ktime directly to handle this.
drivers/net/ethernet/intel/i40e/i40e_ptp.c:	hwtstamps->hwtstamp = ns_to_ktime(timestamp);
drivers/net/ethernet/intel/i40e/i40e_ptp.c:		ts = ktime_to_timespec64(ktime_get_real());
drivers/net/ethernet/intel/e1000e/netdev.c:	hwtstamps->hwtstamp = ns_to_ktime(ns);
drivers/net/ethernet/intel/e1000e/netdev.c:			 ktime_to_ns(ktime_get_real()));
drivers/net/ethernet/intel/e1000e/ptp.c:#include <linux/ktime.h>
drivers/net/ethernet/intel/e1000e/ptp.c:static int e1000e_phc_get_syncdevicetime(ktime_t *device,
drivers/net/ethernet/intel/e1000e/ptp.c:	*device = ns_to_ktime(timecounter_cyc2time(&adapter->tc, dev_cycles));
drivers/net/ethernet/intel/ixgbe/ixgbe_ptp.c:	hwtstamp->hwtstamp = ns_to_ktime(ns);
drivers/net/ethernet/intel/ixgbe/ixgbe_ptp.c:			 ktime_to_ns(ktime_get_real()));
drivers/net/ethernet/intel/igb/igb_ptp.c:		hwtstamps->hwtstamp = ns_to_ktime(ns);
drivers/net/ethernet/intel/igb/igb_ptp.c:		hwtstamps->hwtstamp = ktime_set(systim >> 32,
drivers/net/ethernet/intel/igb/igb_ptp.c:		ktime_add_ns(shhwtstamps.hwtstamp, adjust);
drivers/net/ethernet/intel/igb/igb_ptp.c:		ktime_sub_ns(skb_hwtstamps(skb)->hwtstamp, adjust);
drivers/net/ethernet/intel/igb/igb_ptp.c:		ktime_sub_ns(skb_hwtstamps(skb)->hwtstamp, adjust);
drivers/net/ethernet/intel/igb/igb_ptp.c:		struct timespec64 ts = ktime_to_timespec64(ktime_get_real());
drivers/net/ethernet/intel/igb/igb_ptp.c:				 ktime_to_ns(ktime_get_real()));
drivers/net/ethernet/nvidia/forcedeth.c:	int need_linktimer;
drivers/net/ethernet/nvidia/forcedeth.c:	if (unlikely(np->need_linktimer && time_after(jiffies, np->link_timeout))) {
drivers/net/ethernet/nvidia/forcedeth.c:		if (np->need_linktimer && time_after(jiffies, np->link_timeout)) {
drivers/net/ethernet/nvidia/forcedeth.c:		np->need_linktimer = 1;
drivers/net/ethernet/nvidia/forcedeth.c:		np->need_linktimer = 0;
drivers/net/ethernet/nvidia/forcedeth.c:		 np->need_linktimer ? "lnktim " : "",
drivers/net/ethernet/neterion/vxge/vxge-main.c:			skb_hwts->hwtstamp = ns_to_ktime(ns);
drivers/net/ethernet/stmicro/stmmac/stmmac_main.c:		shhwtstamp.hwtstamp = ns_to_ktime(ns);
drivers/net/ethernet/stmicro/stmmac/stmmac_main.c:		shhwtstamp->hwtstamp = ns_to_ktime(ns);
drivers/net/ethernet/stmicro/stmmac/stmmac_main.c:		ktime_get_real_ts64(&now);
drivers/net/ethernet/ec_bhf.c:	hrtimer_forward_now(timer, ktime_set(0, polling_frequency));
drivers/net/ethernet/ec_bhf.c:	hrtimer_start(&priv->hrtimer, ktime_set(0, polling_frequency),
drivers/net/ethernet/ti/cpts.c:	ssh->hwtstamp = ns_to_ktime(ns);
drivers/net/ethernet/ti/cpts.c:	ssh.hwtstamp = ns_to_ktime(ns);
drivers/net/ethernet/ti/cpts.c:	timecounter_init(&cpts->tc, &cpts->cc, ktime_to_ns(ktime_get_real()));
drivers/net/ethernet/mellanox/mlx5/core/en.h:	ktime_t	time;
drivers/net/ethernet/mellanox/mlx5/core/cmd.c:	ent->ts1 = ktime_get_ns();
drivers/net/ethernet/mellanox/mlx5/core/cmd.c:			ent->ts2 = ktime_get_ns();
drivers/net/ethernet/mellanox/mlx5/core/en_rx_am.c:	s->time	     = ktime_get();
drivers/net/ethernet/mellanox/mlx5/core/en_rx_am.c:	u32 delta_us = ktime_us_delta(end->time, start->time);
drivers/net/ethernet/mellanox/mlx5/core/en_clock.c:	hwts->hwtstamp = ns_to_ktime(nsec);
drivers/net/ethernet/mellanox/mlx5/core/en_clock.c:			 ktime_to_ns(ktime_get_real()));
drivers/net/ethernet/mellanox/mlx4/en_clock.c:	hwts->hwtstamp = ns_to_ktime(nsec);
drivers/net/ethernet/mellanox/mlx4/en_clock.c:			 ktime_to_ns(ktime_get_real()));
drivers/net/ethernet/brocade/bna/bfa_ioc.c:	enable_req.tv_sec = ntohl(ktime_get_real_seconds());
drivers/net/ethernet/brocade/bna/bfa_ioc.c:	disable_req.tv_sec = ntohl(ktime_get_real_seconds());
drivers/net/ethernet/chelsio/cxgb/sge.c:#include <linux/ktime.h>
drivers/net/ethernet/chelsio/cxgb/sge.c:	ktime_t         last_updated;   /* last time quotas were computed */
drivers/net/ethernet/chelsio/cxgb/sge.c:	ktime_t now = ktime_get();
drivers/net/ethernet/chelsio/cxgb/sge.c:	delta_time_ns = ktime_to_ns(ktime_sub(now, s->last_updated));
drivers/net/ethernet/chelsio/cxgb4/sge.c: * which is in Core Clock ticks into ktime_t and assign it
drivers/net/ethernet/chelsio/cxgb4/sge.c:	hwtstamps->hwtstamp = ns_to_ktime(ns);
drivers/net/ethernet/freescale/fec_ptp.c:	timecounter_init(&fep->tc, &fep->cc, ktime_to_ns(ktime_get_real()));
drivers/net/ethernet/freescale/gianfar.c:			shhwtstamps.hwtstamp = ns_to_ktime(be64_to_cpu(*ns));
drivers/net/ethernet/freescale/gianfar.c:		shhwtstamps->hwtstamp = ns_to_ktime(be64_to_cpu(*ns));
drivers/net/ethernet/freescale/fec_main.c:	hwtstamps->hwtstamp = ns_to_ktime(ns);
drivers/net/ethernet/xscale/ixp4xx_eth.c:	shhwtstamps->hwtstamp = ns_to_ktime(ns);
drivers/net/ethernet/xscale/ixp4xx_eth.c:	shhwtstamps.hwtstamp = ns_to_ktime(ns);
drivers/net/ethernet/hisilicon/hip04_eth.c:#include <linux/ktime.h>
drivers/net/ethernet/hisilicon/hip04_eth.c:	hrtimer_start_range_ns(&priv->tx_coalesce_timer, ns_to_ktime(ns),
drivers/net/ethernet/marvell/mvpp2.c:#include <linux/ktime.h>
drivers/net/ethernet/marvell/mvpp2.c:	ktime_t interval;
drivers/net/ethernet/marvell/mvpp2.c:		interval = ktime_set(0, MVPP2_TXDONE_HRTIMER_PERIOD_NS);
drivers/net/ethernet/amd/xgbe/xgbe-ptp.c:			 ktime_to_ns(ktime_get_real()));
drivers/net/ethernet/amd/xgbe/xgbe-dev.c:			 ktime_to_ns(ktime_get_real()));
drivers/net/ethernet/amd/xgbe/xgbe-drv.c:		hwtstamps.hwtstamp = ns_to_ktime(nsec);
drivers/net/ethernet/amd/xgbe/xgbe-drv.c:			hwtstamps->hwtstamp = ns_to_ktime(nsec);
drivers/net/ethernet/cavium/liquidio/lio_main.c:						ns_to_ktime(ns +
drivers/net/ethernet/cavium/liquidio/lio_main.c:		ts.hwtstamp = ns_to_ktime(ns + lio->ptp_adjust);
drivers/net/ethernet/cavium/octeon/octeon_mgmt.c:			ts.hwtstamp = ns_to_ktime(ns);
drivers/net/ethernet/cavium/octeon/octeon_mgmt.c:			ts->hwtstamp = ns_to_ktime(ns);
drivers/net/ethernet/netronome/nfp/nfp_net_common.c:#include <linux/ktime.h>
drivers/net/can/usb/peak_usb/pcan_usb_core.c:		time_ref->tv_host_0 = ktime_to_timeval(ktime_get());
drivers/net/can/usb/peak_usb/pcan_usb_core.c:		time_ref->tv_host = ktime_to_timeval(ktime_get());
drivers/net/can/usb/peak_usb/pcan_usb_core.c:		*tv = ktime_to_timeval(ktime_get());
drivers/net/can/usb/peak_usb/pcan_usb_core.c:	hwts->hwtstamp = timeval_to_ktime(tv);
drivers/net/can/usb/peak_usb/pcan_usb_pro.c:	hwts->hwtstamp = timeval_to_ktime(tv);
drivers/net/can/usb/peak_usb/pcan_usb_pro.c:	hwts->hwtstamp = timeval_to_ktime(tv);
drivers/net/can/usb/peak_usb/pcan_usb.c:		hwts->hwtstamp = timeval_to_ktime(tv);
drivers/net/can/usb/peak_usb/pcan_usb.c:	hwts->hwtstamp = timeval_to_ktime(tv);
drivers/net/can/softing/softing_fw.c:	card->ts_ref = ktime_get();
drivers/net/can/softing/softing_fw.c:	card->ts_overflow = ktime_add_us(ktime_set(0, 0), ovf);
drivers/net/can/softing/softing_fw.c:ktime_t softing_raw2ktime(struct softing *card, u32 raw)
drivers/net/can/softing/softing_fw.c:	ktime_t now, real_offset;
drivers/net/can/softing/softing_fw.c:	ktime_t target;
drivers/net/can/softing/softing_fw.c:	ktime_t tmp;
drivers/net/can/softing/softing_fw.c:	now = ktime_get();
drivers/net/can/softing/softing_fw.c:	real_offset = ktime_sub(ktime_get_real(), now);
drivers/net/can/softing/softing_fw.c:	target = ktime_add_us(card->ts_ref, rawl);
drivers/net/can/softing/softing_fw.c:	tmp = ktime_add(target, card->ts_overflow);
drivers/net/can/softing/softing_fw.c:	while (unlikely(ktime_to_ns(tmp) > ktime_to_ns(now))) {
drivers/net/can/softing/softing_fw.c:		card->ts_ref = ktime_add(card->ts_ref, card->ts_overflow);
drivers/net/can/softing/softing_fw.c:		tmp = ktime_add(target, card->ts_overflow);
drivers/net/can/softing/softing_fw.c:	return ktime_add(target, real_offset);
drivers/net/can/softing/softing_fw.c:			softing_netdev_rx(netdev, &msg, ktime_set(0, 0));
drivers/net/can/softing/softing.h:#include <linux/ktime.h>
drivers/net/can/softing/softing.h:	ktime_t ts_ref;
drivers/net/can/softing/softing.h:	ktime_t ts_overflow; /* timestamp overflow value, in ktime */
drivers/net/can/softing/softing.h:ktime_t softing_raw2ktime(struct softing *card, u32 raw);
drivers/net/can/softing/softing.h:		      ktime_t ktime);
drivers/net/can/softing/softing_main.c:		ktime_t ktime)
drivers/net/can/softing/softing_main.c:	skb->tstamp = ktime;
drivers/net/can/softing/softing_main.c:	ktime_t ktime;
drivers/net/can/softing/softing_main.c:			softing_netdev_rx(netdev, &msg, ktime_set(0, 0));
drivers/net/can/softing/softing_main.c:		ktime = softing_raw2ktime(card, tmp_u32);
drivers/net/can/softing/softing_main.c:			softing_netdev_rx(netdev, &msg, ktime);
drivers/net/can/softing/softing_main.c:		ktime = softing_raw2ktime(card, tmp_u32);
drivers/net/can/softing/softing_main.c:				skb->tstamp = ktime;
drivers/net/can/softing/softing_main.c:			ret = softing_netdev_rx(netdev, &msg, ktime);
drivers/ata/pata_pdc2027x.c:#include <linux/ktime.h>
drivers/ata/pata_pdc2027x.c:	ktime_t start_time, end_time;
drivers/ata/pata_pdc2027x.c:	start_time = ktime_get();
drivers/ata/pata_pdc2027x.c:	end_time = ktime_get();
drivers/ata/pata_pdc2027x.c:	usec_elapsed = (long) ktime_us_delta(end_time, start_time);
drivers/ata/pata_ep93xx.c:#include <linux/ktime.h>
drivers/ata/pata_octeon_cf.c:					       ns_to_ktime(OCTEON_CF_BUSY_POLL_INTERVAL),
drivers/ata/pata_octeon_cf.c:				    ns_to_ktime(OCTEON_CF_BUSY_POLL_INTERVAL));
drivers/hisi/mailbox/hisi_mailbox/hisi_mailbox.c:		start_time = ktime_get_ns();
drivers/hisi/mailbox/hisi_mailbox/hisi_mailbox.c:			end_time = ktime_get_ns();
drivers/hisi/mailbox/hisi_mailbox/hisi_mailbox.c:			if(MAILBOX_DUMP_TIME < ktime_get_ns() - sync_send_dump_time) {
drivers/hisi/mailbox/hisi_mailbox/hisi_mailbox.c:				sync_send_dump_time = ktime_get_ns();
drivers/hisi/mailbox/hisi_mailbox/hisi_mailbox.c:			if(MAILBOX_DUMP_TIME < ktime_get_ns() - async_send_dump_time) {
drivers/hisi/mailbox/hisi_mailbox/hisi_mailbox.c:				async_send_dump_time = ktime_get_ns();
drivers/hisi/noc/hisi_noc_dump.c:#include <linux/ktime.h>
drivers/hisi/noc/hisi_noc.c:#include <linux/ktime.h>
drivers/hisi/noc/hisi_noc_info.c:#include <linux/ktime.h>
drivers/hisi/noc/hisi_noc_info.h:#include <linux/ktime.h>
drivers/hisi/jpu/hisi_jpu_utils.c:	ktime_get_ts(&ts);
drivers/hisi/mntn/blackbox/rdr_common.c:	ktime_get_ts(&uptime);
drivers/hisi/mntn/blackbox/platform_ap/rdr_hisi_ap_hook.c:	"irq_switch::ktime,slice,vec,dir", /*IRQ*/
drivers/hisi/mntn/blackbox/platform_ap/rdr_hisi_ap_hook.c:	"task_switch::ktime,stack,pid,comm", /*TASK*/
drivers/hisi/mntn/blackbox/platform_ap/rdr_hisi_ap_hook.c:	"cpuidle::ktime,dir", /*CPUIDLE*/
drivers/hisi/mntn/blackbox/platform_ap/rdr_hisi_ap_hook.c:	"worker::ktime,action,dir", /*WORKER*/
drivers/hisi/mntn/blackbox/platform_ap/rdr_hisi_ap_hook.c:	"mem_alloc::ktime,pid/vec,comm/irq_name,caller,operation,vaddr,paddr,size", /*MEM ALLOCATOR*/
drivers/hisi/mntn/blackbox/platform_ap/rdr_hisi_ap_hook.c:	"ion_alloc::ktime,pid/vec,comm/irq_name,operation,vaddr,paddr,size", /*ION ALLOCATOR*/
drivers/hisi/mntn/blackbox/platform_ap/rdr_hisi_ap_hook.c:	"time::ktime,action,dir", /*TIME*/
drivers/hisi/mntn/blackbox/platform_ap/rdr_hisi_ap_hook.c:	"cpu_onoff::ktime,cpu,on",	/*CPU_ONOFF */
drivers/hisi/mntn/blackbox/platform_ap/rdr_hisi_ap_hook.c:	"syscall::ktime,syscall,cpu,dir",	/*SYSCALL*/
drivers/hisi/mntn/blackbox/platform_ap/rdr_hisi_ap_hook.c:	"hung_task::ktime,timeout,pid,comm",	/*HUNG_TASK */
drivers/hisi/mntn/blackbox/platform_ap/rdr_hisi_ap_hook.c:	"tasklet::ktime,action,cpu,dir", /*TASKLET*/
drivers/hisi/mntn/blackbox/platform_ap/rdr_hisi_ap_adapter.c:	static u32 kicktimes;
drivers/hisi/mntn/blackbox/platform_ap/rdr_hisi_ap_adapter.c:		g_rdr_ap_root->wdt_kick_slice[kicktimes % WDT_KICK_SLICE_TIMES] = kickslice;
drivers/hisi/mntn/blackbox/platform_ap/rdr_hisi_ap_adapter.c:		kicktimes++;
drivers/hisi/mntn/blackbox/platform_ap/rdr_hisi_ap_cleartext.c:	rdr_cleartext_print(fp, &error, "ktime             cpu on\n");
drivers/hisi/mntn/blackbox/platform_ap/rdr_hisi_ap_cleartext.c:	rdr_cleartext_print(fp, &error, "ktime             dir\n");
drivers/hisi/mntn/blackbox/platform_ap/rdr_hisi_ap_cleartext.c:	rdr_cleartext_print(fp, &error, "ktime             slice          vec  dir\n");
drivers/contexthub/flp/hisi_flp.c:        g_flp_dev.pdr_last_utc = ktime_get_real_seconds() - g_flp_dev.pdr_config.report_count * (g_flp_dev.pdr_cycle/1000);
drivers/contexthub/flp/hisi_flp.c:        g_flp_dev.pdr_last_utc = ktime_get_real_seconds();
drivers/hv/hyperv_vmbus.h:	s32 next_checktime[4][32];
drivers/devfreq/hisi/dsu_pctrl/dsu-pctrl-devfreq.c:#include <linux/ktime.h>
drivers/devfreq/hisi/dsu_pctrl/dsu-pctrl-devfreq.c:	ktime_t prev_ts;
drivers/devfreq/hisi/dsu_pctrl/dsu-pctrl-devfreq.c:	unsigned int const usec = ktime_to_us(ktime_get());
drivers/devfreq/hisi/dsu_pctrl/dsu-pctrl-devfreq.c:			    ms_to_ktime(dsu->up_polling_ms));
drivers/devfreq/hisi/dsu_pctrl/dsu-pctrl-devfreq.c:	dsu->alg.last_update = ktime_to_us(ktime_get());
drivers/devfreq/hisi/dsu_pctrl/dsu-pctrl-devfreq.c:	dsu->alg.last_update = ktime_to_us(ktime_get());
drivers/devfreq/hisi/dsu_pctrl/dsu-pctrl-devfreq.c:	hrtimer_start(&dsu->poll_timer, ms_to_ktime(dsu->up_polling_ms),
drivers/devfreq/hisi/devfreq_devbw.c:#include <linux/ktime.h>
drivers/devfreq/hisi/arm-memlat-mon.c:	ktime_t prev_ts;
drivers/devfreq/hisi/arm-memlat-mon.c:	ktime_t ts;
drivers/devfreq/hisi/arm-memlat-mon.c:	ts = ktime_get();
drivers/devfreq/hisi/arm-memlat-mon.c:	diff = ktime_to_us(ktime_sub(ts, cpustats->prev_ts));
drivers/devfreq/hisi/l3c_devfreq/l3c_devfreq.c:#include <linux/ktime.h>
drivers/devfreq/hisi/l3c_devfreq/l3c_devfreq.c:	unsigned long const usec = ktime_to_us(ktime_get());
drivers/devfreq/hisi/l3c_devfreq/l3c_devfreq.c:			    ms_to_ktime(l3c->polling_ms));
drivers/devfreq/hisi/l3c_devfreq/l3c_devfreq.c:	l3c->alg.last_update = ktime_to_us(ktime_get());
drivers/devfreq/hisi/l3c_devfreq/l3c_devfreq.c:	l3c->alg.last_update = ktime_to_us(ktime_get());
drivers/devfreq/hisi/l3c_devfreq/l3c_devfreq.c:	hrtimer_start(&l3c->poll_timer, ms_to_ktime(l3c->polling_ms),
drivers/devfreq/hisi/l3c_devfreq/l3c_devfreq.c:	    hrtimer_start(&l3c->poll_timer, ms_to_ktime(l3c->polling_ms),
drivers/devfreq/hisi/governor_memlat.c:#include <linux/ktime.h>
drivers/huawei_platform/usb/superswitch/fsc/Platform_Linux/platform_helpers.c:    ktime_t ktime;
drivers/huawei_platform/usb/superswitch/fsc/Platform_Linux/platform_helpers.c:    ktime = ktime_set(0, time_us * 1000);
drivers/huawei_platform/usb/superswitch/fsc/Platform_Linux/platform_helpers.c:    hrtimer_start(timer, ktime, HRTIMER_MODE_REL);
drivers/huawei_platform/usb/pd/fsc/Platform_Linux/platform_helpers.c:    ktime_t ktime;
drivers/huawei_platform/usb/pd/fsc/Platform_Linux/platform_helpers.c:	ktime = ktime_set(0, timeout * g_fusb_timer_tick_period_ns);
drivers/huawei_platform/usb/pd/fsc/Platform_Linux/platform_helpers.c:	ret = hrtimer_start(timer, ktime, HRTIMER_MODE_REL);
drivers/huawei_platform/usb/pd/fsc/Platform_Linux/platform_helpers.c:	hrtimer_start(timer, ktime, HRTIMER_MODE_REL);
drivers/huawei_platform/usb/pd/ti/tusb422_linux.c:	hrtimer_start(&tusb422_pd->timer, ms_to_ktime(timeout_ms), HRTIMER_MODE_REL);
drivers/huawei_platform/usb/pd/richtek/tcpci_timer.c:				ktime_set(r, mod*1000), HRTIMER_MODE_REL);
drivers/huawei_platform/net/hw_netfilter/nf_hw_common.S:	.file 27 "/mnt/disk/jenkins/ci/workspace/chipset_patch_970_docker/opensource/component_code/vendor/huawei/extra/build/build_script/kirin_kernel_release/kernel/include/linux/ktime.h"
drivers/huawei_platform/net/hw_netfilter/nf_hw_common.S:	.string	"ktime_t"
drivers/huawei_platform/net/hw_netfilter/nf_hw_common.S:	.string	"ktime"
drivers/huawei_platform/net/hw_netfilter/nf_hw_hook.S:	.file 39 "/mnt/disk/jenkins/ci/workspace/chipset_patch_970_docker/opensource/component_code/vendor/huawei/extra/build/build_script/kirin_kernel_release/kernel/include/linux/ktime.h"
drivers/huawei_platform/net/hw_netfilter/nf_hw_hook.S:	.string	"ktime_t"
drivers/huawei_platform/net/hw_netfilter/nf_hw_hook.S:	.string	"ktime"
drivers/huawei_platform/net/hw_netfilter/nf_ad_filter.S:	.file 27 "/mnt/disk/jenkins/ci/workspace/chipset_patch_970_docker/opensource/component_code/vendor/huawei/extra/build/build_script/kirin_kernel_release/kernel/include/linux/ktime.h"
drivers/huawei_platform/net/hw_netfilter/nf_ad_filter.S:	.string	"ktime_t"
drivers/huawei_platform/net/hw_netfilter/nf_ad_filter.S:	.string	"ktime"
drivers/huawei_platform/net/hw_netfilter/nf_app_dl_monitor.S:	.file 33 "/mnt/disk/jenkins/ci/workspace/chipset_patch_970_docker/opensource/component_code/vendor/huawei/extra/build/build_script/kirin_kernel_release/kernel/include/linux/ktime.h"
drivers/huawei_platform/net/hw_netfilter/nf_app_dl_monitor.S:	.string	"ktime_t"
drivers/huawei_platform/net/hw_netfilter/nf_app_dl_monitor.S:	.string	"ktime"
drivers/huawei_platform/net/himos/hw_himos_stats_common.h:#include <linux/ktime.h>
drivers/huawei_platform/net/himos/hw_himos_aweme_detect.c:#include <linux/ktime.h>
Binary file drivers/huawei_platform/lcd/tools/localperl/bin/perl matches
drivers/huawei_platform/lcd/tools/localperl/lib/5.14.2/IO/Uncompress/Unzip.pm:    use POSIX 'mktime';
drivers/huawei_platform/lcd/tools/localperl/lib/5.14.2/IO/Uncompress/Unzip.pm:    my $time_t = mktime( $sec, $min, $hour, $mday, $mon, $year, 0, 0, -1 );
drivers/huawei_platform/lcd/tools/localperl/lib/5.14.2/x86_64-linux-thread-multi/Devel/PPPort.pm:  mini_mktime
drivers/huawei_platform/lcd/tools/localperl/lib/5.14.2/x86_64-linux-thread-multi/Devel/PPPort.pm:mini_mktime||5.007002|
drivers/huawei_platform/lcd/tools/localperl/lib/5.14.2/x86_64-linux-thread-multi/Time/Piece.pm:    $class->_mktime($time, 1);
drivers/huawei_platform/lcd/tools/localperl/lib/5.14.2/x86_64-linux-thread-multi/Time/Piece.pm:    $class->_mktime($time, 0);
drivers/huawei_platform/lcd/tools/localperl/lib/5.14.2/x86_64-linux-thread-multi/Time/Piece.pm:        $self = $class->_mktime($class->epoch, $class->[c_islocal]);
drivers/huawei_platform/lcd/tools/localperl/lib/5.14.2/x86_64-linux-thread-multi/Time/Piece.pm:sub _mktime {
drivers/huawei_platform/lcd/tools/localperl/lib/5.14.2/x86_64-linux-thread-multi/Time/Piece.pm:    return scalar $time->_mktime(\@vals, (ref($time) ? $time->[c_islocal] : 0));
drivers/huawei_platform/lcd/tools/localperl/lib/5.14.2/x86_64-linux-thread-multi/Time/Piece.pm:        return $time->_mktime(($time->epoch - $rhs), $time->[c_islocal]);
drivers/huawei_platform/lcd/tools/localperl/lib/5.14.2/x86_64-linux-thread-multi/Time/Piece.pm:    return $time->_mktime(($time->epoch + $rhs), $time->[c_islocal]);
drivers/huawei_platform/lcd/tools/localperl/lib/5.14.2/x86_64-linux-thread-multi/Time/Piece.pm:    my @vals = _mini_mktime($time->sec, $time->min, $time->hour,
drivers/huawei_platform/lcd/tools/localperl/lib/5.14.2/x86_64-linux-thread-multi/Time/Piece.pm:    return scalar $time->_mktime(\@vals, $time->[c_islocal]);
drivers/huawei_platform/lcd/tools/localperl/lib/5.14.2/x86_64-linux-thread-multi/Config_heavy.pl:d_mktime64='undef'
drivers/huawei_platform/lcd/tools/localperl/lib/5.14.2/x86_64-linux-thread-multi/Config_heavy.pl:d_mktime='define'
drivers/huawei_platform/lcd/tools/localperl/lib/5.14.2/x86_64-linux-thread-multi/POSIX.pm:		difftime mktime strftime tzset tzname)],
drivers/huawei_platform/lcd/tools/localperl/lib/5.14.2/x86_64-linux-thread-multi/CORE/config.h: *	This symbol, if defined, indicates that the mktime routine is
drivers/huawei_platform/lcd/tools/localperl/lib/5.14.2/x86_64-linux-thread-multi/CORE/config.h: *	This symbol, if defined, indicates that the mktime64 () routine is
drivers/huawei_platform/lcd/tools/localperl/lib/5.14.2/x86_64-linux-thread-multi/CORE/config.h: *	available to do the 64bit variant of mktime ()
drivers/huawei_platform/lcd/tools/localperl/lib/5.14.2/x86_64-linux-thread-multi/CORE/proto.h:PERL_CALLCONV void	Perl_mini_mktime(pTHX_ struct tm *ptm)
drivers/huawei_platform/lcd/tools/localperl/lib/5.14.2/x86_64-linux-thread-multi/CORE/embed.h:#define mini_mktime(a)		Perl_mini_mktime(aTHX_ a)
drivers/huawei_platform/lcd/tools/localperl/lib/5.14.2/x86_64-linux-thread-multi/CORE/uconfig.h: *	This symbol, if defined, indicates that the mktime routine is
drivers/huawei_platform/lcd/tools/localperl/lib/5.14.2/x86_64-linux-thread-multi/CORE/uconfig.h: *	This symbol, if defined, indicates that the mktime64 () routine is
drivers/huawei_platform/lcd/tools/localperl/lib/5.14.2/x86_64-linux-thread-multi/CORE/uconfig.h: *	available to do the 64bit variant of mktime ()
drivers/huawei_platform/lcd/tools/localperl/lib/5.14.2/x86_64-linux-thread-multi/auto/POSIX/load_imports.al:		difftime mktime strftime tzset tzname)],
drivers/huawei_platform/touthscreen/huawei_touchscreen_algo.c:#include <linux/ktime.h>
drivers/huawei_platform/touthscreen/huawei_touchscreen_algo.c:				ktime_get_ts(&curr_time[n_finger]);
drivers/huawei_platform/touthscreen/huawei_touchscreen_algo.c:					ktime_get_ts(&pre_finger_time[n_finger]);
drivers/huawei_platform/touthscreen/huawei_touchscreen_algo.c:					ktime_get_ts(&pre_finger_time[index]);
drivers/huawei_platform/touthscreen/panel/hideep/ist520e.h:#include <linux/ktime.h>
drivers/huawei_platform/touthscreen/panel/hideep/istxxxx_core_ops.c:			ktime_get_ts(&ts->event_time[ts->debug_index]);
drivers/huawei_platform/touthscreen/panel/synaptics/synaptics_dsx_test_reporting.c:		      ktime_set(WATCHDOG_TIMEOUT_S, 0), HRTIMER_MODE_REL);
drivers/huawei_platform/touthscreen/panel/synaptics/synaptics_dsx_test_reporting.c:		      ktime_set(WATCHDOG_TIMEOUT_S, 0), HRTIMER_MODE_REL);
drivers/huawei_platform/touthscreen/huawei_touchscreen.c:		info->time_stamp = ktime_get();
drivers/huawei_platform/touthscreen/huawei_touchscreen.c:		info->time_stamp = ktime_get();
drivers/huawei_platform/touthscreen/huawei_touchscreen.c:		info->time_stamp = ktime_get();
drivers/huawei_platform/touthscreen/huawei_touchscreen_test.c:	ktime_t start_time, stop_time, delta;
drivers/huawei_platform/touthscreen/huawei_touchscreen_test.c:		start_time = ktime_get();
drivers/huawei_platform/touthscreen/huawei_touchscreen_test.c:				stop_time = ktime_get();
drivers/huawei_platform/touthscreen/huawei_touchscreen_test.c:				delta = ktime_sub(stop_time, start_time);
drivers/huawei_platform/touthscreen/huawei_touchscreen_test.c:				delta_us = (long long)ktime_to_us(delta);
drivers/huawei_platform/touthscreen/huawei_touchscreen_test.c:				delta_ms = (long long)ktime_to_ms(delta);
drivers/huawei_platform/inputhub/kirin710/vibrator_channel.c:		ktime_t r = hrtimer_get_remaining(&datat->timer);
drivers/huawei_platform/inputhub/kirin710/vibrator_channel.c:		return ktime_to_ms(r);
drivers/huawei_platform/inputhub/kirin710/vibrator_channel.c:				  ns_to_ktime((u64) val * NSEC_PER_MSEC),
drivers/huawei_platform/chr/wbc_hw_hook.c:#include <linux/ktime.h>
drivers/huawei_platform/chr/wbc_hw_hook.c:	ktime_t kt;
drivers/huawei_platform/chr/wbc_hw_hook.c:		kt = ktime_get_real();
drivers/huawei_platform/chr/wbc_hw_hook.c:		kt = ktime_get_real();
drivers/huawei_platform/vibrator/classd_vibrator/classd_vibrator.c:		ktime_t r = hrtimer_get_remaining(&pdata->timer);
drivers/huawei_platform/vibrator/classd_vibrator/classd_vibrator.c:		return ktime_to_ns(r) / NSEC_PER_MSEC; /* convert ktime to millisecond */
drivers/huawei_platform/vibrator/classd_vibrator/classd_vibrator.c:			ns_to_ktime((u64)value * NSEC_PER_MSEC), /* use millisecond to construct ktime_t */
drivers/huawei_platform/boottime/hw_boottime.c:    ktime_t calltime, delta, rettime;
drivers/huawei_platform/boottime/hw_boottime.c:    calltime = ktime_get();
drivers/huawei_platform/boottime/hw_boottime.c:    rettime = ktime_get();
drivers/huawei_platform/boottime/hw_boottime.c:    delta = ktime_sub(rettime, calltime);
drivers/huawei_platform/boottime/hw_boottime.c:    duration = (unsigned long long) ktime_to_ns(delta) >> 10;
drivers/huawei_platform/connectivity/bcm/wifi/driver/bcmdhd/include/wlioctl.h:	uint32	mc_noacktimer_expired;  /* no. of times noack timer expired */
drivers/huawei_platform/power/usb_short_circuit_protect/usb_short_circuit_protect.c:            hrtimer_start(&di->timer, ktime_set(interval/MSEC_PER_SEC, (interval % MSEC_PER_SEC) * USEC_PER_SEC), HRTIMER_MODE_REL);
drivers/huawei_platform/power/usb_short_circuit_protect/usb_short_circuit_protect.c:    hrtimer_start(&di->timer, ktime_set(interval/MSEC_PER_SEC, (interval % MSEC_PER_SEC) * USEC_PER_SEC), HRTIMER_MODE_REL);
drivers/huawei_platform/power/charger/charger_ap/direct_charger/direct_charger.c:	hrtimer_start(&di->charge_control_timer, ktime_set(interval/MSEC_PER_SEC, (interval % MSEC_PER_SEC) * USEC_PER_SEC), HRTIMER_MODE_REL);
drivers/huawei_platform/power/charger/charger_ap/direct_charger/direct_charger.c:	hrtimer_start(&di->threshold_caculation_timer, ktime_set(interval/MSEC_PER_SEC, (interval % MSEC_PER_SEC) * USEC_PER_SEC), HRTIMER_MODE_REL);
drivers/huawei_platform/power/charger/charger_ap/direct_charger/direct_charger.c:	hrtimer_start(&di->kick_watchdog_timer, ktime_set(interval/MSEC_PER_SEC, (interval % MSEC_PER_SEC) * USEC_PER_SEC), HRTIMER_MODE_REL);
drivers/huawei_platform/power/charger/charger_ap/direct_charger/direct_charger.c:	hrtimer_start(&di->charge_control_timer, ktime_set(interval/MSEC_PER_SEC, (interval % MSEC_PER_SEC) * USEC_PER_SEC), HRTIMER_MODE_REL);
drivers/huawei_platform/power/charger/charger_ap/direct_charger/direct_charger.c:	hrtimer_start(&di->threshold_caculation_timer, ktime_set(interval/MSEC_PER_SEC, (interval % MSEC_PER_SEC) * USEC_PER_SEC), HRTIMER_MODE_REL);
drivers/huawei_platform/power/charger/charger_ap/direct_charger/direct_charger.c:	hrtimer_start(&di->kick_watchdog_timer, ktime_set(interval/MSEC_PER_SEC, (interval % MSEC_PER_SEC) * USEC_PER_SEC), HRTIMER_MODE_REL);
drivers/huawei_platform/emcom/xengine/emcom_xengine.c:	ktime_t          tstamp_save;
drivers/hwusb/hw_gadget/hw_usb_sync_host_time.c:    flush_pc_data.tv.tv_sec = (unsigned long) mktime (host_time->year,
drivers/isdn/mISDN/clock.c:#include <linux/ktime.h>
drivers/isdn/mISDN/clock.c:static ktime_t iclock_timestamp;	/* time stamp of last clock */
drivers/isdn/mISDN/clock.c:	iclock_timestamp = ktime_get();
drivers/isdn/mISDN/clock.c:mISDN_clock_update(struct mISDNclock *iclock, int samples, ktime_t *timestamp)
drivers/isdn/mISDN/clock.c:	ktime_t		timestamp_now;
drivers/isdn/mISDN/clock.c:			iclock_timestamp = ktime_get();
drivers/isdn/mISDN/clock.c:			timestamp_now = ktime_get();
drivers/isdn/mISDN/clock.c:		delta = ktime_divns(ktime_sub(timestamp_now, iclock_timestamp),
drivers/isdn/mISDN/clock.c:	ktime_t		timestamp_now;
drivers/isdn/mISDN/clock.c:	timestamp_now = ktime_get();
drivers/isdn/mISDN/clock.c:	delta = ktime_divns(ktime_sub(timestamp_now, iclock_timestamp),
drivers/isdn/hardware/eicon/divamnt.c:	ktime_get_ts64(&time);
drivers/acpi/button.c:	ktime_t last_time;
drivers/acpi/button.c:	ktime_t next_report;
drivers/acpi/button.c:	next_report = ktime_add(button->last_time,
drivers/acpi/button.c:				ms_to_ktime(lid_report_interval));
drivers/acpi/button.c:	    ktime_after(ktime_get(), next_report)) {
drivers/acpi/button.c:		button->last_time = ktime_get();
drivers/acpi/button.c:		button->last_time = ktime_get();
drivers/acpi/cppc_acpi.c:#include <linux/ktime.h>
drivers/acpi/cppc_acpi.c:	ktime_t deadline;
drivers/acpi/cppc_acpi.c:	ktime_t next_deadline = ktime_add(ktime_get(), pcc_data.deadline);
drivers/acpi/cppc_acpi.c:	while (!ktime_after(ktime_get(), next_deadline)) {
drivers/acpi/cppc_acpi.c:	static ktime_t last_cmd_cmpl_time, last_mpar_reset;
drivers/acpi/cppc_acpi.c:		time_delta = ktime_us_delta(ktime_get(), last_cmd_cmpl_time);
drivers/acpi/cppc_acpi.c:			time_delta = ktime_ms_delta(ktime_get(), last_mpar_reset);
drivers/acpi/cppc_acpi.c:			last_mpar_reset = ktime_get();
drivers/acpi/cppc_acpi.c:		last_cmd_cmpl_time = ktime_get();
drivers/acpi/cppc_acpi.c:		pcc_data.deadline = ns_to_ktime(usecs_lat * NSEC_PER_USEC);
drivers/acpi/osl.c:	u64 time_ns = ktime_to_ns(ktime_get());
drivers/pps/clients/Makefile:obj-$(CONFIG_PPS_CLIENT_KTIMER)	+= pps-ktimer.o
drivers/pps/clients/pps-ktimer.c: * pps-ktimer.c -- kernel timer test client
drivers/pps/clients/pps-ktimer.c:static struct timer_list ktimer;
drivers/pps/clients/pps-ktimer.c:static void pps_ktimer_event(unsigned long ptr)
drivers/pps/clients/pps-ktimer.c:	mod_timer(&ktimer, jiffies + HZ);
drivers/pps/clients/pps-ktimer.c:static struct pps_source_info pps_ktimer_info = {
drivers/pps/clients/pps-ktimer.c:	.name		= "ktimer",
drivers/pps/clients/pps-ktimer.c:static void __exit pps_ktimer_exit(void)
drivers/pps/clients/pps-ktimer.c:	dev_info(pps->dev, "ktimer PPS source unregistered\n");
drivers/pps/clients/pps-ktimer.c:	del_timer_sync(&ktimer);
drivers/pps/clients/pps-ktimer.c:static int __init pps_ktimer_init(void)
drivers/pps/clients/pps-ktimer.c:	pps = pps_register_source(&pps_ktimer_info,
drivers/pps/clients/pps-ktimer.c:	setup_timer(&ktimer, pps_ktimer_event, 0);
drivers/pps/clients/pps-ktimer.c:	mod_timer(&ktimer, jiffies + HZ);
drivers/pps/clients/pps-ktimer.c:	dev_info(pps->dev, "ktimer PPS source registered\n");
drivers/pps/clients/pps-ktimer.c:module_init(pps_ktimer_init);
drivers/pps/clients/pps-ktimer.c:module_exit(pps_ktimer_exit);
drivers/pps/clients/Kconfig:	  will be called pps-ktimer.
drivers/pps/kapi.c:static void pps_add_offset(struct pps_ktime *ts, struct pps_ktime *offset)
drivers/pps/kapi.c:	struct pps_ktime ts_real = { .sec = 0, .nsec = 0, .flags = 0 };
drivers/pps/kapi.c:	timespec_to_pps_ktime(&ts_real, ts->ts_real);
drivers/pps/generators/pps_gen_parport.c:	expire_time = ktime_to_timespec(hrtimer_get_softexpires(timer));
drivers/pps/generators/pps_gen_parport.c:			ktime_set(expire_time.tv_sec + 1,
drivers/pps/generators/pps_gen_parport.c:static inline ktime_t next_intr_time(struct pps_generator_pp *dev)
drivers/pps/generators/pps_gen_parport.c:	return ktime_set(ts.tv_sec +
drivers/input/rmi4/rmi_driver.h:#include <linux/ktime.h>
drivers/input/touchscreen/sur40.c:	new_buf->vb.vb2_buf.timestamp = ktime_get_ns();
drivers/input/joystick/analog.c:static bool use_ktime = true;
drivers/input/joystick/analog.c:module_param(use_ktime, bool, 0400);
drivers/input/joystick/analog.c:MODULE_PARM_DESC(use_ktime, "Use ktime for measuring I/O speed");
drivers/input/joystick/analog.c:	if (use_ktime) {
drivers/input/joystick/analog.c:		return ktime_get_ns();
drivers/input/joystick/analog.c:	if (use_ktime)
drivers/input/joystick/analog.c:	if (use_ktime) {
drivers/input/joystick/walkera0701.c:	w->irq_time = ktime_to_ns(ktime_get());
drivers/input/joystick/walkera0701.c:	hrtimer_start(&w->timer, ktime_set(0, BIN_SAMPLE), HRTIMER_MODE_REL);
drivers/input/gameport/gameport.c:static bool use_ktime = true;
drivers/input/gameport/gameport.c:module_param(use_ktime, bool, 0400);
drivers/input/gameport/gameport.c:MODULE_PARM_DESC(use_ktime, "Use ktime for measuring I/O speed");
drivers/input/gameport/gameport.c:		t1 = ktime_get_ns();
drivers/input/gameport/gameport.c:		t2 = ktime_get_ns();
drivers/input/gameport/gameport.c:		t3 = ktime_get_ns();
drivers/input/gameport/gameport.c:	gameport->speed = use_ktime ?
drivers/input/evdev.c:	ktime_t time;
drivers/input/evdev.c:			ktime_get_real() :
drivers/input/evdev.c:				ktime_get() :
drivers/input/evdev.c:				ktime_get_boottime();
drivers/input/evdev.c:	ev.time = ktime_to_timeval(time);
drivers/input/evdev.c:			ktime_t *ev_time)
drivers/input/evdev.c:	event.time = ktime_to_timeval(ev_time[client->clk_type]);
drivers/input/evdev.c:	ktime_t ev_time[EV_CLK_MAX];
drivers/input/evdev.c:	ev_time[EV_CLK_MONO] = ktime_get();
drivers/input/evdev.c:	ev_time[EV_CLK_REAL] = ktime_mono_to_real(ev_time[EV_CLK_MONO]);
drivers/input/evdev.c:	ev_time[EV_CLK_BOOT] = ktime_mono_to_any(ev_time[EV_CLK_MONO],
drivers/input/misc/gpio_input.c:		hrtimer_start(&ds->timer, ktime_set(0, 0), HRTIMER_MODE_REL);
drivers/input/misc/gpio_input.c:		if (ktime_to_ns(di->poll_time) <= 0)
drivers/input/misc/gpio_input.c:			di->poll_time = ktime_set(0, 20 * NSEC_PER_MSEC);
drivers/input/misc/gpio_input.c:		hrtimer_start(&ds->timer, ktime_set(0, 0), HRTIMER_MODE_REL);
drivers/input/misc/gpio_matrix.c:	hrtimer_start(&kp->timer, ktime_set(0, 0), HRTIMER_MODE_REL);
drivers/input/misc/gpio_matrix.c:		hrtimer_start(&kp->timer, ktime_set(0, 0), HRTIMER_MODE_REL);
drivers/infiniband/hw/mlx4/alias_GUID.c:		rec->time_to_run = ktime_get_boot_ns() + 1 * NSEC_PER_SEC;
drivers/infiniband/hw/mlx4/alias_GUID.c:		rec->time_to_run = ktime_get_boot_ns() +
drivers/infiniband/hw/mlx4/alias_GUID.c:		u64 curr_time = ktime_get_boot_ns();
drivers/infiniband/hw/hfi1/hfi.h:	ktime_t aspm_ts_last_intr;
drivers/infiniband/hw/hfi1/hfi.h:	ktime_t aspm_ts_timer_sched;
drivers/infiniband/hw/hfi1/mad.c:	ts = ktime_to_ns(ktime_get()) / 1024;
drivers/infiniband/hw/hfi1/aspm.h:	ktime_t now, prev;
drivers/infiniband/hw/hfi1/aspm.h:	now = ktime_get();
drivers/infiniband/hw/hfi1/aspm.h:	close_interrupts = ktime_to_ns(ktime_sub(now, prev)) < ASPM_TRIGGER_NS;
drivers/infiniband/hw/hfi1/aspm.h:	restart_timer = ktime_to_ns(ktime_sub(now, rcd->aspm_ts_timer_sched)) >
drivers/infiniband/hw/hfi1/rc.c:	cc_event->timestamp = ktime_to_ns(ktime_get()) / 1024;
drivers/infiniband/hw/hfi1/rc.c:		hrtimer_start(&cca_timer->hrtimer, ns_to_ktime(nsec),
drivers/infiniband/hw/hfi1/init.c:		hrtimer_forward_now(t, ns_to_ktime(nsec));
drivers/bluetooth/hci_intel.c:	ktime_t calltime, delta, rettime;
drivers/bluetooth/hci_intel.c:	calltime = ktime_get();
drivers/bluetooth/hci_intel.c:	rettime = ktime_get();
drivers/bluetooth/hci_intel.c:	delta = ktime_sub(rettime, calltime);
drivers/bluetooth/hci_intel.c:	duration = (unsigned long long) ktime_to_ns(delta) >> 10;
drivers/bluetooth/hci_intel.c:	calltime = ktime_get();
drivers/bluetooth/hci_intel.c:	rettime = ktime_get();
drivers/bluetooth/hci_intel.c:	delta = ktime_sub(rettime, calltime);
drivers/bluetooth/hci_intel.c:	duration = (unsigned long long) ktime_to_ns(delta) >> 10;
drivers/bluetooth/btusb.c:	ktime_t calltime, delta, rettime;
drivers/bluetooth/btusb.c:	calltime = ktime_get();
drivers/bluetooth/btusb.c:	rettime = ktime_get();
drivers/bluetooth/btusb.c:	delta = ktime_sub(rettime, calltime);
drivers/bluetooth/btusb.c:	duration = (unsigned long long) ktime_to_ns(delta) >> 10;
drivers/bluetooth/btusb.c:	calltime = ktime_get();
drivers/bluetooth/btusb.c:	rettime = ktime_get();
drivers/bluetooth/btusb.c:	delta = ktime_sub(rettime, calltime);
drivers/bluetooth/btusb.c:	duration = (unsigned long long) ktime_to_ns(delta) >> 10;
drivers/devkit/lcdkit/lcdkit1.0/core/common/hisi/lcdkit_disp.c:                hrtimer_start(&hisifd->esd_ctrl.esd_hrtimer, ktime_set(ESD_CHECK_TIME_PERIOD / 1000,
drivers/devkit/lcdkit/lcdkit1.0/core/common/lcdkit_backlight_ic_common.c:		hrtimer_start(&plcdkit_bl_ic->bl_resume_hrtimer, ktime_set((tmp->bl_enhance_hrdtimer_time) / 1000,
drivers/devkit/lcdkit/lcdkit3.0/kernel/common/src/lcd_kit_common.c:		hrtimer_start(&common_info->check_thread.hrtimer, ktime_set(CHECK_THREAD_TIME_PERIOD / 1000,
drivers/devkit/lcdkit/lcdkit3.0/kernel/common/src/lcd_kit_common.c:		hrtimer_start(&common_info->check_thread.hrtimer, ktime_set(CHECK_THREAD_TIME_PERIOD / 1000,
drivers/devkit/lcdkit/lcdkit3.0/kernel/common/src/lcd_kit_common.c:		hrtimer_start(&common_info->check_thread.hrtimer, ktime_set(CHECK_THREAD_TIME_PERIOD / 1000,
drivers/devkit/tpkit/3_0/panel/synaptics/synaptics_dsx_test_reporting.c:		      ktime_set(WATCHDOG_TIMEOUT_S, 0), HRTIMER_MODE_REL);
drivers/devkit/tpkit/3_0/panel/synaptics/synaptics_dsx_test_reporting.c:		      ktime_set(WATCHDOG_TIMEOUT_S, 0), HRTIMER_MODE_REL);
drivers/devkit/tpkit/3_0/huawei_ts_kit_test.c:	ktime_t start_time, stop_time, delta;
drivers/devkit/tpkit/3_0/huawei_ts_kit_test.c:		start_time = ktime_get();
drivers/devkit/tpkit/3_0/huawei_ts_kit_test.c:				stop_time = ktime_get();
drivers/devkit/tpkit/3_0/huawei_ts_kit_test.c:				delta = ktime_sub(stop_time, start_time);
drivers/devkit/tpkit/3_0/huawei_ts_kit_test.c:				delta_us = (long long)ktime_to_us(delta);
drivers/devkit/tpkit/3_0/huawei_ts_kit_test.c:				delta_ms = (long long)ktime_to_ms(delta);
drivers/devkit/tpkit/3_0/huawei_ts_kit_api.c:		info->time_stamp = ktime_get();
drivers/devkit/tpkit/3_0/huawei_ts_kit_api.c:		info->time_stamp = ktime_get();
drivers/devkit/tpkit/3_0/huawei_ts_kit_api.c:		info->time_stamp = ktime_get();
drivers/devkit/tpkit/3_0/huawei_ts_kit_api.c:		info->time_stamp = ktime_get();
drivers/devkit/tpkit/3_0/huawei_ts_kit.h:	ktime_t time_stamp;
drivers/devkit/tpkit/3_0/huawei_ts_kit.h:	ktime_t time_stamp;
drivers/devkit/tpkit/3_0/huawei_ts_kit.h:	ktime_t time_stamp;
drivers/devkit/tpkit/3_0/huawei_ts_kit.h:	ktime_t time_stamp;
drivers/devkit/tpkit/3_0/huawei_ts_kit_algo.c:#include <linux/ktime.h>
drivers/devkit/tpkit/3_0/huawei_ts_kit_algo.c:				ktime_get_ts(&curr_time[n_finger]);
drivers/devkit/tpkit/3_0/huawei_ts_kit_algo.c:					ktime_get_ts(&pre_finger_time[n_finger]);
drivers/devkit/tpkit/3_0/huawei_ts_kit_algo.c:					ktime_get_ts(&pre_finger_time[index]);
drivers/devkit/tpkit/3_0/huawei_ts_kit_algo.c:		ktime_get_ts(&cur_time);
drivers/devkit/tpkit/3_0/huawei_ts_kit_algo.c:					ktime_get_ts(&pre_pen_up_time);
drivers/devkit/tpkit/3_0/huawei_ts_kit_algo.c:				ktime_get_ts(&pre_pen_down_time);
drivers/devkit/tpkit/3_0/huawei_ts_kit_algo.c:	ktime_get_ts(&pre_pen_down_time);
drivers/devkit/tpkit/3_0/huawei_ts_kit_algo.c:	ktime_get_ts(&pre_pen_up_time);
drivers/devkit/tpkit/panel/synaptics/synaptics_dsx_test_reporting.c:		      ktime_set(WATCHDOG_TIMEOUT_S, 0), HRTIMER_MODE_REL);
drivers/devkit/tpkit/panel/synaptics/synaptics_dsx_test_reporting.c:		      ktime_set(WATCHDOG_TIMEOUT_S, 0), HRTIMER_MODE_REL);
drivers/devkit/tpkit/huawei_ts_kit_test.c:	ktime_t start_time, stop_time, delta;
drivers/devkit/tpkit/huawei_ts_kit_test.c:		start_time = ktime_get();
drivers/devkit/tpkit/huawei_ts_kit_test.c:				stop_time = ktime_get();
drivers/devkit/tpkit/huawei_ts_kit_test.c:				delta = ktime_sub(stop_time, start_time);
drivers/devkit/tpkit/huawei_ts_kit_test.c:				delta_us = (long long)ktime_to_us(delta);
drivers/devkit/tpkit/huawei_ts_kit_test.c:				delta_ms = (long long)ktime_to_ms(delta);
drivers/devkit/tpkit/huawei_ts_kit_api.c:        info->time_stamp = ktime_get();
drivers/devkit/tpkit/huawei_ts_kit_api.c:        info->time_stamp = ktime_get();
drivers/devkit/tpkit/huawei_ts_kit_api.c:        info->time_stamp = ktime_get();
drivers/devkit/tpkit/huawei_ts_kit_api.c:		info->time_stamp = ktime_get();
drivers/devkit/tpkit/huawei_ts_kit.h:    ktime_t time_stamp;
drivers/devkit/tpkit/huawei_ts_kit.h:    ktime_t time_stamp;
drivers/devkit/tpkit/huawei_ts_kit.h:	ktime_t time_stamp;
drivers/devkit/tpkit/huawei_ts_kit.h:    ktime_t time_stamp;
drivers/devkit/tpkit/huawei_ts_kit_algo.c:#include <linux/ktime.h>
drivers/devkit/tpkit/huawei_ts_kit_algo.c:				ktime_get_ts(&curr_time[n_finger]);
drivers/devkit/tpkit/huawei_ts_kit_algo.c:					ktime_get_ts(&pre_finger_time[n_finger]);
drivers/devkit/tpkit/huawei_ts_kit_algo.c:					ktime_get_ts(&pre_finger_time[index]);
drivers/allocpages_delayacct/allocpages_delayacct.c:	current->delays->allocpages_start = ktime_get_ns();
drivers/allocpages_delayacct/allocpages_delayacct.c:	u64 ns = ktime_get_ns() - current->delays->allocpages_start;
drivers/gpio/gpiolib.c:	ge.timestamp = ktime_get_real_ns();
drivers/gpu/arm/bifrost-r14p0-00cet0/mali_kbase_js.h:		ktime_t *end_timestamp);
drivers/gpu/arm/bifrost-r14p0-00cet0/mali_kbase_softjobs.c:#include <linux/ktime.h>
drivers/gpu/arm/bifrost-r14p0-00cet0/mali_kbase_softjobs.c:	katom->start_timestamp = ktime_get();
drivers/gpu/arm/bifrost-r14p0-00cet0/mali_kbase_softjobs.c:	ktime_t cur_time = ktime_get();
drivers/gpu/arm/bifrost-r14p0-00cet0/mali_kbase_softjobs.c:		s64 elapsed_time = ktime_to_ms(ktime_sub(cur_time,
drivers/gpu/arm/bifrost-r14p0-00cet0/hisi_ipa/mali_kbase_ipa_ctx.c:	ktime_t timestamp;
drivers/gpu/arm/bifrost-r14p0-00cet0/hisi_ipa/mali_kbase_ipa_ctx.c:	ctx->timestamp = ktime_get();
drivers/gpu/arm/bifrost-r14p0-00cet0/hisi_ipa/mali_kbase_ipa_ctx.c:	ktime_t time_now;
drivers/gpu/arm/bifrost-r14p0-00cet0/hisi_ipa/mali_kbase_ipa_ctx.c:	ktime_t timestamp_diff;
drivers/gpu/arm/bifrost-r14p0-00cet0/hisi_ipa/mali_kbase_ipa_ctx.c:	time_now = ktime_get();
drivers/gpu/arm/bifrost-r14p0-00cet0/hisi_ipa/mali_kbase_ipa_ctx.c:	timestamp_diff = ktime_sub(time_now, ctx->timestamp);
drivers/gpu/arm/bifrost-r14p0-00cet0/hisi_ipa/mali_kbase_ipa_ctx.c:	ctx->time_diff[statistics_idx % NR_IPA_UNIT] = (u32) (ktime_to_ns(timestamp_diff) >> KBASE_PM_TIME_SHIFT);
drivers/gpu/arm/bifrost-r14p0-00cet0/mali_kbase_core_linux.c:			ktime_to_ns(kbdev->pm.gpu_poweroff_time),
drivers/gpu/arm/bifrost-r14p0-00cet0/mali_kbase_jd_debugfs.c:		if (ktime_to_ns(atom->start_timestamp))
drivers/gpu/arm/bifrost-r14p0-00cet0/mali_kbase_jd_debugfs.c:			start_timestamp = ktime_to_ns(
drivers/gpu/arm/bifrost-r14p0-00cet0/mali_kbase_jd_debugfs.c:					ktime_sub(ktime_get(), atom->start_timestamp));
drivers/gpu/arm/bifrost-r14p0-00cet0/backend/gpu/mali_kbase_jm_rb.c:					ktime_t *end_timestamp);
drivers/gpu/arm/bifrost-r14p0-00cet0/backend/gpu/mali_kbase_jm_rb.c:						ktime_t *end_timestamp)
drivers/gpu/arm/bifrost-r14p0-00cet0/backend/gpu/mali_kbase_jm_rb.c:					ktime_t *end_timestamp)
drivers/gpu/arm/bifrost-r14p0-00cet0/backend/gpu/mali_kbase_jm_rb.c:				ktime_t *end_timestamp)
drivers/gpu/arm/bifrost-r14p0-00cet0/backend/gpu/mali_kbase_jm_rb.c:						ktime_to_ns(*end_timestamp),
drivers/gpu/arm/bifrost-r14p0-00cet0/backend/gpu/mali_kbase_jm_rb.c:						ktime_to_ns(ktime_get()), 0, 0,
drivers/gpu/arm/bifrost-r14p0-00cet0/backend/gpu/mali_kbase_jm_rb.c:void kbase_backend_reset(struct kbase_device *kbdev, ktime_t *end_timestamp)
drivers/gpu/arm/bifrost-r14p0-00cet0/backend/gpu/mali_kbase_jm_internal.h:					u64 job_tail, ktime_t *end_timestamp);
drivers/gpu/arm/bifrost-r14p0-00cet0/backend/gpu/mali_kbase_pm_internal.h:				ktime_t *now);
drivers/gpu/arm/bifrost-r14p0-00cet0/backend/gpu/mali_kbase_pm_driver.c:			if (ktime_to_ns(atom->start_timestamp))
drivers/gpu/arm/bifrost-r14p0-00cet0/backend/gpu/mali_kbase_pm_driver.c:				start_timestamp = ktime_to_ns(ktime_sub(ktime_get(), atom->start_timestamp));
drivers/gpu/arm/bifrost-r14p0-00cet0/backend/gpu/mali_kbase_jm_hw.c:	katom->start_timestamp = ktime_get();
drivers/gpu/arm/bifrost-r14p0-00cet0/backend/gpu/mali_kbase_jm_hw.c:				ktime_to_ns(katom->start_timestamp),
drivers/gpu/arm/bifrost-r14p0-00cet0/backend/gpu/mali_kbase_jm_hw.c:						ktime_t end_timestamp)
drivers/gpu/arm/bifrost-r14p0-00cet0/backend/gpu/mali_kbase_jm_hw.c:		ktime_t timestamp_diff;
drivers/gpu/arm/bifrost-r14p0-00cet0/backend/gpu/mali_kbase_jm_hw.c:		timestamp_diff = ktime_sub(end_timestamp,
drivers/gpu/arm/bifrost-r14p0-00cet0/backend/gpu/mali_kbase_jm_hw.c:		if (ktime_to_ns(timestamp_diff) >= 0) {
drivers/gpu/arm/bifrost-r14p0-00cet0/backend/gpu/mali_kbase_jm_hw.c:	ktime_t end_timestamp = ktime_get();
drivers/gpu/arm/bifrost-r14p0-00cet0/backend/gpu/mali_kbase_jm_hw.c:				end_timestamp = ktime_get();
drivers/gpu/arm/bifrost-r14p0-00cet0/backend/gpu/mali_kbase_jm_hw.c:	ktime_t end_timestamp = ktime_get();
drivers/gpu/arm/bifrost-r14p0-00cet0/backend/gpu/mali_kbase_pm_metrics.c:	kbdev->pm.backend.metrics.time_period_start = ktime_get();
drivers/gpu/arm/bifrost-r14p0-00cet0/backend/gpu/mali_kbase_pm_metrics.c:								ktime_t now)
drivers/gpu/arm/bifrost-r14p0-00cet0/backend/gpu/mali_kbase_pm_metrics.c:	ktime_t diff;
drivers/gpu/arm/bifrost-r14p0-00cet0/backend/gpu/mali_kbase_pm_metrics.c:	diff = ktime_sub(now, kbdev->pm.backend.metrics.time_period_start);
drivers/gpu/arm/bifrost-r14p0-00cet0/backend/gpu/mali_kbase_pm_metrics.c:	if (ktime_to_ns(diff) < 0)
drivers/gpu/arm/bifrost-r14p0-00cet0/backend/gpu/mali_kbase_pm_metrics.c:		u32 ns_time = (u32) (ktime_to_ns(diff) >> KBASE_PM_TIME_SHIFT);
drivers/gpu/arm/bifrost-r14p0-00cet0/backend/gpu/mali_kbase_pm_metrics.c:		kbdev->pm.backend.metrics.values.time_idle += (u32) (ktime_to_ns(diff)
drivers/gpu/arm/bifrost-r14p0-00cet0/backend/gpu/mali_kbase_pm_metrics.c:	kbase_pm_get_dvfs_utilisation_calc(kbdev, ktime_get());
drivers/gpu/arm/bifrost-r14p0-00cet0/backend/gpu/mali_kbase_pm_metrics.c:void kbase_pm_metrics_update(struct kbase_device *kbdev, ktime_t *timestamp)
drivers/gpu/arm/bifrost-r14p0-00cet0/backend/gpu/mali_kbase_pm_metrics.c:	ktime_t now;
drivers/gpu/arm/bifrost-r14p0-00cet0/backend/gpu/mali_kbase_pm_metrics.c:		now = ktime_get();
drivers/gpu/arm/bifrost-r14p0-00cet0/backend/gpu/mali_kbase_jm_rb.h:				ktime_t *end_timestamp);
drivers/gpu/arm/bifrost-r14p0-00cet0/backend/gpu/mali_kbase_pm_defs.h:	ktime_t time_period_start;
drivers/gpu/arm/bifrost-r14p0-00cet0/mali_kbase_jd.c:		ktime_t *end_timestamp, kbasep_js_atom_done_code done_code)
drivers/gpu/arm/bifrost-r14p0-00cet0/mali_kbase_jm.h:		struct kbase_jd_atom *katom, ktime_t *end_timestamp);
drivers/gpu/arm/bifrost-r14p0-00cet0/mali_kbase_defs.h:	ktime_t start_timestamp;
drivers/gpu/arm/bifrost-r14p0-00cet0/mali_kbase_defs.h:	ktime_t gpu_poweroff_time;
drivers/gpu/arm/bifrost-r14p0-00cet0/mali_kbase_defs.h:#define HR_TIMER_DELAY_MSEC(x) (ns_to_ktime(((u64)(x))*1000000U))
drivers/gpu/arm/bifrost-r14p0-00cet0/mali_kbase_defs.h:#define HR_TIMER_DELAY_NSEC(x) (ns_to_ktime(x))
drivers/gpu/arm/bifrost-r14p0-00cet0/mali_kbase.h:#include <linux/ktime.h>
drivers/gpu/arm/bifrost-r14p0-00cet0/mali_kbase.h:void kbase_jd_done(struct kbase_jd_atom *katom, int slot_nr, ktime_t *end_timestamp,
drivers/gpu/arm/bifrost-r14p0-00cet0/mali_kbase_js.c:		ktime_t *end_timestamp)
drivers/gpu/arm/bifrost-r14p0-00cet0/mali_kbase_js.c:		ktime_t tick_diff = ktime_sub(*end_timestamp,
drivers/gpu/arm/bifrost-r14p0-00cet0/mali_kbase_js.c:		microseconds_spent = ktime_to_ns(tick_diff);
drivers/gpu/arm/bifrost-r14p0-00cet0/mali_kbase_vinstr.c:						ns_to_ktime(diff),
drivers/gpu/arm/bifrost-r14p0-00cet0/mali_kbase_jm.c:		struct kbase_jd_atom *katom, ktime_t *end_timestamp)
drivers/gpu/arm/bifrost-r14p0-00cet0/mali_kbase_hwaccess_jm.h:void kbase_backend_reset(struct kbase_device *kbdev, ktime_t *end_timestamp);
drivers/gpu/host1x/cdma.c:	cdma->timeout.start_ktime = ktime_get();
drivers/gpu/host1x/cdma.h:	ktime_t start_ktime;		/* starting time */
drivers/gpu/drm/msm/msm_gpu.h:		ktime_t time;
drivers/gpu/drm/msm/msm_drv.h:int msm_gem_cpu_prep(struct drm_gem_object *obj, uint32_t op, ktime_t *timeout);
drivers/gpu/drm/msm/msm_drv.h:static inline unsigned long timeout_to_jiffies(const ktime_t *timeout)
drivers/gpu/drm/msm/msm_drv.h:	ktime_t now = ktime_get();
drivers/gpu/drm/msm/msm_drv.h:	if (ktime_compare(*timeout, now) < 0) {
drivers/gpu/drm/msm/msm_drv.h:		ktime_t rem = ktime_sub(*timeout, now);
drivers/gpu/drm/msm/msm_drv.h:		struct timespec ts = ktime_to_timespec(rem);
drivers/gpu/drm/msm/msm_fence.h:		ktime_t *timeout, bool interruptible);
drivers/gpu/drm/msm/msm_drv.c:static inline ktime_t to_ktime(struct drm_msm_timespec timeout)
drivers/gpu/drm/msm/msm_drv.c:	return ktime_set(timeout.tv_sec, timeout.tv_nsec);
drivers/gpu/drm/msm/msm_drv.c:	ktime_t timeout = to_ktime(args->timeout);
drivers/gpu/drm/msm/msm_drv.c:	ktime_t timeout = to_ktime(args->timeout);
drivers/gpu/drm/msm/msm_gem.c:int msm_gem_cpu_prep(struct drm_gem_object *obj, uint32_t op, ktime_t *timeout)
drivers/gpu/drm/msm/mdp/mdp5/mdp5_kms.c:			       ktime_t *stime, ktime_t *etime,
drivers/gpu/drm/msm/mdp/mdp5/mdp5_kms.c:		*stime = ktime_get();
drivers/gpu/drm/msm/mdp/mdp5/mdp5_kms.c:		*etime = ktime_get();
drivers/gpu/drm/msm/msm_gpu.c:	ktime_t time;
drivers/gpu/drm/msm/msm_gpu.c:	time = ktime_get();
drivers/gpu/drm/msm/msm_gpu.c:	elapsed = ktime_to_us(ktime_sub(time, gpu->last_sample.time));
drivers/gpu/drm/msm/msm_gpu.c:	gpu->last_sample.time = ktime_get();
drivers/gpu/drm/msm/msm_fence.c:		ktime_t *timeout, bool interruptible)
drivers/gpu/drm/omapdrm/dss/rfbi.c:#include <linux/ktime.h>
drivers/gpu/drm/omapdrm/dss/pll.c:	ktime_t wait;
drivers/gpu/drm/omapdrm/dss/pll.c:		wait = ns_to_ktime(1000 * 1000);
drivers/gpu/drm/omapdrm/dss/dsi.c:	ktime_t perf_setup_time;
drivers/gpu/drm/omapdrm/dss/dsi.c:	ktime_t perf_start_time;
drivers/gpu/drm/omapdrm/dss/dsi.c:	ktime_t wait;
drivers/gpu/drm/omapdrm/dss/dsi.c:		wait = ns_to_ktime(1000 * 1000);
drivers/gpu/drm/omapdrm/dss/dsi.c:	dsi->perf_setup_time = ktime_get();
drivers/gpu/drm/omapdrm/dss/dsi.c:	dsi->perf_start_time = ktime_get();
drivers/gpu/drm/omapdrm/dss/dsi.c:	ktime_t t, setup_time, trans_time;
drivers/gpu/drm/omapdrm/dss/dsi.c:	t = ktime_get();
drivers/gpu/drm/omapdrm/dss/dsi.c:	setup_time = ktime_sub(dsi->perf_start_time, dsi->perf_setup_time);
drivers/gpu/drm/omapdrm/dss/dsi.c:	setup_us = (u32)ktime_to_us(setup_time);
drivers/gpu/drm/omapdrm/dss/dsi.c:	trans_time = ktime_sub(t, dsi->perf_start_time);
drivers/gpu/drm/omapdrm/dss/dsi.c:	trans_us = (u32)ktime_to_us(trans_time);
drivers/gpu/drm/omapdrm/dss/dsi.c:		ktime_t wait = ns_to_ktime(1000 * 1000);
drivers/gpu/drm/panel/panel-panasonic-vvx10f034n00.c:	ktime_t earliest_wake;
drivers/gpu/drm/panel/panel-panasonic-vvx10f034n00.c:	wuxga_nt->earliest_wake = ktime_add_ms(ktime_get_real(), MIN_POFF_MS);
drivers/gpu/drm/panel/panel-panasonic-vvx10f034n00.c:	enablewait = ktime_ms_delta(wuxga_nt->earliest_wake, ktime_get_real());
drivers/gpu/drm/vc4/vc4_drv.h:			    ktime_t *stime, ktime_t *etime,
drivers/gpu/drm/vc4/vc4_crtc.c:	ktime_t t_vblank;
drivers/gpu/drm/vc4/vc4_crtc.c:			    ktime_t *stime, ktime_t *etime,
drivers/gpu/drm/vc4/vc4_crtc.c:		*stime = ktime_get();
drivers/gpu/drm/vc4/vc4_crtc.c:		*etime = ktime_get();
drivers/gpu/drm/vc4/vc4_crtc.c:		vc4_crtc->t_vblank = ktime_get();
drivers/gpu/drm/sti/sti_plane.c:	ktime_t now;
drivers/gpu/drm/sti/sti_plane.c:	now = ktime_get();
drivers/gpu/drm/sti/sti_plane.c:	ms_since_last = ktime_to_ms(ktime_sub(now, fps->last_timestamp));
drivers/gpu/drm/sti/sti_plane.h:	ktime_t	     last_timestamp;
drivers/gpu/drm/drm_irq.c:	 * interrupt and assign 0 for now, to mark the vblanktimestamp as invalid.
drivers/gpu/drm/drm_irq.c:	 * for now, to mark the vblanktimestamp as invalid.
drivers/gpu/drm/drm_irq.c:	ktime_t stime, etime;
drivers/gpu/drm/drm_irq.c:		duration_ns = ktime_to_ns(etime) - ktime_to_ns(stime);
drivers/gpu/drm/drm_irq.c:		etime = ktime_mono_to_real(etime);
drivers/gpu/drm/drm_irq.c:	tv_etime = ktime_to_timeval(etime);
drivers/gpu/drm/drm_irq.c:	etime = ktime_sub_ns(etime, delta_ns);
drivers/gpu/drm/drm_irq.c:	*vblank_time = ktime_to_timeval(etime);
drivers/gpu/drm/drm_irq.c:	ktime_t now;
drivers/gpu/drm/drm_irq.c:	now = drm_timestamp_monotonic ? ktime_get() : ktime_get_real();
drivers/gpu/drm/drm_irq.c:	return ktime_to_timeval(now);
drivers/gpu/drm/drm_irq.c: * @vblanktime: Pointer to struct timeval to receive the vblank timestamp.
drivers/gpu/drm/drm_irq.c:				     struct timeval *vblanktime)
drivers/gpu/drm/drm_irq.c:		*vblanktime = (struct timeval) { 0 };
drivers/gpu/drm/drm_irq.c:		*vblanktime = vblank->time;
drivers/gpu/drm/drm_irq.c: * @vblanktime: Pointer to struct timeval to receive the vblank timestamp.
drivers/gpu/drm/drm_irq.c:				   struct timeval *vblanktime)
drivers/gpu/drm/drm_irq.c:					 vblanktime);
drivers/gpu/drm/i915/intel_uncore.c:			       ktime_set(0, NSEC_PER_MSEC),
drivers/gpu/drm/i915/intel_pm.c:	dev_priv->ips.last_time2 = ktime_get_raw_ns();
drivers/gpu/drm/i915/intel_pm.c:	now = ktime_get_raw_ns();
drivers/gpu/drm/i915/intel_drv.h:		ktime_t start_vbl_time;
drivers/gpu/drm/i915/intel_drv.h:	ktime_t panel_power_off_time;
drivers/gpu/drm/i915/intel_sprite.c:	crtc->debug.start_vbl_time = ktime_get();
drivers/gpu/drm/i915/intel_sprite.c:	ktime_t end_vbl_time = ktime_get();
drivers/gpu/drm/i915/intel_sprite.c:			  ktime_us_delta(end_vbl_time, crtc->debug.start_vbl_time),
drivers/gpu/drm/i915/i915_gem_request.c:		*timeout += ktime_get_raw_ns();
drivers/gpu/drm/i915/i915_gem_request.c:		*timeout -= ktime_get_raw_ns();
drivers/gpu/drm/i915/i915_gem_request.c:		 * Apparently ktime isn't accurate enough and occasionally has a
drivers/gpu/drm/i915/i915_gem_request.c:		 * bit of mismatch in the jiffies<->nsecs<->ktime loop. So patch
drivers/gpu/drm/i915/i915_gem_request.c:		 * This is a regrssion from the timespec->ktime conversion.
drivers/gpu/drm/i915/i915_irq.c:				    ktime_t *stime, ktime_t *etime,
drivers/gpu/drm/i915/i915_irq.c:		*stime = ktime_get();
drivers/gpu/drm/i915/i915_irq.c:		*etime = ktime_get();
drivers/gpu/drm/i915/intel_dp.c:	ktime_t panel_power_on_time;
drivers/gpu/drm/i915/intel_dp.c:	panel_power_on_time = ktime_get_boottime();
drivers/gpu/drm/i915/intel_dp.c:	panel_power_off_duration = ktime_ms_delta(panel_power_on_time, intel_dp->panel_power_off_time);
drivers/gpu/drm/i915/intel_dp.c:		intel_dp->panel_power_off_time = ktime_get_boottime();
drivers/gpu/drm/i915/intel_dp.c:	intel_dp->panel_power_off_time = ktime_get_boottime();
drivers/gpu/drm/i915/intel_dp.c:	intel_dp->panel_power_off_time = ktime_get_boottime();
drivers/gpu/drm/vmwgfx/vmwgfx_marker.c:	queue->lag_time = ktime_get_raw_ns();
drivers/gpu/drm/vmwgfx/vmwgfx_marker.c:	marker->submitted = ktime_get_raw_ns();
drivers/gpu/drm/vmwgfx/vmwgfx_marker.c:	now = ktime_get_raw_ns();
drivers/gpu/drm/vmwgfx/vmwgfx_marker.c:	now = ktime_get_raw_ns();
drivers/gpu/drm/bridge/tc358767.c:	ktime_t timeout = ktime_add_us(ktime_get(), timeout_us);
drivers/gpu/drm/bridge/tc358767.c:		if (timeout_us && ktime_compare(ktime_get(), timeout) > 0) {
drivers/gpu/drm/radeon/radeon_mode.h:				      ktime_t *stime, ktime_t *etime,
drivers/gpu/drm/radeon/radeon_drv.c:				      ktime_t *stime, ktime_t *etime,
drivers/gpu/drm/radeon/radeon_display.c:			       ktime_t *stime, ktime_t *etime,
drivers/gpu/drm/radeon/radeon_display.c:		*stime = ktime_get();
drivers/gpu/drm/radeon/radeon_display.c:		*etime = ktime_get();
drivers/gpu/drm/amd/amdgpu/amdgpu_mode.h:			       ktime_t *stime, ktime_t *etime,
drivers/gpu/drm/amd/amdgpu/amdgpu_gem.c:#include <linux/ktime.h>
drivers/gpu/drm/amd/amdgpu/amdgpu_gem.c:	ktime_t timeout;
drivers/gpu/drm/amd/amdgpu/amdgpu_gem.c:	timeout = ktime_sub(ns_to_ktime(timeout_ns), ktime_get());
drivers/gpu/drm/amd/amdgpu/amdgpu_gem.c:	if (ktime_to_ns(timeout) < 0)
drivers/gpu/drm/amd/amdgpu/amdgpu_gem.c:	timeout_jiffies = nsecs_to_jiffies(ktime_to_ns(timeout));
drivers/gpu/drm/amd/amdgpu/amdgpu_display.c:			       ktime_t *stime, ktime_t *etime,
drivers/gpu/drm/amd/amdgpu/amdgpu_display.c:		*stime = ktime_get();
drivers/gpu/drm/amd/amdgpu/amdgpu_display.c:		*etime = ktime_get();
drivers/gpu/drm/amd/amdgpu/dce_virtual.c:	hrtimer_start(vblank_timer, ktime_set(0, DCE_VIRTUAL_VBLANK_PERIOD), HRTIMER_MODE_REL);
drivers/gpu/drm/amd/amdgpu/dce_virtual.c:		hrtimer_set_expires(&adev->mode_info.vblank_timer, ktime_set(0, DCE_VIRTUAL_VBLANK_PERIOD));
drivers/gpu/drm/amd/amdgpu/dce_virtual.c:		hrtimer_start(&adev->mode_info.vblank_timer, ktime_set(0, DCE_VIRTUAL_VBLANK_PERIOD), HRTIMER_MODE_REL);
drivers/gpu/drm/amd/amdgpu/amdgpu_cs.c:	time_us = ktime_to_us(ktime_get());
drivers/gpu/drm/nouveau/nouveau_fence.c:#include <linux/ktime.h>
drivers/gpu/drm/nouveau/nouveau_fence.c:		ktime_t kt;
drivers/gpu/drm/nouveau/nouveau_fence.c:		kt = ktime_set(0, sleep_time);
drivers/gpu/drm/nouveau/nouveau_display.h:				unsigned int, int *, int *, ktime_t *,
drivers/gpu/drm/nouveau/nouveau_display.h:				ktime_t *, const struct drm_display_mode *);
drivers/gpu/drm/nouveau/nvkm/engine/disp/rootnv50.c:		args->v0.time[0] = ktime_to_ns(ktime_get());
drivers/gpu/drm/nouveau/nvkm/engine/disp/rootnv50.c:		args->v0.time[1] = ktime_to_ns(ktime_get());
drivers/gpu/drm/nouveau/nvkm/engine/disp/rootnv04.c:		args->v0.time[0] = ktime_to_ns(ktime_get());
drivers/gpu/drm/nouveau/nvkm/engine/disp/rootnv04.c:		args->v0.time[1] = ktime_to_ns(ktime_get());
drivers/gpu/drm/nouveau/nvkm/engine/disp/rootgf119.c:		args->v0.time[0] = ktime_to_ns(ktime_get());
drivers/gpu/drm/nouveau/nvkm/engine/disp/rootgf119.c:		args->v0.time[1] = ktime_to_ns(ktime_get());
drivers/gpu/drm/nouveau/nvkm/engine/device/base.c:	time = ktime_to_us(ktime_get());
drivers/gpu/drm/nouveau/nvkm/engine/device/base.c:	time = ktime_to_us(ktime_get()) - time;
drivers/gpu/drm/nouveau/nvkm/engine/device/base.c:	time = ktime_to_us(ktime_get());
drivers/gpu/drm/nouveau/nvkm/engine/device/base.c:	time = ktime_to_us(ktime_get()) - time;
drivers/gpu/drm/nouveau/nvkm/engine/device/base.c:	time = ktime_to_us(ktime_get());
drivers/gpu/drm/nouveau/nvkm/engine/device/base.c:	time = ktime_to_us(ktime_get()) - time;
drivers/gpu/drm/nouveau/nvkm/subdev/timer/base.c:	tmr->func->time(tmr, ktime_to_ns(ktime_get()));
drivers/gpu/drm/nouveau/nvkm/core/object.c:	time = ktime_to_us(ktime_get());
drivers/gpu/drm/nouveau/nvkm/core/object.c:	time = ktime_to_us(ktime_get()) - time;
drivers/gpu/drm/nouveau/nvkm/core/object.c:	time = ktime_to_us(ktime_get());
drivers/gpu/drm/nouveau/nvkm/core/object.c:	time = ktime_to_us(ktime_get()) - time;
drivers/gpu/drm/nouveau/nvkm/core/object.c:	time = ktime_to_us(ktime_get());
drivers/gpu/drm/nouveau/nvkm/core/object.c:	time = ktime_to_us(ktime_get()) - time;
drivers/gpu/drm/nouveau/nvkm/core/engine.c:		time = ktime_to_us(ktime_get());
drivers/gpu/drm/nouveau/nvkm/core/engine.c:		time = ktime_to_us(ktime_get()) - time;
drivers/gpu/drm/nouveau/nvkm/core/subdev.c:	time = ktime_to_us(ktime_get());
drivers/gpu/drm/nouveau/nvkm/core/subdev.c:	time = ktime_to_us(ktime_get()) - time;
drivers/gpu/drm/nouveau/nvkm/core/subdev.c:	time = ktime_to_us(ktime_get());
drivers/gpu/drm/nouveau/nvkm/core/subdev.c:	time = ktime_to_us(ktime_get()) - time;
drivers/gpu/drm/nouveau/nvkm/core/subdev.c:	time = ktime_to_us(ktime_get());
drivers/gpu/drm/nouveau/nvkm/core/subdev.c:		time = ktime_to_us(ktime_get());
drivers/gpu/drm/nouveau/nvkm/core/subdev.c:		time = ktime_to_us(ktime_get()) - time;
drivers/gpu/drm/nouveau/nvkm/core/subdev.c:	time = ktime_to_us(ktime_get()) - time;
drivers/gpu/drm/nouveau/nvkm/core/subdev.c:		time = ktime_to_us(ktime_get());
drivers/gpu/drm/nouveau/nvkm/core/subdev.c:		time = ktime_to_us(ktime_get()) - time;
drivers/gpu/drm/nouveau/nouveau_display.c:				ktime_t *stime, ktime_t *etime)
drivers/gpu/drm/nouveau/nouveau_display.c:	if (stime) *stime = ns_to_ktime(args.scan.time[0]);
drivers/gpu/drm/nouveau/nouveau_display.c:	if (etime) *etime = ns_to_ktime(args.scan.time[1]);
drivers/gpu/drm/nouveau/nouveau_display.c:			   ktime_t *stime, ktime_t *etime,
drivers/gpu/drm/tilcdc/tilcdc_crtc.c:	ktime_t last_vblank;
drivers/gpu/drm/tilcdc/tilcdc_crtc.c:	tilcdc_crtc->last_vblank = ktime_set(0, 0);
drivers/gpu/drm/tilcdc/tilcdc_crtc.c:	if (crtc->hwmode.vrefresh && ktime_to_ns(tilcdc_crtc->last_vblank)) {
drivers/gpu/drm/tilcdc/tilcdc_crtc.c:		ktime_t next_vblank;
drivers/gpu/drm/tilcdc/tilcdc_crtc.c:		next_vblank = ktime_add_us(tilcdc_crtc->last_vblank,
drivers/gpu/drm/tilcdc/tilcdc_crtc.c:		tdiff = ktime_to_us(ktime_sub(next_vblank, ktime_get()));
drivers/gpu/drm/tilcdc/tilcdc_crtc.c:		ktime_t now;
drivers/gpu/drm/tilcdc/tilcdc_crtc.c:		now = ktime_get();
drivers/idle/i7300_idle.c:#include <linux/ktime.h>
drivers/idle/i7300_idle.c:static ktime_t start_ktime;
drivers/idle/i7300_idle.c:	ktime_t now_ktime;
drivers/idle/i7300_idle.c:	static ktime_t idle_begin_time;
drivers/idle/i7300_idle.c:		idle_begin_time = ktime_get();
drivers/idle/i7300_idle.c:		now_ktime = ktime_get();
drivers/idle/i7300_idle.c:		idle_begin_time = now_ktime;
drivers/idle/i7300_idle.c:		start_ktime = now_ktime;
drivers/idle/i7300_idle.c:			now_ktime = ktime_get();
drivers/idle/i7300_idle.c:			idle_duration_us = ktime_to_us(ktime_sub
drivers/idle/i7300_idle.c:						(now_ktime, idle_begin_time));
drivers/idle/i7300_idle.c:				ktime_t idle_ktime;
drivers/idle/i7300_idle.c:				idle_ktime = ktime_sub(now_ktime, start_ktime);
drivers/idle/i7300_idle.c:				total_us += ktime_to_us(idle_ktime);
drivers/phy/phy-qcom-ufs-i.h:	ktime_t timeout = ktime_add_us(ktime_get(), timeout_us); \
drivers/phy/phy-qcom-ufs-i.h:		if (timeout_us && ktime_compare(ktime_get(), timeout) > 0) { \
drivers/remoteproc/hisp_remoteproc.c:    np = of_find_compatible_node(NULL, NULL, "hisilicon,prktimer");
drivers/remoteproc/hisp_remoteproc.c:        printk("NOT FOUND device node 'hisilicon,prktimer'!\n");
drivers/ptp/ptp_chardev.c:		ts = ktime_to_timespec64(xtstamp.device);
drivers/ptp/ptp_chardev.c:		ts = ktime_to_timespec64(xtstamp.sys_realtime);
drivers/ptp/ptp_chardev.c:		ts = ktime_to_timespec64(xtstamp.sys_monoraw);
drivers/ptp/ptp_clock.c:		ktime_t kt;
drivers/ptp/ptp_clock.c:		kt = timespec64_to_ktime(ts);
drivers/ptp/ptp_clock.c:		delta = ktime_to_ns(kt);
drivers/hwtracing/stm/heartbeat.c:		hrtimer_forward_now(hr, ms_to_ktime(interval_ms));
drivers/hwtracing/stm/heartbeat.c:	hrtimer_start(&heartbeat->hrtimer, ms_to_ktime(interval_ms),
drivers/connector/cn_proc.c:#include <linux/ktime.h>
drivers/connector/cn_proc.c:	ev->timestamp_ns = ktime_get_ns();
drivers/connector/cn_proc.c:	ev->timestamp_ns = ktime_get_ns();
drivers/connector/cn_proc.c:	ev->timestamp_ns = ktime_get_ns();
drivers/connector/cn_proc.c:	ev->timestamp_ns = ktime_get_ns();
drivers/connector/cn_proc.c:	ev->timestamp_ns = ktime_get_ns();
drivers/connector/cn_proc.c:	ev->timestamp_ns = ktime_get_ns();
drivers/connector/cn_proc.c:	ev->timestamp_ns = ktime_get_ns();
drivers/connector/cn_proc.c:	ev->timestamp_ns = ktime_get_ns();
drivers/connector/cn_proc.c:	ev->timestamp_ns = ktime_get_ns();
drivers/mfd/cros_ec_spi.c:	ec_spi->last_transfer_ns = ktime_get_ns();
drivers/mfd/cros_ec_spi.c:		delay = ktime_get_ns() - ec_spi->last_transfer_ns;
drivers/mfd/cros_ec_spi.c:		delay = ktime_get_ns() - ec_spi->last_transfer_ns;
drivers/mfd/cros_ec_spi.c:	ec_spi->last_transfer_ns = ktime_get_ns();
drivers/tty/serial/sirfsoc_uart.c:			ns_to_ktime(sirfport->rx_period_time),
drivers/tty/serial/sirfsoc_uart.c:	hrtimer_forward_now(hrt, ns_to_ktime(sirfport->rx_period_time));
drivers/tty/serial/bfin_uart.c:			curr = ktime_get_ns();
drivers/tty/serial/bfin_uart.c:				anomaly_start = ktime_get_ns();
drivers/ntb/test/ntb_perf.c:	ktime_t kstart, kstop, kdiff;
drivers/ntb/test/ntb_perf.c:	kstart = ktime_get();
drivers/ntb/test/ntb_perf.c:	kstop = ktime_get();
drivers/ntb/test/ntb_perf.c:	kdiff = ktime_sub(kstop, kstart);
drivers/ntb/test/ntb_perf.c:	diff_us = ktime_to_us(kdiff);
drivers/platform/x86/msi-wmi.c:static ktime_t last_pressed;
drivers/platform/x86/msi-wmi.c:			ktime_t cur = ktime_get_real();
drivers/platform/x86/msi-wmi.c:			ktime_t diff = ktime_sub(cur, last_pressed);
drivers/platform/x86/msi-wmi.c:			if (ktime_to_us(diff) < 1000 * 50) {
drivers/platform/x86/msi-wmi.c:					 key->code, ktime_to_us(diff));
drivers/platform/x86/msi-wmi.c:	last_pressed = ktime_set(0, 0);
drivers/video/fbdev/hisi/dss/backlight/lm36274.c:		hrtimer_start(&lm36274_g_chip->bl_resume_hrtimer, ktime_set((g_resume_bl_duration + PROTECT_BL_RESUME_TIMMER) / 1000,
drivers/video/fbdev/hisi/dss/hisi_fb_bl.c:		hisifd->backlight.bl_timestamp = ktime_get();
drivers/video/fbdev/hisi/dss/hisi_fb.h:	ktime_t vsync_timestamp;
drivers/video/fbdev/hisi/dss/hisi_fb.h:	ktime_t vsync_timestamp_prev;
drivers/video/fbdev/hisi/dss/hisi_fb.h:	ktime_t vactive_timestamp;
drivers/video/fbdev/hisi/dss/hisi_fb.h:	ktime_t bl_timestamp;
drivers/video/fbdev/hisi/dss/hisi_fb_vsync.c:	ktime_t pre_vsync_timestamp;
drivers/video/fbdev/hisi/dss/hisi_fb_vsync.c:	vsync_ctrl->vsync_timestamp = ktime_get();
drivers/video/fbdev/hisi/dss/hisi_fb_vsync.c:			ktime_to_ns(hisifd->vsync_ctrl.vsync_timestamp),
drivers/video/fbdev/hisi/dss/hisi_fb_vsync.c:			(ktime_to_ns(hisifd->vsync_ctrl.vsync_timestamp) - ktime_to_ns(pre_vsync_timestamp)));
drivers/video/fbdev/hisi/dss/hisi_fb_vsync.c:	ktime_t prev_timestamp)
drivers/video/fbdev/hisi/dss/hisi_fb_vsync.c:	return !ktime_equal(prev_timestamp, hisifd->vsync_ctrl.vsync_timestamp);
drivers/video/fbdev/hisi/dss/hisi_fb_vsync.c:	ktime_t prev_timestamp;
drivers/video/fbdev/hisi/dss/hisi_fb_vsync.c:			ktime_to_ns(hisifd->vsync_ctrl.vsync_timestamp), secure_ctrl->secure_event);
drivers/video/fbdev/hisi/dss/hisi_fb_vsync.c:			ktime_to_ns(hisifd->vsync_ctrl.vsync_timestamp));
drivers/video/fbdev/hisi/dss/hisi_fb_vsync.c:			ktime_to_ns(hisifd->vsync_ctrl.vsync_timestamp), secure_ctrl->secure_event);
drivers/video/fbdev/hisi/dss/hisi_fb_vsync.c:		ktime_to_ns(hisifd->vsync_ctrl.vsync_timestamp));
drivers/video/fbdev/hisi/dss/hisi_fb_vsync.c:	vsync_ctrl->vsync_timestamp = ktime_get();
drivers/video/fbdev/hisi/dss/hisi_fb_vsync.c:	vsync_ctrl->vactive_timestamp = ktime_get();
drivers/video/fbdev/hisi/dss/hisi_display_effect.c:	ktime_t current_bl_timestamp = ktime_get();
drivers/video/fbdev/hisi/dss/hisi_display_effect.c:	if (abs((int)(ktime_to_ns(hisifd->backlight.bl_timestamp) - ktime_to_ns(current_bl_timestamp))) > bl_timeinterval) {
drivers/video/fbdev/hisi/dss/hisi_display_effect.c:	ktime_t current_bl_timestamp = ktime_get();
drivers/video/fbdev/hisi/dss/hisi_display_effect.c:	if (abs((int)(ktime_to_ns(hisifd->backlight.bl_timestamp) - ktime_to_ns(current_bl_timestamp))) > bl_timeinterval) {
drivers/video/fbdev/hisi/dss/hisi_fb_esd.c:	hrtimer_start(&esd_ctrl->esd_hrtimer, ktime_set(ESD_CHECK_TIME_PERIOD / 1000,
drivers/video/fbdev/hisi/dss/hisi_fb_esd.c:		hrtimer_start(&esd_ctrl->esd_hrtimer, ktime_set(ESD_CHECK_TIME_PERIOD / 1000,
drivers/video/fbdev/hisi/dss/hisi_fb_utils.c:	ktime_get_ts(&ts);
drivers/video/fbdev/hisi/dss/hisi_fb_utils.c:	//timestamp = ktime_to_timeval(ktime_get());
drivers/video/fbdev/hisi/dss/hisi_fb_utils.c:		hrtimer_start(&hisifd->esd_ctrl.esd_hrtimer, ktime_set(ESD_CHECK_TIME_PERIOD / 1000,
drivers/video/fbdev/hisi/dss/dp/intr.c:	hrtimer_start(&dptx->dptx_hrtimer, ktime_set(DPTX_CHECK_TIME_PERIOD / 1000,
drivers/video/fbdev/hisi/dss/dp/intr.c:		hrtimer_start(&dptx->dptx_hrtimer, ktime_set(DPTX_CHECK_TIME_PERIOD / 1000,
drivers/video/fbdev/hisi/dss/hisi_overlay_utils.c:	ktime_t pre_vactive_timestamp;
drivers/video/fbdev/hisi/dss/hisi_overlay_utils.c:		vsync_ctrl->vactive_timestamp = ktime_get();
drivers/video/fbdev/hisi/dss/hisi_overlay_utils.c:			ktime_to_ns(vsync_ctrl->vactive_timestamp),
drivers/video/fbdev/hisi/dss/hisi_overlay_utils.c:			(ktime_to_ns(vsync_ctrl->vactive_timestamp) - ktime_to_ns(pre_vactive_timestamp)));
drivers/video/fbdev/hisi/dss/hisi_overlay_online.c:	ktime_t prepare_timestamp;
drivers/video/fbdev/hisi/dss/hisi_overlay_online.c:		prepare_timestamp = ktime_get();
drivers/video/fbdev/hisi/dss/hisi_overlay_online.c:		if ((ktime_to_ns(prepare_timestamp) > ktime_to_ns(hisifd->vsync_ctrl.vsync_timestamp))
drivers/video/fbdev/hisi/dss/hisi_overlay_online.c:			&& ((ktime_to_ns(prepare_timestamp) - ktime_to_ns(hisifd->vsync_ctrl.vsync_timestamp)) < (vsync_timediff - timestamp))
drivers/video/fbdev/hisi/dss/hisi_overlay_online.c:			&& (ktime_to_ns(hisifd->vsync_ctrl.vsync_timestamp_prev) != ktime_to_ns(hisifd->vsync_ctrl.vsync_timestamp))) {
drivers/video/fbdev/hisi/dss/hisi_overlay_online.c:				vsync_timediff, ktime_to_ns(prepare_timestamp) - ktime_to_ns(hisifd->vsync_ctrl.vsync_timestamp));
drivers/video/fbdev/hisi/dss/hisi_display_effect_kirin970.c:	ktime_get_ts(&ts);
drivers/video/fbdev/hisi/dss/hisi_display_effect_kirin970.c:	ktime_get_ts(&ts);
drivers/video/fbdev/hisi/dss/hisi_fb_debug.c:	static ktime_t underflow_timestamp[UNDERFLOW_EXPIRE_COUNT];
drivers/video/fbdev/hisi/dss/hisi_fb_debug.c:		underflow_timestamp[underflow_index] = ktime_get();
drivers/video/fbdev/hisi/dss/hisi_fb_debug.c:		underflow_timestamp[UNDERFLOW_EXPIRE_COUNT - 1] = ktime_get();
drivers/video/fbdev/hisi/dss/hisi_fb_debug.c:		underflow_msecs = ktime_to_ms(underflow_timestamp[UNDERFLOW_EXPIRE_COUNT - 1]) - ktime_to_ms(underflow_timestamp[0]);
drivers/video/fbdev/omap2/omapfb/dss/rfbi.c:#include <linux/ktime.h>
drivers/video/fbdev/omap2/omapfb/dss/pll.c:	ktime_t wait;
drivers/video/fbdev/omap2/omapfb/dss/pll.c:		wait = ns_to_ktime(1000 * 1000);
drivers/video/fbdev/omap2/omapfb/dss/dsi.c:	ktime_t perf_setup_time;
drivers/video/fbdev/omap2/omapfb/dss/dsi.c:	ktime_t perf_start_time;
drivers/video/fbdev/omap2/omapfb/dss/dsi.c:	ktime_t wait;
drivers/video/fbdev/omap2/omapfb/dss/dsi.c:		wait = ns_to_ktime(1000 * 1000);
drivers/video/fbdev/omap2/omapfb/dss/dsi.c:	dsi->perf_setup_time = ktime_get();
drivers/video/fbdev/omap2/omapfb/dss/dsi.c:	dsi->perf_start_time = ktime_get();
drivers/video/fbdev/omap2/omapfb/dss/dsi.c:	ktime_t t, setup_time, trans_time;
drivers/video/fbdev/omap2/omapfb/dss/dsi.c:	t = ktime_get();
drivers/video/fbdev/omap2/omapfb/dss/dsi.c:	setup_time = ktime_sub(dsi->perf_start_time, dsi->perf_setup_time);
drivers/video/fbdev/omap2/omapfb/dss/dsi.c:	setup_us = (u32)ktime_to_us(setup_time);
drivers/video/fbdev/omap2/omapfb/dss/dsi.c:	trans_time = ktime_sub(t, dsi->perf_start_time);
drivers/video/fbdev/omap2/omapfb/dss/dsi.c:	trans_us = (u32)ktime_to_us(trans_time);
drivers/video/fbdev/omap2/omapfb/dss/dsi.c:		ktime_t wait = ns_to_ktime(1000 * 1000);
drivers/mtd/tests/speedtest.c:#include <linux/ktime.h>
drivers/mtd/tests/speedtest.c:static ktime_t start, finish;
drivers/mtd/tests/speedtest.c:	start = ktime_get();
drivers/mtd/tests/speedtest.c:	finish = ktime_get();
drivers/mtd/tests/speedtest.c:	ms = ktime_ms_delta(finish, start);
drivers/mtd/tests/torturetest.c:#include <linux/ktime.h>
drivers/mtd/tests/torturetest.c:static ktime_t start, finish;
drivers/mtd/tests/torturetest.c:	start = ktime_get();
drivers/mtd/tests/torturetest.c:	finish = ktime_get();
drivers/mtd/tests/torturetest.c:			ms = ktime_ms_delta(finish, start);
drivers/firewire/core-cdev.c:	case CLOCK_MONOTONIC:     ktime_get_ts(&ts);	break;
drivers/firewire/nosy.c:	ktime_get_real_ts64(&ts64);
drivers/firewire/nosy.c:	ktime_get_real_ts64(&ts64);
drivers/i2c/busses/i2c-eg20t.c:#include <linux/ktime.h>
drivers/i2c/busses/i2c-s3c2410.c:	ktime_t start, now;
drivers/i2c/busses/i2c-s3c2410.c:	start = now = ktime_get();
drivers/i2c/busses/i2c-s3c2410.c:	       ktime_us_delta(now, start) < S3C2410_IDLE_TIMEOUT) {
drivers/i2c/busses/i2c-s3c2410.c:		now = ktime_get();
drivers/i2c/busses/i2c-xlr.c:	unsigned long timeout, stoptime, checktime;
drivers/i2c/busses/i2c-xlr.c:		checktime = jiffies;
drivers/i2c/busses/i2c-xlr.c:		timedout = time_after(checktime, stoptime);
drivers/i2c/busses/i2c-xlr.c:	unsigned long timeout, stoptime, checktime;
drivers/i2c/busses/i2c-xlr.c:		checktime = jiffies;
drivers/i2c/busses/i2c-xlr.c:		timedout = time_after(checktime, stoptime);
drivers/i2c/busses/i2c-digicolor.c:	unsigned int clocktime;
drivers/i2c/busses/i2c-digicolor.c:	clocktime = DIV_ROUND_UP(clk_rate, 64 * i2c->frequency);
drivers/i2c/busses/i2c-digicolor.c:	if (clocktime < 1 || clocktime > 0xff) {
drivers/i2c/busses/i2c-digicolor.c:	writeb_relaxed(clocktime - 1, i2c->regs + II_CLOCKTIME);
drivers/base/power/domain.c:	ktime_t time_start;
drivers/base/power/domain.c:	time_start = ktime_get();
drivers/base/power/domain.c:	elapsed_ns = ktime_to_ns(ktime_sub(ktime_get(), time_start));
drivers/base/power/domain.c:	ktime_t time_start;
drivers/base/power/domain.c:	time_start = ktime_get();
drivers/base/power/domain.c:	elapsed_ns = ktime_to_ns(ktime_sub(ktime_get(), time_start));
drivers/base/power/domain.c:	ktime_t time_start;
drivers/base/power/domain.c:		time_start = ktime_get();
drivers/base/power/domain.c:		elapsed_ns = ktime_to_ns(ktime_sub(ktime_get(), time_start));
drivers/base/power/domain.c:	ktime_t time_start;
drivers/base/power/domain.c:		time_start = ktime_get();
drivers/base/power/domain.c:		elapsed_ns = ktime_to_ns(ktime_sub(ktime_get(), time_start));
drivers/base/power/wakeup.c:			ktime_add(deleted_ws.total_time, ws->total_time);
drivers/base/power/wakeup.c:			ktime_add(deleted_ws.prevent_sleep_time,
drivers/base/power/wakeup.c:			ktime_compare(deleted_ws.max_time, ws->max_time) > 0 ?
drivers/base/power/wakeup.c:	ws->last_time = ktime_get();
drivers/base/power/wakeup.c:    ktime_t active_time;
drivers/base/power/wakeup.c:            ktime_t now = ktime_get();
drivers/base/power/wakeup.c:            active_time = ktime_sub(now, ws->last_time);
drivers/base/power/wakeup.c:            pr_info("[wake_unlockAll]wakeup source: %s %d msec.\n", ws->name, ktime_to_ms(active_time));
drivers/base/power/wakeup.c:            if (ktime_to_ms(active_time) <= msec) continue;
drivers/base/power/wakeup.c:	ws->last_time = ktime_get();
drivers/base/power/wakeup.c:static void update_prevent_sleep_time(struct wakeup_source *ws, ktime_t now)
drivers/base/power/wakeup.c:	ktime_t delta = ktime_sub(now, ws->start_prevent_time);
drivers/base/power/wakeup.c:	ws->prevent_sleep_time = ktime_add(ws->prevent_sleep_time, delta);
drivers/base/power/wakeup.c:					     ktime_t now) {}
drivers/base/power/wakeup.c:	ktime_t duration;
drivers/base/power/wakeup.c:	ktime_t now;
drivers/base/power/wakeup.c:	now = ktime_get();
drivers/base/power/wakeup.c:	duration = ktime_sub(now, ws->last_time);
drivers/base/power/wakeup.c:	ws->total_time = ktime_add(ws->total_time, duration);
drivers/base/power/wakeup.c:	if (ktime_to_ns(duration) > ktime_to_ns(ws->max_time))
drivers/base/power/wakeup.c:			    ktime_to_ns(ws->last_time) >
drivers/base/power/wakeup.c:			    ktime_to_ns(last_active_ws->last_time))) {
drivers/base/power/wakeup.c:			    ktime_to_ns(ws->last_time) >
drivers/base/power/wakeup.c:			    ktime_to_ns(last_activity_ws->last_time))) {
drivers/base/power/wakeup.c:	ktime_t now = ktime_get();
drivers/base/power/wakeup.c:	ktime_t total_time;
drivers/base/power/wakeup.c:	ktime_t max_time;
drivers/base/power/wakeup.c:	ktime_t active_time;
drivers/base/power/wakeup.c:	ktime_t prevent_sleep_time;
drivers/base/power/wakeup.c:		ktime_t now = ktime_get();
drivers/base/power/wakeup.c:		active_time = ktime_sub(now, ws->last_time);
drivers/base/power/wakeup.c:		total_time = ktime_add(total_time, active_time);
drivers/base/power/wakeup.c:			prevent_sleep_time = ktime_add(prevent_sleep_time,
drivers/base/power/wakeup.c:				ktime_sub(now, ws->start_prevent_time));
drivers/base/power/wakeup.c:		active_time = ktime_set(0, 0);
drivers/base/power/wakeup.c:		   ktime_to_ms(active_time), ktime_to_ms(total_time),
drivers/base/power/wakeup.c:		   ktime_to_ms(max_time), ktime_to_ms(ws->last_time),
drivers/base/power/wakeup.c:		   ktime_to_ms(prevent_sleep_time));
drivers/base/power/wakeup.c:	ktime_t total_time;
drivers/base/power/wakeup.c:	ktime_t max_time;
drivers/base/power/wakeup.c:	ktime_t active_time;
drivers/base/power/wakeup.c:	ktime_t prevent_sleep_time;
drivers/base/power/wakeup.c:		ktime_t now = ktime_get();
drivers/base/power/wakeup.c:		active_time = ktime_sub(now, ws->last_time);
drivers/base/power/wakeup.c:		total_time = ktime_add(total_time, active_time);
drivers/base/power/wakeup.c:			prevent_sleep_time = ktime_add(prevent_sleep_time,
drivers/base/power/wakeup.c:				ktime_sub(now, ws->start_prevent_time));
drivers/base/power/wakeup.c:				ktime_to_ms(active_time), ktime_to_ms(total_time),
drivers/base/power/wakeup.c:				ktime_to_ms(max_time), ktime_to_ms(ws->last_time),
drivers/base/power/wakeup.c:				ktime_to_ms(prevent_sleep_time));
drivers/base/power/main.c:static ktime_t initcall_debug_start(struct device *dev)
drivers/base/power/main.c:	ktime_t calltime = ktime_set(0, 0);
drivers/base/power/main.c:		calltime = ktime_get();
drivers/base/power/main.c:static void initcall_debug_report(struct device *dev, ktime_t calltime,
drivers/base/power/main.c:	ktime_t rettime;
drivers/base/power/main.c:	rettime = ktime_get();
drivers/base/power/main.c:	nsecs = (s64) ktime_to_ns(ktime_sub(rettime, calltime));
drivers/base/power/main.c:static void dpm_show_time(ktime_t starttime, pm_message_t state, char *info)
drivers/base/power/main.c:	ktime_t calltime;
drivers/base/power/main.c:	calltime = ktime_get();
drivers/base/power/main.c:	usecs64 = ktime_to_ns(ktime_sub(calltime, starttime));
drivers/base/power/main.c:	ktime_t calltime;
drivers/base/power/main.c:	ktime_t starttime = ktime_get();
drivers/base/power/main.c:	ktime_t starttime = ktime_get();
drivers/base/power/main.c:	ktime_t starttime = ktime_get();
drivers/base/power/main.c:	ktime_t starttime = ktime_get();
drivers/base/power/main.c:	ktime_t starttime = ktime_get();
drivers/base/power/main.c:	ktime_t calltime;
drivers/base/power/main.c:	ktime_t starttime = ktime_get();
drivers/base/power/sysfs.c:		msec = ktime_to_ms(dev->power.wakeup->total_time);
drivers/base/power/sysfs.c:		msec = ktime_to_ms(dev->power.wakeup->max_time);
drivers/base/power/sysfs.c:		msec = ktime_to_ms(dev->power.wakeup->last_time);
drivers/base/power/sysfs.c:		msec = ktime_to_ms(dev->power.wakeup->prevent_sleep_time);
drivers/base/regmap/trace.h:#include <linux/ktime.h>
drivers/rtc/interface.c:		alarm->time = rtc_ktime_to_tm(rtc->aie_timer.node.expires);
drivers/rtc/interface.c:	rtc->aie_timer.node.expires = rtc_tm_to_ktime(alarm->time);
drivers/rtc/interface.c:	rtc->aie_timer.period = ktime_set(0, 0);
drivers/rtc/interface.c:	rtc->aie_timer.node.expires = rtc_tm_to_ktime(alarm->time);
drivers/rtc/interface.c:	rtc->aie_timer.period = ktime_set(0, 0);
drivers/rtc/interface.c:	if (alarm->enabled && (rtc_tm_to_ktime(now).tv64 <
drivers/rtc/interface.c:		ktime_t now, onesec;
drivers/rtc/interface.c:		onesec = ktime_set(1, 0);
drivers/rtc/interface.c:		now = rtc_tm_to_ktime(tm);
drivers/rtc/interface.c:		rtc->uie_rtctimer.node.expires = ktime_add(now, onesec);
drivers/rtc/interface.c:		rtc->uie_rtctimer.period = ktime_set(1, 0);
drivers/rtc/interface.c:	ktime_t period;
drivers/rtc/interface.c:	period = ktime_set(0, NSEC_PER_SEC/rtc->irq_freq);
drivers/rtc/interface.c:		ktime_t period = ktime_set(0, NSEC_PER_SEC / rtc->irq_freq);
drivers/rtc/interface.c:		alarm.time = rtc_ktime_to_tm(timer->node.expires);
drivers/rtc/interface.c:		alarm.time = rtc_ktime_to_tm(next->expires);
drivers/rtc/interface.c:	ktime_t now;
drivers/rtc/interface.c:	now = rtc_tm_to_ktime(tm);
drivers/rtc/interface.c:		if (ktime_to_ns(timer->period)) {
drivers/rtc/interface.c:			timer->node.expires = ktime_add(timer->node.expires,
drivers/rtc/interface.c:		alarm.time = rtc_ktime_to_tm(next->expires);
drivers/rtc/interface.c:			ktime_t expires, ktime_t period)
drivers/rtc/rtc-tps6586x.c:	rtc->epoch_start = mktime(2009, 1, 1, 0, 0, 0);
drivers/rtc/rtc-vr41xx.c:	epoch_sec = mktime(epoch, 1, 1, 0, 0, 0);
drivers/rtc/rtc-vr41xx.c:	epoch_sec = mktime(epoch, 1, 1, 0, 0, 0);
drivers/rtc/rtc-vr41xx.c:	current_sec = mktime(time->tm_year + 1900, time->tm_mon + 1, time->tm_mday,
drivers/rtc/rtc-vr41xx.c:	alarm_sec = mktime(time->tm_year + 1900, time->tm_mon + 1, time->tm_mday,
drivers/rtc/rtc-pcf50633.c:	/* do like mktime does and ignore tm_wday */
drivers/rtc/rtc-lib.c:	return mktime64(tm->tm_year + 1900, tm->tm_mon + 1, tm->tm_mday,
drivers/rtc/rtc-lib.c: * Convert rtc_time to ktime
drivers/rtc/rtc-lib.c:ktime_t rtc_tm_to_ktime(struct rtc_time tm)
drivers/rtc/rtc-lib.c:	return ktime_set(rtc_tm_to_time64(&tm), 0);
drivers/rtc/rtc-lib.c:EXPORT_SYMBOL_GPL(rtc_tm_to_ktime);
drivers/rtc/rtc-lib.c: * Convert ktime to rtc_time
drivers/rtc/rtc-lib.c:struct rtc_time rtc_ktime_to_tm(ktime_t kt)
drivers/rtc/rtc-lib.c:	ts = ktime_to_timespec64(kt);
drivers/rtc/rtc-lib.c:EXPORT_SYMBOL_GPL(rtc_ktime_to_tm);
drivers/rtc/rtc-ls1x.c:	t  = mktime((t & LS1X_YEAR_MASK), ls1x_get_month(v),
drivers/rtc/rtc-test.c:	rtc_time64_to_tm(ktime_get_real_seconds(), tm);
drivers/dma-buf/sync_debug.c:			ktime_to_timespec64(fence->timestamp);
drivers/dma-buf/fence.c:	if (!ktime_to_ns(fence->timestamp)) {
drivers/dma-buf/fence.c:		fence->timestamp = ktime_get();
drivers/dma-buf/fence.c:	if (!ktime_to_ns(fence->timestamp)) {
drivers/dma-buf/fence.c:		fence->timestamp = ktime_get();
drivers/dma-buf/sync_file.c:	info->timestamp_ns = ktime_to_ns(fence->timestamp);
drivers/block/null_blk.c:	ktime_t kt = ktime_set(0, completion_nsec);
drivers/block/sx8.c:#include <linux/ktime.h>
drivers/block/sx8.c:	time64_t tv = ktime_get_real_seconds();
drivers/hid/hid-sensor-custom.c:		header.timestamp = ktime_get_real_ns();
drivers/char/hangcheck-timer.c:	cur_tsc = ktime_get_ns();
drivers/char/hangcheck-timer.c:	hangcheck_tsc = ktime_get_ns();
drivers/char/hangcheck-timer.c:	hangcheck_tsc = ktime_get_ns();
drivers/char/random.c:	ktime_t now = ktime_get_real();
drivers/char/ipmi/ipmi_ssif.c:		ktime_get_real_ts64(&t);
drivers/connectivity/hisi/bfgx/bfgx_dev.c:#include <linux/ktime.h>
drivers/connectivity/hisi/bfgx/bfgx_dev.c:    ktime_t start_time, end_time, trans_time;
drivers/connectivity/hisi/bfgx/bfgx_dev.c:    start_time = ktime_get();
drivers/connectivity/hisi/bfgx/bfgx_dev.c:    end_time = ktime_get();
drivers/connectivity/hisi/bfgx/bfgx_dev.c:    trans_time = ktime_sub(end_time, start_time);
drivers/connectivity/hisi/bfgx/bfgx_dev.c:    total_time = (unsigned long long)ktime_to_us(trans_time);
drivers/connectivity/hisi/wifi/dmac/dmac_green_ap.c:                    ktime_set(ul_duration / 1000, (ul_duration % 1000) * 1000000),
drivers/connectivity/hisi/wifi/hmac/hmac_scan.c:    st_timestamp_diff  = oal_ktime_sub(oal_ktime_get(), pst_scan_record->st_scan_start_time);
drivers/connectivity/hisi/wifi/hmac/hmac_scan.c:                     ktime_to_ms(st_timestamp_diff));
drivers/connectivity/hisi/wifi/hmac/hmac_scan.c:    pst_scan_record->st_scan_start_time = oal_ktime_get();
drivers/connectivity/hisi/platform/oal/oal_sdio_host.c:    ktime_t time_start;
drivers/connectivity/hisi/platform/oal/oal_sdio_host.c:        ktime_t time_stop = ktime_get();
drivers/connectivity/hisi/platform/oal/oal_sdio_host.c:        trans_us = (oal_uint64)ktime_to_us(ktime_sub(time_stop, time_start));
drivers/connectivity/hisi/platform/oal/oal_sdio_host.c:    ktime_t time_start;
drivers/connectivity/hisi/platform/oal/oal_sdio_host.c:    ktime_t time_stop;
drivers/connectivity/hisi/platform/oal/oal_sdio_host.c:    time_start = ktime_get();
drivers/connectivity/hisi/platform/oal/oal_sdio_host.c:                time_stop = ktime_get();
drivers/connectivity/hisi/platform/oal/oal_sdio_host.c:                trans_us = (oal_uint64)ktime_to_us(ktime_sub(time_stop, time_start));
drivers/connectivity/hisi/platform/oal/oal_hcc_test.c:    ktime_t                     start_time;
drivers/connectivity/hisi/platform/oal/oal_hcc_test.c:    ktime_t                     last_time;
drivers/connectivity/hisi/platform/oal/oal_hcc_test.c:oal_uint64 hcc_test_get_trans_time(ktime_t start_time, ktime_t stop_time)
drivers/connectivity/hisi/platform/oal/oal_hcc_test.c:    ktime_t trans_time;
drivers/connectivity/hisi/platform/oal/oal_hcc_test.c:    trans_time = ktime_sub(stop_time, start_time);
drivers/connectivity/hisi/platform/oal/oal_hcc_test.c:    //                ktime_to_us(start_time),ktime_to_us(stop_time),ktime_to_us(trans_time));
drivers/connectivity/hisi/platform/oal/oal_hcc_test.c:    trans_us = (oal_uint64)ktime_to_us(trans_time);
drivers/connectivity/hisi/platform/oal/oal_hcc_test.c:oal_void hcc_test_throughput_cac(oal_uint64 trans_bytes, ktime_t start_time, ktime_t stop_time)
drivers/connectivity/hisi/platform/oal/oal_hcc_test.c:            g_hcc_test_event->last_time= ktime_get();
drivers/connectivity/hisi/platform/oal/oal_hcc_test.c:        g_hcc_test_event->last_time= ktime_get();
drivers/connectivity/hisi/platform/oal/oal_hcc_test.c:    g_hcc_test_event->last_time= g_hcc_test_event->start_time = ktime_get();
drivers/connectivity/hisi/platform/oal/oal_hcc_test.c:    g_hcc_test_event->last_time= ktime_get();
drivers/connectivity/hisi/platform/oal/oal_hcc_test.c:    g_hcc_test_event->last_time= g_hcc_test_event->start_time = ktime_get();
drivers/connectivity/hisi/platform/oal/oal_hcc_test.c:        g_hcc_test_event->last_time= ktime_get();
drivers/connectivity/hisi/platform/oal/oal_hcc_test.c:    g_hcc_test_event->last_time= ktime_get();
drivers/connectivity/hisi/platform/oal/oal_hcc_test.c:            g_hcc_test_event->last_time= ktime_get();
drivers/connectivity/hisi/platform/oal/oal_hcc_test.c:            g_hcc_test_event->last_time= ktime_get();
drivers/connectivity/hisi/platform/inc/oal/linux/arch/oal_schedule.h:#include <linux/ktime.h>
drivers/connectivity/hisi/platform/inc/oal/linux/arch/oal_schedule.h:typedef ktime_t oal_time_t_stru;
drivers/connectivity/hisi/platform/inc/oal/linux/arch/oal_schedule.h:OAL_STATIC OAL_INLINE oal_time_t_stru oal_ktime_get(oal_void)
drivers/connectivity/hisi/platform/inc/oal/linux/arch/oal_schedule.h:    return ktime_get();
drivers/connectivity/hisi/platform/inc/oal/linux/arch/oal_schedule.h:OAL_STATIC OAL_INLINE oal_time_t_stru oal_ktime_sub(const oal_time_t_stru lhs, const oal_time_t_stru rhs)
drivers/connectivity/hisi/platform/inc/oal/linux/arch/oal_schedule.h:    return ktime_sub(lhs, rhs);
drivers/connectivity/hisi/platform/inc/oal/linux/arch/oal_hardware.h:#include    <linux/ktime.h>
drivers/connectivity/hisi/platform/inc/oal/windows/arch/oal_schedule.h:OAL_STATIC OAL_INLINE oal_time_t_stru oal_ktime_get(oal_void)
drivers/connectivity/hisi/platform/inc/oal/windows/arch/oal_schedule.h:OAL_STATIC OAL_INLINE oal_time_t_stru oal_ktime_sub(const oal_time_t_stru lhs, const oal_time_t_stru rhs)
drivers/connectivity/hisi/platform/inc/oal/oal_sdio_host_if.h:    ktime_t time_start;
drivers/connectivity/hisi/platform/inc/oal/oal_sdio_host_if.h:    time_start = ktime_get();
drivers/connectivity/hisi/platform/inc/oal/oal_sdio_host_if.h:        ktime_t time_stop = ktime_get();
drivers/connectivity/hisi/platform/inc/oal/oal_sdio_host_if.h:        trans_us = (oal_uint64)ktime_to_us(ktime_sub(time_stop, time_start));
drivers/connectivity/hisi/platform/inc/oal/oal_sdio_host_if.h:    ktime_t time_start;
drivers/connectivity/hisi/platform/inc/oal/oal_sdio_host_if.h:    time_start = ktime_get();
drivers/connectivity/hisi/platform/inc/oal/oal_sdio_host_if.h:        ktime_t time_stop = ktime_get();
drivers/connectivity/hisi/platform/inc/oal/oal_sdio_host_if.h:        trans_us = (oal_uint64)ktime_to_us(ktime_sub(time_stop, time_start));
drivers/connectivity/hisi/platform/inc/oal/oal_sdio_host_if.h:    ktime_t time_start;
drivers/connectivity/hisi/platform/inc/oal/oal_sdio_host_if.h:    time_start = ktime_get();
drivers/connectivity/hisi/platform/inc/oal/oal_sdio_host_if.h:        ktime_t time_stop = ktime_get();
drivers/connectivity/hisi/platform/inc/oal/oal_sdio_host_if.h:        trans_us = (oal_uint64)ktime_to_us(ktime_sub(time_stop, time_start));
drivers/connectivity/hisi/platform/pm/plat_firmware.c:    ktime_t time_start, time_stop;
drivers/connectivity/hisi/platform/pm/plat_firmware.c:        time_start = ktime_get();
drivers/connectivity/hisi/platform/pm/plat_firmware.c:        time_stop = ktime_get();
drivers/connectivity/hisi/platform/pm/plat_firmware.c:        trans_us = (oal_uint64)ktime_to_us(ktime_sub(time_stop, time_start));
drivers/connectivity/hisi/platform/pm/plat_pm.c:#include <linux/ktime.h>
drivers/connectivity/hisi/platform/pm/plat_pm.c:    ktime_t start_time, end_time, trans_time;
drivers/connectivity/hisi/platform/pm/plat_pm.c:    start_time = ktime_get();
drivers/connectivity/hisi/platform/pm/plat_pm.c:    end_time = ktime_get();
drivers/connectivity/hisi/platform/pm/plat_pm.c:    trans_time = ktime_sub(end_time, start_time);
drivers/connectivity/hisi/platform/pm/plat_pm.c:    total_time = (unsigned long long)ktime_to_us(trans_time);
drivers/connectivity/hisi/platform/pm/plat_pm.c:    ktime_t start_time, end_time, trans_time;
drivers/connectivity/hisi/platform/pm/plat_pm.c:    start_time = ktime_get();
drivers/connectivity/hisi/platform/pm/plat_pm.c:    end_time = ktime_get();
drivers/connectivity/hisi/platform/pm/plat_pm.c:    trans_time = ktime_sub(end_time, start_time);
drivers/connectivity/hisi/platform/pm/plat_pm.c:    total_time = (unsigned long long)ktime_to_us(trans_time);
drivers/connectivity/hisi/platform/pm/plat_pm.c:    ktime_t start_time, end_time, trans_time;
drivers/connectivity/hisi/platform/pm/plat_pm.c:    start_time = ktime_get();
drivers/connectivity/hisi/platform/pm/plat_pm.c:    end_time = ktime_get();
drivers/connectivity/hisi/platform/pm/plat_pm.c:    trans_time = ktime_sub(end_time, start_time);
drivers/connectivity/hisi/platform/pm/plat_pm.c:    total_time = (unsigned long long)ktime_to_us(trans_time);
drivers/connectivity/hisi/platform/pm/plat_pm.c:    ktime_t start_time, end_time, trans_time;
drivers/connectivity/hisi/platform/pm/plat_pm.c:    start_time = ktime_get();
drivers/connectivity/hisi/platform/pm/plat_pm.c:    end_time = ktime_get();
drivers/connectivity/hisi/platform/pm/plat_pm.c:    trans_time = ktime_sub(end_time, start_time);
drivers/connectivity/hisi/platform/pm/plat_pm.c:    total_time = (unsigned long long)ktime_to_us(trans_time);
drivers/connectivity/hi11xx/hi1103/bfgx/bfgx_exception_rst.c:#include <linux/ktime.h>
drivers/connectivity/hi11xx/hi1103/bfgx/bfgx_exception_rst.c:    pst_exception_data->etype_info[pst_exception_data->excetion_type].stime=ktime_get();
drivers/connectivity/hi11xx/hi1103/bfgx/bfgx_exception_rst.c:    ktime_t trans_time;
drivers/connectivity/hi11xx/hi1103/bfgx/bfgx_exception_rst.c:        trans_time = ktime_sub(ktime_get(), pst_exception_data->etype_info[pst_exception_data->excetion_type].stime);
drivers/connectivity/hi11xx/hi1103/bfgx/bfgx_exception_rst.c:        total_time = (unsigned long long)ktime_to_ms(trans_time);
drivers/connectivity/hi11xx/hi1103/bfgx/bfgx_dev.c:#include <linux/ktime.h>
drivers/connectivity/hi11xx/hi1103/bfgx/bfgx_dev.c:    ktime_t start_time, end_time, trans_time;
drivers/connectivity/hi11xx/hi1103/bfgx/bfgx_dev.c:        start_time = ktime_get();
drivers/connectivity/hi11xx/hi1103/bfgx/bfgx_dev.c:        end_time = ktime_get();
drivers/connectivity/hi11xx/hi1103/bfgx/bfgx_dev.c:        trans_time = ktime_sub(end_time, start_time);
drivers/connectivity/hi11xx/hi1103/bfgx/bfgx_dev.c:        total_time += (unsigned long long)ktime_to_us(trans_time);
drivers/connectivity/hi11xx/hi1103/wifi/1103/hmac/hmac_scan.c:    st_timestamp_diff  = oal_ktime_sub(oal_ktime_get(), pst_scan_record->st_scan_start_time);
drivers/connectivity/hi11xx/hi1103/wifi/1103/hmac/hmac_scan.c:                     ktime_to_ms(st_timestamp_diff));
drivers/connectivity/hi11xx/hi1103/wifi/1103/hmac/hmac_scan.c:    pst_scan_record->st_scan_start_time = oal_ktime_get();
drivers/connectivity/hi11xx/hi1103/platform/oal/oal_pcie_host.c:OAL_STATIC ktime_t g_mips_arry_total[PCIE_MIPS_BUTT];
drivers/connectivity/hi11xx/hi1103/platform/oal/oal_pcie_host.c:OAL_STATIC ktime_t g_mips_arry[PCIE_MIPS_BUTT];
drivers/connectivity/hi11xx/hi1103/platform/oal/oal_pcie_host.c:    g_mips_arry[type] = ktime_get();
drivers/connectivity/hi11xx/hi1103/platform/oal/oal_pcie_host.c:    ktime_t end = ktime_get();
drivers/connectivity/hi11xx/hi1103/platform/oal/oal_pcie_host.c:    g_mips_arry_total[type] = ktime_add(g_mips_arry_total[type], ktime_sub(end, g_mips_arry[type]));
drivers/connectivity/hi11xx/hi1103/platform/oal/oal_pcie_host.c:        trans_us = (oal_uint64)ktime_to_us(g_mips_arry_total[i]);
drivers/connectivity/hi11xx/hi1103/platform/oal/oal_pcie_host.c:    ktime_t  start_time, last_time;
drivers/connectivity/hi11xx/hi1103/platform/oal/oal_pcie_host.c:    ktime_t trans_time;
drivers/connectivity/hi11xx/hi1103/platform/oal/oal_pcie_host.c:    start_time= ktime_get();
drivers/connectivity/hi11xx/hi1103/platform/oal/oal_pcie_host.c:    last_time = ktime_get();
drivers/connectivity/hi11xx/hi1103/platform/oal/oal_pcie_host.c:    trans_time = ktime_sub(last_time, start_time);
drivers/connectivity/hi11xx/hi1103/platform/oal/oal_pcie_host.c:    trans_us = (oal_uint64)ktime_to_us(trans_time);
drivers/connectivity/hi11xx/hi1103/platform/oal/oal_pcie_host.c:    ktime_t  start_time, last_time;
drivers/connectivity/hi11xx/hi1103/platform/oal/oal_pcie_host.c:    ktime_t trans_time;
drivers/connectivity/hi11xx/hi1103/platform/oal/oal_pcie_host.c:    start_time= ktime_get();
drivers/connectivity/hi11xx/hi1103/platform/oal/oal_pcie_host.c:    last_time = ktime_get();
drivers/connectivity/hi11xx/hi1103/platform/oal/oal_pcie_host.c:    trans_time = ktime_sub(last_time, start_time);
drivers/connectivity/hi11xx/hi1103/platform/oal/oal_pcie_host.c:    trans_us = (oal_uint64)ktime_to_us(trans_time);
drivers/connectivity/hi11xx/hi1103/platform/oal/oal_pcie_host.c:    ktime_t  start_time, last_time;
drivers/connectivity/hi11xx/hi1103/platform/oal/oal_pcie_host.c:    ktime_t trans_time;
drivers/connectivity/hi11xx/hi1103/platform/oal/oal_pcie_host.c:    start_time= ktime_get();
drivers/connectivity/hi11xx/hi1103/platform/oal/oal_pcie_host.c:    last_time = ktime_get();
drivers/connectivity/hi11xx/hi1103/platform/oal/oal_pcie_host.c:    trans_time = ktime_sub(last_time, start_time);
drivers/connectivity/hi11xx/hi1103/platform/oal/oal_pcie_host.c:    trans_us = (oal_uint64)ktime_to_us(trans_time);
drivers/connectivity/hi11xx/hi1103/platform/oal/oal_pcie_host.c:    ktime_t  start_time, last_time;
drivers/connectivity/hi11xx/hi1103/platform/oal/oal_pcie_host.c:    ktime_t trans_time;
drivers/connectivity/hi11xx/hi1103/platform/oal/oal_pcie_host.c:    start_time= ktime_get();
drivers/connectivity/hi11xx/hi1103/platform/oal/oal_pcie_host.c:    last_time = ktime_get();
drivers/connectivity/hi11xx/hi1103/platform/oal/oal_pcie_host.c:    trans_time = ktime_sub(last_time, start_time);
drivers/connectivity/hi11xx/hi1103/platform/oal/oal_pcie_host.c:    trans_us = (oal_uint64)ktime_to_us(trans_time);
drivers/connectivity/hi11xx/hi1103/platform/oal/oal_pcie_host.c:    ktime_t  start_time, last_time;
drivers/connectivity/hi11xx/hi1103/platform/oal/oal_pcie_host.c:    ktime_t trans_time;
drivers/connectivity/hi11xx/hi1103/platform/oal/oal_pcie_host.c:    start_time= ktime_get();
drivers/connectivity/hi11xx/hi1103/platform/oal/oal_pcie_host.c:    last_time = ktime_get();
drivers/connectivity/hi11xx/hi1103/platform/oal/oal_pcie_host.c:    trans_time = ktime_sub(last_time, start_time);
drivers/connectivity/hi11xx/hi1103/platform/oal/oal_pcie_host.c:    trans_us = (oal_uint64)ktime_to_us(trans_time);
drivers/connectivity/hi11xx/hi1103/platform/oal/oal_pcie_host.c:    ktime_t  start_time, last_time;
drivers/connectivity/hi11xx/hi1103/platform/oal/oal_pcie_host.c:    ktime_t trans_time;
drivers/connectivity/hi11xx/hi1103/platform/oal/oal_pcie_host.c:    start_time= ktime_get();
drivers/connectivity/hi11xx/hi1103/platform/oal/oal_pcie_host.c:    last_time = ktime_get();
drivers/connectivity/hi11xx/hi1103/platform/oal/oal_pcie_host.c:    trans_time = ktime_sub(last_time, start_time);
drivers/connectivity/hi11xx/hi1103/platform/oal/oal_pcie_host.c:    trans_us = (oal_uint64)ktime_to_us(trans_time);
drivers/connectivity/hi11xx/hi1103/platform/oal/oal_pcie_host.c:    ktime_t  start_time, last_time;
drivers/connectivity/hi11xx/hi1103/platform/oal/oal_pcie_host.c:    ktime_t trans_time;
drivers/connectivity/hi11xx/hi1103/platform/oal/oal_pcie_host.c:    //start_time= ktime_get();
drivers/connectivity/hi11xx/hi1103/platform/oal/oal_pcie_host.c:    start_time= ktime_get();
drivers/connectivity/hi11xx/hi1103/platform/oal/oal_pcie_host.c:    last_time = ktime_get();
drivers/connectivity/hi11xx/hi1103/platform/oal/oal_pcie_host.c:    trans_time = ktime_sub(last_time, start_time);
drivers/connectivity/hi11xx/hi1103/platform/oal/oal_pcie_host.c:    trans_us = (oal_uint64)ktime_to_us(trans_time);
drivers/connectivity/hi11xx/hi1103/platform/oal/oal_pcie_host.c:    ktime_t  start_time, last_time;
drivers/connectivity/hi11xx/hi1103/platform/oal/oal_pcie_host.c:    ktime_t  trans_time;
drivers/connectivity/hi11xx/hi1103/platform/oal/oal_pcie_host.c:        start_time= ktime_get();
drivers/connectivity/hi11xx/hi1103/platform/oal/oal_pcie_host.c:        last_time = ktime_get();
drivers/connectivity/hi11xx/hi1103/platform/oal/oal_pcie_host.c:        trans_time = ktime_sub(last_time, start_time);
drivers/connectivity/hi11xx/hi1103/platform/oal/oal_pcie_host.c:        trans_us = (oal_uint64)ktime_to_us(trans_time);
drivers/connectivity/hi11xx/hi1103/platform/oal/oal_sdio_host.c:    ktime_t time_start, time_stop;
drivers/connectivity/hi11xx/hi1103/platform/oal/oal_sdio_host.c:    time_start = ktime_get();
drivers/connectivity/hi11xx/hi1103/platform/oal/oal_sdio_host.c:    time_stop = ktime_get();
drivers/connectivity/hi11xx/hi1103/platform/oal/oal_sdio_host.c:    trans_us = (oal_uint64)ktime_to_us(ktime_sub(time_stop, time_start));
drivers/connectivity/hi11xx/hi1103/platform/oal/oal_sdio_host.c:    ktime_t time_start;
drivers/connectivity/hi11xx/hi1103/platform/oal/oal_sdio_host.c:        ktime_t time_stop = ktime_get();
drivers/connectivity/hi11xx/hi1103/platform/oal/oal_sdio_host.c:        trans_us = (oal_uint64)ktime_to_us(ktime_sub(time_stop, time_start));
drivers/connectivity/hi11xx/hi1103/platform/oal/oal_hcc_test.c:    ktime_t                     start_time;
drivers/connectivity/hi11xx/hi1103/platform/oal/oal_hcc_test.c:    ktime_t                     last_time;
drivers/connectivity/hi11xx/hi1103/platform/oal/oal_hcc_test.c:oal_uint64 hcc_test_get_trans_time_etc(ktime_t start_time, ktime_t stop_time)
drivers/connectivity/hi11xx/hi1103/platform/oal/oal_hcc_test.c:    ktime_t trans_time;
drivers/connectivity/hi11xx/hi1103/platform/oal/oal_hcc_test.c:    trans_time = ktime_sub(stop_time, start_time);
drivers/connectivity/hi11xx/hi1103/platform/oal/oal_hcc_test.c:    //                ktime_to_us(start_time),ktime_to_us(stop_time),ktime_to_us(trans_time));
drivers/connectivity/hi11xx/hi1103/platform/oal/oal_hcc_test.c:    trans_us = (oal_uint64)ktime_to_us(trans_time);
drivers/connectivity/hi11xx/hi1103/platform/oal/oal_hcc_test.c:oal_void hcc_test_throughput_cac_etc(oal_uint64 trans_bytes, ktime_t start_time, ktime_t stop_time)
drivers/connectivity/hi11xx/hi1103/platform/oal/oal_hcc_test.c:            g_hcc_test_event_etc->last_time= ktime_get();
drivers/connectivity/hi11xx/hi1103/platform/oal/oal_hcc_test.c:        g_hcc_test_event_etc->last_time= ktime_get();
drivers/connectivity/hi11xx/hi1103/platform/oal/oal_hcc_test.c:    g_hcc_test_event_etc->last_time= g_hcc_test_event_etc->start_time = ktime_get();
drivers/connectivity/hi11xx/hi1103/platform/oal/oal_hcc_test.c:    g_hcc_test_event_etc->last_time= ktime_get();
drivers/connectivity/hi11xx/hi1103/platform/oal/oal_hcc_test.c:    g_hcc_test_event_etc->last_time= g_hcc_test_event_etc->start_time = ktime_get();
drivers/connectivity/hi11xx/hi1103/platform/oal/oal_hcc_test.c:        g_hcc_test_event_etc->last_time= ktime_get();
drivers/connectivity/hi11xx/hi1103/platform/oal/oal_hcc_test.c:    g_hcc_test_event_etc->last_time= ktime_get();
drivers/connectivity/hi11xx/hi1103/platform/oal/oal_hcc_test.c:            g_hcc_test_event_etc->last_time= ktime_get();
drivers/connectivity/hi11xx/hi1103/platform/oal/oal_hcc_test.c:            g_hcc_test_event_etc->last_time= ktime_get();
drivers/connectivity/hi11xx/hi1103/platform/inc/oal/linux/arch/oal_schedule.h:#include <linux/ktime.h>
drivers/connectivity/hi11xx/hi1103/platform/inc/oal/linux/arch/oal_schedule.h:typedef ktime_t oal_time_t_stru;
drivers/connectivity/hi11xx/hi1103/platform/inc/oal/linux/arch/oal_schedule.h:OAL_STATIC OAL_INLINE oal_time_t_stru oal_ktime_get(oal_void)
drivers/connectivity/hi11xx/hi1103/platform/inc/oal/linux/arch/oal_schedule.h:    return ktime_get();
drivers/connectivity/hi11xx/hi1103/platform/inc/oal/linux/arch/oal_schedule.h:OAL_STATIC OAL_INLINE oal_time_t_stru oal_ktime_sub(const oal_time_t_stru lhs, const oal_time_t_stru rhs)
drivers/connectivity/hi11xx/hi1103/platform/inc/oal/linux/arch/oal_schedule.h:    return ktime_sub(lhs, rhs);
drivers/connectivity/hi11xx/hi1103/platform/inc/oal/linux/arch/oal_hardware.h:#include    <linux/ktime.h>
drivers/connectivity/hi11xx/hi1103/platform/inc/oal/linux/arch/oal_util.h:#include <linux/ktime.h>
drivers/connectivity/hi11xx/hi1103/platform/inc/oal/linux/arch/oal_util.h:										ktime_t local_cost_time_start_##name,  local_cost_time_end_##name
drivers/connectivity/hi11xx/hi1103/platform/inc/oal/linux/arch/oal_util.h:#define oal_get_time_cost_start(name)   time_cost_var_start(name) = ktime_get()
drivers/connectivity/hi11xx/hi1103/platform/inc/oal/linux/arch/oal_util.h:#define oal_get_time_cost_end(name)     time_cost_var_end(name)   = ktime_get()
drivers/connectivity/hi11xx/hi1103/platform/inc/oal/linux/arch/oal_util.h:#define oal_calc_time_cost_sub(name)    time_cost_var_sub(name)   =  (oal_uint64)ktime_to_us(ktime_sub( time_cost_var_end(name), time_cost_var_start(name)))
drivers/connectivity/hi11xx/hi1103/platform/inc/oal/windows/arch/oal_schedule.h:OAL_STATIC OAL_INLINE oal_time_t_stru oal_ktime_get(oal_void)
drivers/connectivity/hi11xx/hi1103/platform/inc/oal/windows/arch/oal_schedule.h:OAL_STATIC OAL_INLINE oal_time_t_stru oal_ktime_sub(const oal_time_t_stru lhs, const oal_time_t_stru rhs)
drivers/connectivity/hi11xx/hi1103/platform/inc/oal/oal_sdio_host_if.h:    ktime_t time_start;
drivers/connectivity/hi11xx/hi1103/platform/inc/oal/oal_sdio_host_if.h:    time_start = ktime_get();
drivers/connectivity/hi11xx/hi1103/platform/inc/oal/oal_sdio_host_if.h:        ktime_t time_stop = ktime_get();
drivers/connectivity/hi11xx/hi1103/platform/inc/oal/oal_sdio_host_if.h:        trans_us = (oal_uint64)ktime_to_us(ktime_sub(time_stop, time_start));
drivers/connectivity/hi11xx/hi1103/platform/inc/oal/oal_sdio_host_if.h:    ktime_t time_start;
drivers/connectivity/hi11xx/hi1103/platform/inc/oal/oal_sdio_host_if.h:    time_start = ktime_get();
drivers/connectivity/hi11xx/hi1103/platform/inc/oal/oal_sdio_host_if.h:        ktime_t time_stop = ktime_get();
drivers/connectivity/hi11xx/hi1103/platform/inc/oal/oal_sdio_host_if.h:        trans_us = (oal_uint64)ktime_to_us(ktime_sub(time_stop, time_start));
drivers/connectivity/hi11xx/hi1103/platform/inc/oal/oal_sdio_host_if.h:    ktime_t time_start;
drivers/connectivity/hi11xx/hi1103/platform/inc/oal/oal_sdio_host_if.h:    time_start = ktime_get();
drivers/connectivity/hi11xx/hi1103/platform/inc/oal/oal_sdio_host_if.h:        ktime_t time_stop = ktime_get();
drivers/connectivity/hi11xx/hi1103/platform/inc/oal/oal_sdio_host_if.h:        trans_us = (oal_uint64)ktime_to_us(ktime_sub(time_stop, time_start));
drivers/connectivity/hi11xx/hi1103/platform/pm/plat_firmware.c:    ktime_t time_start, time_stop;
drivers/connectivity/hi11xx/hi1103/platform/pm/plat_firmware.c:        time_start = ktime_get();
drivers/connectivity/hi11xx/hi1103/platform/pm/plat_firmware.c:        time_stop = ktime_get();
drivers/connectivity/hi11xx/hi1103/platform/pm/plat_firmware.c:        trans_us = (oal_uint64)ktime_to_us(ktime_sub(time_stop, time_start));
drivers/connectivity/hi11xx/hi1103/platform/pm/plat_pm.c:#include <linux/ktime.h>
drivers/connectivity/hi11xx/hi1103/platform/pm/plat_pm.c:    ktime_t start_time, end_time, trans_time;
drivers/connectivity/hi11xx/hi1103/platform/pm/plat_pm.c:    start_time = ktime_get();
drivers/connectivity/hi11xx/hi1103/platform/pm/plat_pm.c:    end_time = ktime_get();
drivers/connectivity/hi11xx/hi1103/platform/pm/plat_pm.c:    trans_time = ktime_sub(end_time, start_time);
drivers/connectivity/hi11xx/hi1103/platform/pm/plat_pm.c:    total_time = (unsigned long long)ktime_to_us(trans_time);
drivers/connectivity/hi11xx/hi1103/platform/pm/plat_pm.c:    ktime_t start_time, end_time, trans_time;
drivers/connectivity/hi11xx/hi1103/platform/pm/plat_pm.c:    start_time = ktime_get();
drivers/connectivity/hi11xx/hi1103/platform/pm/plat_pm.c:    end_time = ktime_get();
drivers/connectivity/hi11xx/hi1103/platform/pm/plat_pm.c:    trans_time = ktime_sub(end_time, start_time);
drivers/connectivity/hi11xx/hi1103/platform/pm/plat_pm.c:    total_time = (unsigned long long)ktime_to_us(trans_time);
drivers/connectivity/hi11xx/hi1103/platform/pm/plat_pm.c:    ktime_t start_time, end_time, trans_time;
drivers/connectivity/hi11xx/hi1103/platform/pm/plat_pm.c:    start_time = ktime_get();
drivers/connectivity/hi11xx/hi1103/platform/pm/plat_pm.c:    end_time = ktime_get();
drivers/connectivity/hi11xx/hi1103/platform/pm/plat_pm.c:    trans_time = ktime_sub(end_time, start_time);
drivers/connectivity/hi11xx/hi1103/platform/pm/plat_pm.c:    total_time = (unsigned long long)ktime_to_us(trans_time);
drivers/connectivity/hi11xx/hi1103/platform/pm/plat_pm.c:    ktime_t start_time, end_time, trans_time;
drivers/connectivity/hi11xx/hi1103/platform/pm/plat_pm.c:    start_time = ktime_get();
drivers/connectivity/hi11xx/hi1103/platform/pm/plat_pm.c:    end_time = ktime_get();
drivers/connectivity/hi11xx/hi1103/platform/pm/plat_pm.c:    trans_time = ktime_sub(end_time, start_time);
drivers/connectivity/hi11xx/hi1103/platform/pm/plat_pm.c:    total_time = (unsigned long long)ktime_to_us(trans_time);
drivers/connectivity/hi11xx/hi1103/platform/pm/plat_pm.c:    ktime_t start_time, end_time, trans_time;
drivers/connectivity/hi11xx/hi1103/platform/pm/plat_pm.c:    start_time = ktime_get();
drivers/connectivity/hi11xx/hi1103/platform/pm/plat_pm.c:            end_time = ktime_get();
drivers/connectivity/hi11xx/hi1103/platform/pm/plat_pm.c:            trans_time = ktime_sub(end_time, start_time);
drivers/connectivity/hi11xx/hi1103/platform/pm/plat_pm.c:            total_time = (unsigned long long)ktime_to_us(trans_time);
drivers/connectivity/hi11xx/hi1103/platform/pm/plat_pm_wlan.c:    ktime_t time_start, time_stop;
drivers/connectivity/hi11xx/hi1103/platform/pm/plat_pm_wlan.c:    time_start = ktime_get();
drivers/connectivity/hi11xx/hi1103/platform/pm/plat_pm_wlan.c:    time_stop = ktime_get();
drivers/connectivity/hi11xx/hi1103/platform/pm/plat_pm_wlan.c:    trans_us = (oal_uint64)ktime_to_us(ktime_sub(time_stop, time_start));
drivers/connectivity/hi11xx/hi1103/platform/pm/plat_exception_rst.h:    ktime_t stime;
drivers/ide/pdc202xx_new.c:#include <linux/ktime.h>
drivers/ide/pdc202xx_new.c:	ktime_t start_time, end_time;
drivers/ide/pdc202xx_new.c:	start_time = ktime_get();
drivers/ide/pdc202xx_new.c:	end_time = ktime_get();
drivers/ide/pdc202xx_new.c:	usec_elapsed = ktime_us_delta(end_time, start_time);
drivers/power/supply/abx500_chargalg.c:		ktime_set(timer_expiration * ONE_HOUR_IN_SECONDS, 0),
drivers/power/supply/abx500_chargalg.c:		ktime_set(FIVE_MINUTES_IN_SECONDS, 0));
drivers/power/supply/abx500_chargalg.c:		ktime_set(duration * ONE_HOUR_IN_SECONDS, 0),
drivers/power/supply/abx500_chargalg.c:		ktime_set(FIVE_MINUTES_IN_SECONDS, 0));
drivers/power/supply/charger-manager.c:		cm->charging_start_time = ktime_to_ms(ktime_get());
drivers/power/supply/charger-manager.c:		cm->charging_end_time = ktime_to_ms(ktime_get());
drivers/power/supply/charger-manager.c:	u64 curr = ktime_to_ms(ktime_get());
drivers/power/supply/charger-manager.c:		ktime_t now, add;
drivers/power/supply/charger-manager.c:		now = ktime_get_boottime();
drivers/power/supply/charger-manager.c:		add = ktime_set(wakeup_ms / MSEC_PER_SEC,
drivers/power/supply/charger-manager.c:		alarm_start(cm_timer, ktime_add(now, add));
drivers/power/supply/charger-manager.c:static enum alarmtimer_restart cm_timer_func(struct alarm *alarm, ktime_t now)
drivers/power/supply/charger-manager.c:		ktime_t remain;
drivers/power/supply/charger-manager.c:		cm_suspend_duration_ms -= ktime_to_ms(remain);
drivers/power/hisi/coul/hisi_coul_polar.c:    ktime_t kt;
drivers/power/hisi/coul/hisi_coul_polar.c:    kt = ktime_set(fifo_time_ms / MSEC_PER_SEC,
drivers/power/hisi/coul/hisi_coul_polar.c:    ktime_t kt;
drivers/power/hisi/coul/hisi_coul_polar.c:        kt = ktime_set(fifo_time_ms / MSEC_PER_SEC,
drivers/power/hisi/coul/hisi_coul_polar.c:    ktime_t kt;
drivers/power/hisi/coul/hisi_coul_polar.c:    kt = ktime_set(fifo_time_ms / MSEC_PER_SEC,
drivers/power/hisi/coul/hisi_coul_polar.c:    ktime_t kt;
drivers/power/hisi/coul/hisi_coul_polar.c:    kt = ktime_set(fifo_time_ms / MSEC_PER_SEC,
drivers/power/hisi/coul/hisi_coul_core.c:        hrtimer_start(&di->iscd->timer, ktime_set((s64)di->iscd->sample_time_interval, (unsigned long)0), HRTIMER_MODE_REL);
drivers/power/hisi/coul/hisi_coul_core.c:    ktime_t kt;
drivers/power/hisi/coul/hisi_coul_core.c:    kt = ktime_set((s64)delta_secs, (unsigned long)0);
drivers/power/hisi/coul/hisi_coul_core.c:        hrtimer_start(&di->iscd->timer, ktime_set((unsigned long)0, (unsigned long)0), HRTIMER_MODE_REL);
drivers/power/hisi/hisi_bci_battery.c:			ktime_set(interval/MSEC_PER_SEC, (interval % MSEC_PER_SEC) * USEC_PER_SEC), \
drivers/power/reset/ltc2952-poweroff.c:#include <linux/ktime.h>
drivers/power/reset/ltc2952-poweroff.c:	ktime_t trigger_delay;
drivers/power/reset/ltc2952-poweroff.c:	ktime_t wde_interval;
drivers/power/reset/ltc2952-poweroff.c:	ktime_t now;
drivers/power/reset/ltc2952-poweroff.c:	data->wde_interval = ktime_set(0, 300L*1E6L);
drivers/power/reset/ltc2952-poweroff.c:	data->trigger_delay = ktime_set(2, 500L*1E6L);
drivers/hwmon/ibmaem.c:	time = ktime_get_ns();
drivers/hwmon/ibmaem.c:	time = ktime_get_ns() - time;
drivers/hwmon/pmbus/zl6100.c:#include <linux/ktime.h>
drivers/hwmon/pmbus/zl6100.c:	ktime_t access;		/* chip access time */
drivers/hwmon/pmbus/zl6100.c:		s64 delta = ktime_us_delta(ktime_get(), data->access);
drivers/hwmon/pmbus/zl6100.c:	data->access = ktime_get();
drivers/hwmon/pmbus/zl6100.c:	data->access = ktime_get();
drivers/hwmon/pmbus/zl6100.c:	data->access = ktime_get();
drivers/hwmon/pmbus/zl6100.c:	data->access = ktime_get();
drivers/hwmon/pmbus/zl6100.c:	data->access = ktime_get();
drivers/hwmon/pmbus/zl6100.c:	data->access = ktime_get();
drivers/hwmon/dell-smm-hwmon.c:	ktime_t calltime, delta, rettime;
drivers/hwmon/dell-smm-hwmon.c:	calltime = ktime_get();
drivers/hwmon/dell-smm-hwmon.c:	rettime = ktime_get();
drivers/hwmon/dell-smm-hwmon.c:	delta = ktime_sub(rettime, calltime);
drivers/hwmon/dell-smm-hwmon.c:	duration = ktime_to_ns(delta) >> 10;
drivers/iio/humidity/dht11.c:	dht11->timestamp = ktime_get_boot_ns();
drivers/iio/humidity/dht11.c:		dht11->edges[dht11->num_edges].ts = ktime_get_boot_ns();
drivers/iio/humidity/dht11.c:	if (dht11->timestamp + DHT11_DATA_VALID_TIME < ktime_get_boot_ns()) {
drivers/iio/humidity/dht11.c:		timeres = ktime_get_resolution_ns();
drivers/iio/humidity/dht11.c:	dht11->timestamp = ktime_get_boot_ns() - DHT11_DATA_VALID_TIME - 1;
drivers/iio/trigger/iio-trig-hrtimer.c:	ktime_t period;
drivers/iio/trigger/iio-trig-hrtimer.c:	info->period = ktime_set(0, NSEC_PER_SEC / val);
drivers/iio/trigger/iio-trig-hrtimer.c:	trig_info->period = ktime_set(0, NSEC_PER_SEC /
drivers/iio/adc/ltc2485.c:	ktime_t			time_prev;	/* last conversion */
drivers/iio/adc/ltc2485.c:	time_elapsed = ktime_ms_delta(ktime_get(), data->time_prev);
drivers/iio/adc/ltc2485.c:	data->time_prev = ktime_get();
drivers/iio/adc/ltc2485.c:	data->time_prev = ktime_get();
drivers/iio/industrialio-core.c:		ktime_get_real_ts(&tp);
drivers/iio/industrialio-core.c:		ktime_get_ts(&tp);
drivers/lguest/interrupts_and_traps.c:	ktime_t expires;
drivers/lguest/interrupts_and_traps.c:	expires = ktime_add_ns(ktime_get_real(), delta);
drivers/lguest/hypercalls.c:#include <linux/ktime.h>
drivers/lguest/hypercalls.c:	ktime_get_real_ts(&now);
drivers/virtio/virtio_ring.c:	ktime_t last_add_time;
drivers/virtio/virtio_ring.c:		ktime_t now = ktime_get();
drivers/virtio/virtio_ring.c:			WARN_ON(ktime_to_ms(ktime_sub(now, vq->last_add_time))
drivers/virtio/virtio_ring.c:		WARN_ON(ktime_to_ms(ktime_sub(ktime_get(),
drivers/media/huawei/camera/fd/fd.c:ktime_t pre_start, pre_end,tme_start,tme_end;
drivers/media/huawei/camera/fd/fd.c:        //pre_end = ktime_get();
drivers/media/huawei/camera/fd/fd.c:        //tme_end = ktime_get();
drivers/media/huawei/camera/fd/fd.c:                pre_start = ktime_get();
drivers/media/huawei/camera/fd/fd.c:            tme_start = ktime_get();
drivers/media/huawei/camera/fd/fd.c:        /*PRE_time = ktime_to_us(ktime_sub(pre_end, pre_start));
drivers/media/huawei/camera/fd/fd.c:        TME_time = ktime_to_us(ktime_sub(tme_end, pre_end));
drivers/media/pci/sta2x11/sta2x11_vip.c:		vip->active->vb.vb2_buf.timestamp = ktime_get_ns();
drivers/media/pci/pt3/pt3.c:	ktime_t delay;
drivers/media/pci/pt3/pt3.c:		delay = ktime_set(0, PT3_FETCH_DELAY * NSEC_PER_MSEC);
drivers/media/pci/cx23885/cx23885-video.c:	buf->vb.vb2_buf.timestamp = ktime_get_ns();
drivers/media/pci/cx23885/cx23885-core.c:	buf->vb.vb2_buf.timestamp = ktime_get_ns();
drivers/media/pci/tw686x/tw686x-video.c:		vb2_buf->timestamp = ktime_get_ns();
drivers/media/pci/cx25821/cx25821-video.c:			buf->vb.vb2_buf.timestamp = ktime_get_ns();
drivers/media/pci/zoran/zoran_device.c:#include <linux/ktime.h>
drivers/media/pci/zoran/zoran_device.c:	ktime_t t0, t1;
drivers/media/pci/zoran/zoran_device.c:	t0 = ktime_get();
drivers/media/pci/zoran/zoran_device.c:				t1 = ktime_get();
drivers/media/pci/zoran/zoran_device.c:				change[j][0] = ktime_to_us(ktime_sub(t1, t0));
drivers/media/pci/tw5864/tw5864-core.c:		cur_frame->timestamp = ktime_get_ns();
drivers/media/pci/cobalt/cobalt-irq.c:	cb->vb.vb2_buf.timestamp = ktime_get_ns();
drivers/media/pci/dt3155/dt3155.c:		ipd->curr_buf->vb2_buf.timestamp = ktime_get_ns();
drivers/media/pci/solo6x10/solo6x10-core.c:#include <linux/ktime.h>
drivers/media/pci/solo6x10/solo6x10-core.c:	ktime_get_ts(&ts);
drivers/media/pci/solo6x10/solo6x10-core.c:	ktime_get_ts(&ts);
drivers/media/pci/solo6x10/solo6x10-v4l2.c:		vb->timestamp = ktime_get_ns();
drivers/media/pci/solo6x10/solo6x10-v4l2-enc.c:		vb->timestamp = ktime_get_ns();
drivers/media/pci/bt8xx/bttv-input.c:	ktime_t tv;
drivers/media/pci/bt8xx/bttv-input.c:	tv = ktime_get();
drivers/media/pci/bt8xx/bttv-input.c:	gap = ktime_to_us(ktime_sub(tv, ir->base_time));
drivers/media/pci/bt8xx/bttv-input.c:	ktime_t tv;
drivers/media/pci/bt8xx/bttv-input.c:	tv = ktime_get();
drivers/media/pci/bt8xx/bttv-input.c:	gap = ktime_to_us(ktime_sub(tv, ir->base_time));
drivers/media/pci/bt8xx/bttvp.h:	ktime_t          				base_time;  /* time of last seen code */
drivers/media/pci/netup_unidvb/netup_unidvb_core.c:			buf->vb.vb2_buf.timestamp = ktime_get_ns();
drivers/media/pci/saa7134/saa7134-core.c:	q->curr->vb2.vb2_buf.timestamp = ktime_get_ns();
drivers/media/pci/tw68/tw68-video.c:		buf->vb.vb2_buf.timestamp = ktime_get_ns();
drivers/media/pci/cx88/cx88-input.c:				     ktime_set(0, ir->polling * 1000000));
drivers/media/pci/cx88/cx88-input.c:			      ktime_set(0, ir->polling * 1000000),
drivers/media/pci/cx88/cx88-core.c:	buf->vb.vb2_buf.timestamp = ktime_get_ns();
drivers/media/usb/s2255/s2255drv.c:	buf->vb.vb2_buf.timestamp = ktime_get_ns();
drivers/media/usb/usbtv/usbtv-video.c:			buf->vb.vb2_buf.timestamp = ktime_get_ns();
drivers/media/usb/em28xx/em28xx-video.c:	buf->vb.vb2_buf.timestamp = ktime_get_ns();
drivers/media/usb/gspca/gspca.c:#include <linux/ktime.h>
drivers/media/usb/hackrf/hackrf.c:	buffer->vb.vb2_buf.timestamp = ktime_get_ns();
drivers/media/usb/hackrf/hackrf.c:	buffer->vb.vb2_buf.timestamp = ktime_get_ns();
drivers/media/usb/go7007/go7007-driver.c:	vb->vb.vb2_buf.timestamp = ktime_get_ns();
drivers/media/usb/airspy/airspy.c:		fbuf->vb.vb2_buf.timestamp = ktime_get_ns();
drivers/media/usb/stk1160/stk1160-video.c:	buf->vb.vb2_buf.timestamp = ktime_get_ns();
drivers/media/usb/uvc/uvc_video.c:		ktime_get_ts(ts);
drivers/media/usb/uvc/uvc_video.c:		ktime_get_real_ts(ts);
drivers/media/usb/uvc/uvc_video.c:		ktime_get_ts(&stream->stats.stream.start_ts);
drivers/media/usb/uvc/uvc_video.c:	ktime_get_ts(&stream->stats.stream.stop_ts);
drivers/media/usb/pwc/pwc-if.c:				fbuf->vb.vb2_buf.timestamp = ktime_get_ns();
drivers/media/usb/au0828/au0828-video.c:	vb->vb2_buf.timestamp = ktime_get_ns();
drivers/media/platform/ti-vpe/cal.c:	ctx->cur_frm->vb.vb2_buf.timestamp = ktime_get_ns();
drivers/media/platform/pxa_camera.c:	vb->timestamp = ktime_get_ns();
drivers/media/platform/marvell-ccic/mcam-core.c:	vbuf->vb2_buf.timestamp = ktime_get_ns();
drivers/media/platform/s3c-camif/camif-capture.c:			vbuf->vb.vb2_buf.timestamp = ktime_get_ns();
drivers/media/platform/sti/bdisp/bdisp.h:#include <linux/ktime.h>
drivers/media/platform/sti/bdisp/bdisp.h:	ktime_t                 hw_start;
drivers/media/platform/sti/bdisp/bdisp-debug.c:	bdisp->dbg.hw_start = ktime_get();
drivers/media/platform/sti/bdisp/bdisp-debug.c:	time_us = ktime_us_delta(ktime_get(), bdisp->dbg.hw_start);
drivers/media/platform/vsp1/vsp1_video.c:	done->buf.vb2_buf.timestamp = ktime_get_ns();
drivers/media/platform/xilinx/xilinx-dma.c:	buf->buf.vb2_buf.timestamp = ktime_get_ns();
drivers/media/platform/soc_camera/atmel-isi.c:		vbuf->vb2_buf.timestamp = ktime_get_ns();
drivers/media/platform/soc_camera/sh_mobile_ceu_camera.c:	vbuf->vb2_buf.timestamp = ktime_get_ns();
drivers/media/platform/am437x/am437x-vpfe.c:	vpfe->cur_frm->vb.vb2_buf.timestamp = ktime_get_ns();
drivers/media/platform/atmel/atmel-isc.c:			vb->timestamp = ktime_get_ns();
drivers/media/platform/exynos4-is/fimc-capture.c:		v_buf->vb.vb2_buf.timestamp = ktime_get_ns();
drivers/media/platform/exynos4-is/fimc-lite.c:		vbuf->vb.vb2_buf.timestamp = ktime_get_ns();
drivers/media/platform/exynos4-is/fimc-isp-video.c:	vbuf->vb2_buf.timestamp = ktime_get_ns();
drivers/media/platform/blackfin/bfin_capture.c:		vb->timestamp = ktime_get_ns();
drivers/media/platform/sh_vou.c:	vb->vb.vb2_buf.timestamp = ktime_get_ns();
drivers/media/platform/omap3isp/ispvideo.c:	buf->vb.vb2_buf.timestamp = ktime_get_ns();
drivers/media/platform/rcar-vin/rcar-dma.c:	vin->queue_buf[slot]->vb2_buf.timestamp = ktime_get_ns();
drivers/media/platform/davinci/vpif_capture.c:	common->cur_frm->vb.vb2_buf.timestamp = ktime_get_ns();
drivers/media/platform/davinci/vpbe_display.c:	layer->cur_frm->vb.vb2_buf.timestamp = ktime_get_ns();
drivers/media/platform/davinci/vpif_display.c:		common->cur_frm->vb.vb2_buf.timestamp = ktime_get_ns();
drivers/media/platform/davinci/vpif_display.c:						ktime_get_ns();
drivers/media/platform/vivid/vivid-rds-gen.c:#include <linux/ktime.h>
drivers/media/platform/vivid/vivid-radio-rx.c:	ktime_get_ts(&ts);
drivers/media/platform/vivid/vivid-radio-tx.c:	ktime_get_ts(&ts);
drivers/media/platform/vivid/vivid-kthread-cap.c:		buf->vb.vb2_buf.timestamp = ktime_get_ns();
drivers/media/platform/vivid/vivid-kthread-cap.c:		buf->vb.vb2_buf.timestamp = ktime_get_ns();
drivers/media/platform/vivid/vivid-kthread-out.c:			ktime_get_ns() + dev->time_wrap_offset;
drivers/media/platform/vivid/vivid-kthread-out.c:			ktime_get_ns() + dev->time_wrap_offset;
drivers/media/platform/vivid/vivid-vbi-gen.c:#include <linux/ktime.h>
drivers/media/platform/vivid/vivid-vbi-cap.c:	buf->vb.vb2_buf.timestamp = ktime_get_ns() + dev->time_wrap_offset;
drivers/media/platform/vivid/vivid-vbi-cap.c:	buf->vb.vb2_buf.timestamp = ktime_get_ns() + dev->time_wrap_offset;
drivers/media/platform/vivid/vivid-ctrls.c:		 * calculate ktime_get_ns() % ((1 << 32) * NSEC_PER_SEC), and
drivers/media/platform/vivid/vivid-ctrls.c:		div64_u64_rem(ktime_get_ns(),
drivers/media/platform/vivid/vivid-core.c:	ktime_get_ts(&dev->radio_rds_init_ts);
drivers/media/platform/vivid/vivid-sdr-cap.c:			ktime_get_ns() + dev->time_wrap_offset;
drivers/media/v4l2-core/v4l2-common.c:	ktime_get_ts(&ts);
drivers/media/v4l2-core/videobuf2-core.c:			b->timestamp = ktime_get_ns();
drivers/media/v4l2-core/videobuf2-core.c:			vb->timestamp = ktime_get_ns();;
drivers/media/v4l2-core/v4l2-event.c:	ktime_get_ts(&timestamp);
drivers/media/v4l2-core/v4l2-event.c:	ktime_get_ts(&timestamp);
drivers/media/rc/rc-core-priv.h:	ktime_t				last_event;	/* when last event occurred */
drivers/media/rc/rc-core-priv.h:		ktime_t gap_start;
drivers/media/rc/streamzap.c:#include <linux/ktime.h>
drivers/media/rc/streamzap.c:	ktime_t			signal_last;
drivers/media/rc/streamzap.c:	ktime_t			signal_start;
drivers/media/rc/streamzap.c:		sz->signal_start = ktime_get_real();
drivers/media/rc/streamzap.c:		delta = ktime_us_delta(sz->signal_start, sz->signal_last);
drivers/media/rc/streamzap.c:	sz->signal_start = ktime_get_real();
drivers/media/rc/ir-lirc-codec.c:		lirc->gap_start = ktime_get();
drivers/media/rc/ir-lirc-codec.c:			lirc->gap_duration += ktime_to_ns(ktime_sub(ktime_get(),
drivers/media/rc/ir-lirc-codec.c:	ktime_t start;
drivers/media/rc/ir-lirc-codec.c:	start = ktime_get();
drivers/media/rc/ir-lirc-codec.c:	towait = ktime_us_delta(ktime_add_us(start, duration), ktime_get());
drivers/media/rc/rc-ir-raw.c:	ktime_t			now;
drivers/media/rc/rc-ir-raw.c:	now = ktime_get();
drivers/media/rc/rc-ir-raw.c:	delta = ktime_to_ns(ktime_sub(now, dev->raw->last_event));
drivers/media/rc/ir-rx51.c:	ktime_t now;
drivers/media/rc/ir-rx51.c:		      ns_to_ktime(1000 * lirc_rx51->wbuf[0]),
drivers/media/dvb-core/dvb_demux.c:		ktime_t cur_time;
drivers/media/dvb-core/dvb_demux.c:			cur_time = ktime_get();
drivers/media/dvb-core/dvb_demux.c:			if (ktime_to_ns(demux->speed_last_time) != 0) {
drivers/media/dvb-core/dvb_demux.c:				speed_timedelta = ktime_ms_delta(cur_time,
drivers/media/dvb-core/dvb_demux.c:			   size_t circular_buffer_size, ktime_t timeout)
drivers/media/dvb-core/dmxdev.c:	ktime_t timeout = ktime_set(0, 0);
drivers/media/dvb-core/dvb_frontend.c:#include <linux/ktime.h>
drivers/media/dvb-core/dvb_frontend.c:void dvb_frontend_sleep_until(ktime_t *waketime, u32 add_usec)
drivers/media/dvb-core/dvb_frontend.c:	*waketime = ktime_add_us(*waketime, add_usec);
drivers/media/dvb-core/dvb_frontend.c:	delta = ktime_us_delta(ktime_get_boottime(), *waketime);
drivers/media/dvb-core/dvb_frontend.c:		delta = ktime_us_delta(ktime_get_boottime(), *waketime);
drivers/media/dvb-core/dvb_frontend.c:			ktime_t nexttime;
drivers/media/dvb-core/dvb_frontend.c:			ktime_t tv[10];
drivers/media/dvb-core/dvb_frontend.c:			nexttime = ktime_get_boottime();
drivers/media/dvb-core/dvb_frontend.c:					tv[i+1] = ktime_get_boottime();
drivers/media/dvb-core/dvb_frontend.c:					(int) ktime_us_delta(tv[i], tv[i-1]));
drivers/media/dvb-core/dvb_frontend.h: * @waketime: pointer to a struct ktime_t
drivers/media/dvb-core/dvb_frontend.h:void dvb_frontend_sleep_until(ktime_t *waketime, u32 add_usec);
drivers/media/dvb-core/demux.h:		   ktime_t timeout);
drivers/media/dvb-core/dvb_net.c:		ktime_t timeout = ns_to_ktime(10 * NSEC_PER_MSEC);
drivers/media/dvb-core/dvb_demux.h:	ktime_t timeout;
drivers/media/dvb-core/dvb_demux.h:	ktime_t speed_last_time; /* for TS speed check */
drivers/media/dvb-frontends/rtl2832_sdr.c:		fbuf->vb.vb2_buf.timestamp = ktime_get_ns();
drivers/media/dvb-frontends/stv0299.c:#include <linux/ktime.h>
drivers/media/dvb-frontends/stv0299.c:	ktime_t nexttime;
drivers/media/dvb-frontends/stv0299.c:	ktime_t tv[10];
drivers/media/dvb-frontends/stv0299.c:	nexttime = ktime_get_boottime();
drivers/media/dvb-frontends/stv0299.c:			tv[i+1] = ktime_get_boottime();
drivers/media/dvb-frontends/stv0299.c:			       (int) ktime_us_delta(tv[i], tv[i-1]));
drivers/media/dvb-frontends/stv0900_sw.c:		locktimeout,
drivers/media/dvb-frontends/stv0900_sw.c:		locktimeout = demod_timeout / 3;
drivers/media/dvb-frontends/stv0900_sw.c:		locktimeout = demod_timeout / 2;
drivers/media/dvb-frontends/stv0900_sw.c:	lock = stv0900_get_demod_lock(intp, d, locktimeout);
drivers/clk/bcm/clk-bcm2835.c:	ktime_t timeout;
drivers/clk/bcm/clk-bcm2835.c:	timeout = ktime_add_ns(ktime_get(), LOCK_TIMEOUT_NS);
drivers/clk/bcm/clk-bcm2835.c:		if (ktime_after(ktime_get(), timeout)) {
drivers/clk/bcm/clk-bcm2835.c:	ktime_t timeout = ktime_add_ns(ktime_get(), LOCK_TIMEOUT_NS);
drivers/clk/bcm/clk-bcm2835.c:		if (ktime_after(ktime_get(), timeout)) {
drivers/clk/qcom/gdsc.c:#include <linux/ktime.h>
drivers/clk/qcom/gdsc.c:	ktime_t start;
drivers/clk/qcom/gdsc.c:	start = ktime_get();
drivers/clk/qcom/gdsc.c:	} while (ktime_us_delta(ktime_get(), start) < TIMEOUT_US);
drivers/clk/samsung/clk-pll.c:	ktime_t start;
drivers/clk/samsung/clk-pll.c:	start = ktime_get();
drivers/clk/samsung/clk-pll.c:		ktime_t delta = ktime_sub(ktime_get(), start);
drivers/clk/samsung/clk-pll.c:		if (ktime_to_ms(delta) > PLL_TIMEOUT_MS) {
drivers/clk/samsung/clk-pll.c:	ktime_t start;
drivers/clk/samsung/clk-pll.c:	start = ktime_get();
drivers/clk/samsung/clk-pll.c:		ktime_t delta = ktime_sub(ktime_get(), start);
drivers/clk/samsung/clk-pll.c:		if (ktime_to_ms(delta) > PLL_TIMEOUT_MS) {
drivers/log/hwlog_kernel.c:	ktime_get_ts(&upts);
drivers/s390/crypto/ap_bus.c:#include <linux/ktime.h>
drivers/s390/crypto/ap_bus.c:	ktime_t hr_time;
drivers/s390/crypto/ap_bus.c:			hr_time = ktime_set(0, poll_timeout);
drivers/s390/crypto/ap_bus.c:	ktime_t hr_time;
drivers/s390/crypto/ap_bus.c:	hr_time = ktime_set(0, poll_timeout);
drivers/iommu/arm-smmu-v3.c:	ktime_t timeout = ktime_add_us(ktime_get(), ARM_SMMU_POLL_TIMEOUT_US);
drivers/iommu/arm-smmu-v3.c:		if (ktime_compare(ktime_get(), timeout) > 0)
drivers/crypto/hifn_795x.c:#include <linux/ktime.h>
drivers/crypto/hifn_795x.c:	ktime_t			rngtime;
drivers/crypto/hifn_795x.c:	nsec = ktime_to_ns(ktime_sub(ktime_get(), dev->rngtime));
drivers/crypto/hifn_795x.c:	dev->rngtime = ktime_get();
drivers/crypto/hifn_795x.c:	dev->rngtime = ktime_get();
drivers/crypto/nx/nx-842.c:	ktime_t timeout;
drivers/crypto/nx/nx-842.c:	timeout = ktime_add_ms(ktime_get(), COMP_BUSY_TIMEOUT);
drivers/crypto/nx/nx-842.c:	} while (ret == -EBUSY && ktime_before(ktime_get(), timeout));
drivers/crypto/nx/nx-842.c:	ktime_t timeout;
drivers/crypto/nx/nx-842.c:	timeout = ktime_add_ms(ktime_get(), DECOMP_BUSY_TIMEOUT);
drivers/crypto/nx/nx-842.c:	} while (ret == -EBUSY && ktime_before(ktime_get(), timeout));
drivers/crypto/nx/nx-842-powernv.c:	ktime_t start;
drivers/crypto/nx/nx-842-powernv.c:	ktime_t start = wmem->start, now = ktime_get();
drivers/crypto/nx/nx-842-powernv.c:	ktime_t timeout = ktime_add_ms(start, CSB_WAIT_MAX);
drivers/crypto/nx/nx-842-powernv.c:		now = ktime_get();
drivers/crypto/nx/nx-842-powernv.c:		if (ktime_after(now, timeout))
drivers/crypto/nx/nx-842-powernv.c:			(long)ktime_us_delta(now, start));
drivers/crypto/nx/nx-842-powernv.c:			     (unsigned long)ktime_us_delta(now, start));
drivers/crypto/nx/nx-842-powernv.c:	wmem->start = ktime_get();
drivers/misc/ioc4.c:#include <linux/ktime.h>
drivers/misc/ioc4.c:	start = ktime_get_ns();
drivers/misc/ioc4.c:			start = ktime_get_ns();
drivers/misc/ioc4.c:	end = ktime_get_ns();
drivers/misc/lkdtm_core.c:static int jp_hrtimer_start(struct hrtimer *timer, ktime_t tim,
drivers/misc/memory_state_time.c:	pr_debug("Current Time: %llu\n", ktime_get_boot_ns());
drivers/misc/memory_state_time.c:			freq_container->time_now = ktime_get_boot_ns();
drivers/misc/memory_state_time.c:			bw_container->time_now = ktime_get_boot_ns();
drivers/misc/memory_state_time.c:	last_update = ktime_get_boot_ns();
drivers/misc/mei/hw-txe.c:#include <linux/ktime.h>
drivers/misc/mei/hw-txe.c:	ktime_t stop, start;
drivers/misc/mei/hw-txe.c:	start = ktime_get();
drivers/misc/mei/hw-txe.c:	stop = ktime_add(start, ms_to_ktime(SEC_ALIVENESS_WAIT_TIMEOUT));
drivers/misc/mei/hw-txe.c:				ktime_to_us(ktime_sub(ktime_get(), start)));
drivers/misc/mei/hw-txe.c:	} while (ktime_before(ktime_get(), stop));
drivers/misc/ibmasm/ibmasm.h:	ktime_get_real_ts64(&now);
drivers/cpufreq/hisi/hifreq_hotplug.c:		bL_cpufreq_data.last_down_time = ktime_to_us(ktime_get());
drivers/cpufreq/hisi/hifreq_hotplug.c:		bL_cpufreq_data.last_up_time = ktime_to_us(ktime_get());
drivers/cpufreq/hisi/hifreq_hotplug.c:	now = ktime_to_us(ktime_get());
drivers/cpufreq/hisi/hifreq_hotplug.c:	data->last_up_time = ktime_to_us(ktime_get());
drivers/cpufreq/intel_pstate.c:#include <linux/ktime.h>
drivers/cpufreq/s3c24xx-cpufreq.c:	/* Note, driver registering should probably update locktime */
drivers/cpufreq/s3c24xx-cpufreq.c:static inline u32 calc_locktime(u32 freq, u32 time_us)
drivers/cpufreq/s3c24xx-cpufreq.c:	unsigned int bits = cpu_cur.info->locktime_bits;
drivers/cpufreq/s3c24xx-cpufreq.c:	val = calc_locktime(rate, cpu_cur.info->locktime_u) << bits;
drivers/cpufreq/s3c24xx-cpufreq.c:	val |= calc_locktime(rate, cpu_cur.info->locktime_m);
drivers/cpufreq/s3c24xx-cpufreq.c:	pr_info("%s: new locktime is 0x%08x\n", __func__, val);
drivers/cpufreq/speedstep-lib.c:	ktime_t tv1, tv2;
drivers/cpufreq/speedstep-lib.c:		tv1 = ktime_get();
drivers/cpufreq/speedstep-lib.c:		tv2 = ktime_get();
drivers/cpufreq/speedstep-lib.c:		*transition_latency = ktime_to_us(ktime_sub(tv2, tv1));
drivers/cpufreq/powernow-k8.c:		data->plllock = psb->plllocktime;
drivers/cpufreq/powernow-k8.c:		pr_debug("plllocktime: 0x%x (units 1us)\n", psb->plllocktime);
drivers/cpufreq/s3c2412-cpufreq.c:	.locktime_m	= 150,
drivers/cpufreq/s3c2412-cpufreq.c:	.locktime_u	= 150,
drivers/cpufreq/s3c2412-cpufreq.c:	.locktime_bits	= 16,
drivers/cpufreq/s3c2440-cpufreq.c:	.locktime_m	= 300,
drivers/cpufreq/s3c2440-cpufreq.c:	.locktime_u	= 300,
drivers/cpufreq/s3c2440-cpufreq.c:	.locktime_bits	= 16,
drivers/cpufreq/cpufreq_interactive.c:	/* End time of boost pulse in ktime converted to usecs */
drivers/cpufreq/cpufreq_interactive.c:				icpu->pol_hispeed_val_time = ktime_to_us(ktime_get());
drivers/cpufreq/cpufreq_interactive.c:		tunables->boostpulse_endtime = ktime_to_us(ktime_get());
drivers/cpufreq/cpufreq_interactive.c:	now = ktime_to_us(ktime_get());
drivers/cpufreq/cpufreq_interactive.c:		icpu->pol_floor_val_time = ktime_to_us(ktime_get());
drivers/cpufreq/powernow-k8.h:	u8 plllocktime;
drivers/cpufreq/s3c2410-cpufreq.c:	.locktime_m	= 150,
drivers/cpufreq/s3c2410-cpufreq.c:	.locktime_u	= 150,
drivers/cpufreq/s3c2410-cpufreq.c:	.locktime_bits	= 12,
drivers/dma/dmatest.c:	ktime_t			ktime, start, diff;
drivers/dma/dmatest.c:	ktime_t			filltime = ktime_set(0, 0);
drivers/dma/dmatest.c:	ktime_t			comparetime = ktime_set(0, 0);
drivers/dma/dmatest.c:	ktime = ktime_get();
drivers/dma/dmatest.c:			start = ktime_get();
drivers/dma/dmatest.c:			diff = ktime_sub(ktime_get(), start);
drivers/dma/dmatest.c:			filltime = ktime_add(filltime, diff);
drivers/dma/dmatest.c:		start = ktime_get();
drivers/dma/dmatest.c:		diff = ktime_sub(ktime_get(), start);
drivers/dma/dmatest.c:		comparetime = ktime_add(comparetime, diff);
drivers/dma/dmatest.c:	ktime = ktime_sub(ktime_get(), ktime);
drivers/dma/dmatest.c:	ktime = ktime_sub(ktime, comparetime);
drivers/dma/dmatest.c:	ktime = ktime_sub(ktime, filltime);
drivers/dma/dmatest.c:	runtime = ktime_to_us(ktime);
drivers/bus/arm-ccn.c:static ktime_t arm_ccn_pmu_timer_period(void)
drivers/bus/arm-ccn.c:	return ns_to_ktime((u64)arm_ccn_pmu_poll_period_us * 1000);
drivers/hsi/clients/cmt_speech.c:		ktime_get_ts(&tspec);
drivers/rphone/rasbase/rasbase.c:ras_mktime(unsigned int year, unsigned int mon,
drivers/staging/rtl8188eu/core/rtw_led.c:		RT_TRACE(_module_rtl8712_led_c_, _drv_info_, ("Blinktimes (%d): turn on\n", pLed->BlinkTimes));
drivers/staging/rtl8188eu/core/rtw_led.c:		RT_TRACE(_module_rtl8712_led_c_, _drv_info_, ("Blinktimes (%d): turn off\n", pLed->BlinkTimes));
drivers/staging/lustre/lustre/ptlrpc/lproc_ptlrpc.c:		s2dhms(&ts, ktime_get_real_seconds() - worstt);
drivers/staging/lustre/lustre/ptlrpc/niobuf.c:		req->rq_bulk_deadline = ktime_get_real_seconds() + LONG_UNLINK;
drivers/staging/lustre/lustre/ptlrpc/niobuf.c:	int service_time = max_t(int, ktime_get_real_seconds() -
drivers/staging/lustre/lustre/ptlrpc/niobuf.c:	req->rq_sent = ktime_get_real_seconds();
drivers/staging/lustre/lustre/ptlrpc/niobuf.c:	ktime_get_real_ts64(&request->rq_sent_tv);
drivers/staging/lustre/lustre/ptlrpc/niobuf.c:	request->rq_sent = ktime_get_real_seconds();
drivers/staging/lustre/lustre/ptlrpc/sec_lproc.c:		   (s64)(sec->ps_gc_next - ktime_get_real_seconds()) : 0ll);
drivers/staging/lustre/lustre/ptlrpc/sec_bulk.c:		   (long)(ktime_get_seconds() - page_pools.epp_last_shrink),
drivers/staging/lustre/lustre/ptlrpc/sec_bulk.c:		   (long)(ktime_get_seconds() - page_pools.epp_last_access),
drivers/staging/lustre/lustre/ptlrpc/sec_bulk.c:	if (unlikely(ktime_get_seconds() - page_pools.epp_last_access >
drivers/staging/lustre/lustre/ptlrpc/sec_bulk.c:		page_pools.epp_last_shrink = ktime_get_seconds();
drivers/staging/lustre/lustre/ptlrpc/sec_bulk.c:	if (unlikely(ktime_get_seconds() - page_pools.epp_last_access >
drivers/staging/lustre/lustre/ptlrpc/sec_bulk.c:	page_pools.epp_last_shrink = ktime_get_seconds();
drivers/staging/lustre/lustre/ptlrpc/sec_bulk.c:	page_pools.epp_last_access = ktime_get_seconds();
drivers/staging/lustre/lustre/ptlrpc/sec.c:	    imp->imp_sec_expire < ktime_get_real_seconds()) {
drivers/staging/lustre/lustre/ptlrpc/sec.c:		exp->exp_flvr_expire[0] = ktime_get_real_seconds() +
drivers/staging/lustre/lustre/ptlrpc/sec.c:		if (exp->exp_flvr_expire[0] >= ktime_get_real_seconds()) {
drivers/staging/lustre/lustre/ptlrpc/sec.c:				       ktime_get_real_seconds()));
drivers/staging/lustre/lustre/ptlrpc/sec.c:		if (exp->exp_flvr_expire[1] >= ktime_get_real_seconds()) {
drivers/staging/lustre/lustre/ptlrpc/sec.c:				       ktime_get_real_seconds()));
drivers/staging/lustre/lustre/ptlrpc/sec.c:	      (s64)(exp->exp_flvr_expire[0] - ktime_get_real_seconds()) : 0,
drivers/staging/lustre/lustre/ptlrpc/sec.c:	      (s64)(exp->exp_flvr_expire[1] - ktime_get_real_seconds()) : 0);
drivers/staging/lustre/lustre/ptlrpc/service.c:	svcpt->scp_at_checktime = cfs_time_current();
drivers/staging/lustre/lustre/ptlrpc/service.c:	next = (__s32)(array->paa_deadline - ktime_get_real_seconds() -
drivers/staging/lustre/lustre/ptlrpc/service.c:	long olddl = req->rq_deadline - ktime_get_real_seconds();
drivers/staging/lustre/lustre/ptlrpc/service.c:		    ktime_get_real_seconds() - req->rq_arrival_time.tv_sec);
drivers/staging/lustre/lustre/ptlrpc/service.c:			  olddl, newdl - ktime_get_real_seconds());
drivers/staging/lustre/lustre/ptlrpc/service.c:	time64_t now = ktime_get_real_seconds();
drivers/staging/lustre/lustre/ptlrpc/service.c:	delay = cfs_time_sub(cfs_time_current(), svcpt->scp_at_checktime);
drivers/staging/lustre/lustre/ptlrpc/service.c:	if (ktime_get_real_seconds() - req->rq_arrival_time.tv_sec > 5)
drivers/staging/lustre/lustre/ptlrpc/service.c:			  (long)(ktime_get_real_seconds() -
drivers/staging/lustre/lustre/ptlrpc/service.c:	ktime_get_real_ts64(&work_start);
drivers/staging/lustre/lustre/ptlrpc/service.c:	if (ktime_get_real_seconds() > request->rq_deadline) {
drivers/staging/lustre/lustre/ptlrpc/service.c:			  (long)(ktime_get_real_seconds() -
drivers/staging/lustre/lustre/ptlrpc/service.c:	if (unlikely(ktime_get_real_seconds() > request->rq_deadline)) {
drivers/staging/lustre/lustre/ptlrpc/service.c:			  (s64)ktime_get_real_seconds() - request->rq_deadline);
drivers/staging/lustre/lustre/ptlrpc/service.c:	ktime_get_real_ts64(&work_end);
drivers/staging/lustre/lustre/ptlrpc/events.c:	req->rq_real_sent = ktime_get_real_seconds();
drivers/staging/lustre/lustre/ptlrpc/events.c:	req->rq_import->imp_last_reply_time = ktime_get_real_seconds();
drivers/staging/lustre/lustre/ptlrpc/events.c:	ktime_get_real_ts64(&req->rq_arrival_time);
drivers/staging/lustre/lustre/ptlrpc/client.c:	time64_t now = ktime_get_real_seconds();
drivers/staging/lustre/lustre/ptlrpc/client.c:		  (long)(req->rq_deadline - ktime_get_real_seconds()),
drivers/staging/lustre/lustre/ptlrpc/client.c:			*fail_t = ktime_get_real_seconds() + LONG_UNLINK;
drivers/staging/lustre/lustre/ptlrpc/client.c:				*fail2_t = ktime_get_real_seconds() +
drivers/staging/lustre/lustre/ptlrpc/client.c:		time64_t now = ktime_get_real_seconds();
drivers/staging/lustre/lustre/ptlrpc/client.c:	ktime_get_real_ts64(&work_start);
drivers/staging/lustre/lustre/ptlrpc/client.c:	if (req->rq_sent && (req->rq_sent > ktime_get_real_seconds()) &&
drivers/staging/lustre/lustre/ptlrpc/client.c:		    req->rq_sent > ktime_get_real_seconds())
drivers/staging/lustre/lustre/ptlrpc/client.c:	time64_t now = ktime_get_real_seconds();
drivers/staging/lustre/lustre/ptlrpc/client.c:	time64_t now = ktime_get_real_seconds();
drivers/staging/lustre/lustre/ptlrpc/client.c:			ktime_get_real_seconds() + LONG_UNLINK;
drivers/staging/lustre/lustre/ptlrpc/client.c:	time64_t now = ktime_get_real_seconds();
drivers/staging/lustre/lustre/ptlrpc/client.c:	req->rq_sent		= ktime_get_real_seconds();
drivers/staging/lustre/lustre/ptlrpc/sec_config.c:			imp->imp_sec_expire = ktime_get_real_seconds() +
drivers/staging/lustre/lustre/ptlrpc/import.c:		ktime_get_real_seconds();
drivers/staging/lustre/lustre/ptlrpc/import.c:	time64_t now = ktime_get_real_seconds();
drivers/staging/lustre/lustre/ptlrpc/import.c:	time64_t now = ktime_get_real_seconds();
drivers/staging/lustre/lustre/ptlrpc/sec_gc.c:	sec->ps_gc_next = ktime_get_real_seconds() + sec->ps_gc_interval;
drivers/staging/lustre/lustre/ptlrpc/sec_gc.c:	if (sec->ps_gc_next > ktime_get_real_seconds())
drivers/staging/lustre/lustre/ptlrpc/sec_gc.c:	sec->ps_gc_next = ktime_get_real_seconds() + sec->ps_gc_interval;
drivers/staging/lustre/lustre/obdclass/obd_config.c:	ktime_t	start;
drivers/staging/lustre/lustre/obdclass/obd_config.c:	ktime_t	end;
drivers/staging/lustre/lustre/obdclass/obd_config.c:	start = ktime_get();
drivers/staging/lustre/lustre/obdclass/obd_config.c:	end = ktime_get();
drivers/staging/lustre/lustre/obdclass/obd_config.c:		       (long)ktime_us_delta(end, start));
drivers/staging/lustre/lustre/obdclass/obd_config.c:		       (long)ktime_us_delta(end, start));
drivers/staging/lustre/lustre/obdclass/llog.c:		llh->llh_timestamp = ktime_get_real_seconds();
drivers/staging/lustre/lustre/obdclass/lustre_handles.c:	ktime_get_ts64(&ts);
drivers/staging/lustre/lustre/obdclass/lprocfs_status.c:	now = ktime_get_real_seconds();
drivers/staging/lustre/lustre/obdclass/lprocfs_status.c:		ktime_get_real_ts64(&now);
drivers/staging/lustre/lustre/mdc/mdc_request.c:		rec->sx_time   = ktime_get_real_seconds();
drivers/staging/lustre/lustre/mdc/mdc_reint.c:		req->rq_sent = ktime_get_real_seconds() + resends;
drivers/staging/lustre/lustre/mdc/mdc_locks.c:		req->rq_sent = ktime_get_real_seconds() + resends;
drivers/staging/lustre/lustre/include/lustre_net.h:	unsigned long			scp_at_checktime;
drivers/staging/lustre/lustre/include/lustre_net.h:	if (req->rq_bulk_deadline > ktime_get_real_seconds())
drivers/staging/lustre/lustre/include/lustre_net.h:	if (req->rq_reply_deadline > ktime_get_real_seconds())
drivers/staging/lustre/lustre/include/lustre_net.h:	if (req->rq_reply_deadline > ktime_get_real_seconds())
drivers/staging/lustre/lustre/include/lustre_net.h:	if (req->rq_reply_deadline > ktime_get_real_seconds()) {
drivers/staging/lustre/lustre/include/lustre_net.h:	if (req->rq_req_deadline > ktime_get_real_seconds()) {
drivers/staging/lustre/lustre/include/lustre_import.h:	at->at_worst_time = ktime_get_real_seconds();
drivers/staging/lustre/lustre/osc/osc_request.c:		new_req->rq_sent = ktime_get_real_seconds() + new_req->rq_timeout;
drivers/staging/lustre/lustre/osc/osc_request.c:		new_req->rq_sent = ktime_get_real_seconds() + aa->aa_resends;
drivers/staging/lustre/lustre/osc/lproc_osc.c:	ktime_get_real_ts64(&now);
drivers/staging/lustre/lustre/osc/lproc_osc.c:	ktime_get_real_ts64(&now);
drivers/staging/lustre/lustre/osc/osc_io.c:		attr->cat_atime = ktime_get_real_seconds();
drivers/staging/lustre/lustre/osc/osc_io.c:	attr->cat_ctime = ktime_get_real_seconds();
drivers/staging/lustre/lustre/llite/super25.c:	ktime_get_ts64(&ts);
drivers/staging/lustre/lustre/llite/llite_lib.c:		       (s64)ktime_get_real_seconds());
drivers/staging/lustre/lustre/llite/llite_lib.c:	op_data->op_mod_time = ktime_get_real_seconds();
drivers/staging/lustre/lustre/llite/lproc_llite.c:	ktime_get_real_ts64(&now);
drivers/staging/lustre/lustre/llite/lproc_llite.c:	ktime_get_real_ts64(&now);
drivers/staging/lustre/lustre/llite/lproc_llite.c:	ktime_get_real_ts64(&now);
drivers/staging/lustre/lustre/ldlm/ldlm_request.c:			      (s64)(ktime_get_real_seconds() -
drivers/staging/lustre/lustre/ldlm/ldlm_request.c:			   (s64)(ktime_get_real_seconds() -
drivers/staging/lustre/lustre/ldlm/ldlm_request.c:		   (s64)(ktime_get_real_seconds() - lock->l_last_activity),
drivers/staging/lustre/lustre/ldlm/ldlm_request.c:		delay = ktime_get_real_seconds() - lock->l_last_activity;
drivers/staging/lustre/lustre/ldlm/ldlm_request.c:	lock->l_last_activity = ktime_get_real_seconds();
drivers/staging/lustre/lustre/ldlm/ldlm_request.c:	lock->l_last_activity = ktime_get_real_seconds();
drivers/staging/lustre/lustre/ldlm/ldlm_pool.c:	recalc_interval_sec = ktime_get_real_seconds() - pl->pl_recalc_time;
drivers/staging/lustre/lustre/ldlm/ldlm_pool.c:	recalc_interval_sec = ktime_get_real_seconds() - pl->pl_recalc_time;
drivers/staging/lustre/lustre/ldlm/ldlm_pool.c:	pl->pl_recalc_time = ktime_get_real_seconds();
drivers/staging/lustre/lustre/ldlm/ldlm_pool.c:	recalc_interval_sec = ktime_get_real_seconds() - pl->pl_recalc_time;
drivers/staging/lustre/lustre/ldlm/ldlm_pool.c:		recalc_interval_sec = ktime_get_real_seconds() - pl->pl_recalc_time;
drivers/staging/lustre/lustre/ldlm/ldlm_pool.c:	recalc_interval_sec = pl->pl_recalc_time - ktime_get_real_seconds() +
drivers/staging/lustre/lustre/ldlm/ldlm_pool.c:	pl->pl_recalc_time = ktime_get_real_seconds();
drivers/staging/lustre/lnet/libcfs/linux/linux-tracefile.c:	ktime_get_real_ts64(&ts);
drivers/staging/lustre/lnet/libcfs/debug.c:	current_time = ktime_get_real_seconds();
drivers/staging/lustre/lnet/lnet/config.c:	ni->ni_last_alive = ktime_get_real_seconds();
drivers/staging/lustre/lnet/lnet/lib-move.c:	    ni->ni_last_alive != ktime_get_real_seconds()) {
drivers/staging/lustre/lnet/lnet/lib-move.c:		ni->ni_last_alive = ktime_get_real_seconds();
drivers/staging/lustre/lnet/lnet/router.c:	ktime_get_ts64(&ts);
drivers/staging/lustre/lnet/lnet/router.c:	now = ktime_get_real_seconds();
drivers/staging/lustre/lnet/lnet/router_proc.c:			time64_t now = ktime_get_real_seconds();
drivers/staging/lustre/lnet/lnet/api-ni.c:#include <linux/ktime.h>
drivers/staging/lustre/lnet/lnet/api-ni.c:	the_lnet.ln_interface_cookie = ktime_get_ns();
drivers/staging/lustre/lnet/lnet/api-ni.c:		secs_passed = (ktime_get_real_seconds() - data->ioc_u64[0]);
drivers/staging/lustre/lnet/klnds/socklnd/socklnd.c:	return ktime_get_ns();
drivers/staging/lustre/lnet/klnds/socklnd/socklnd.c:	ksocknal_data.ksnd_connd_starting_stamp = ktime_get_real_seconds();
drivers/staging/lustre/lnet/klnds/socklnd/socklnd_cb.c:	ksocknal_data.ksnd_connd_failed_stamp = ktime_get_real_seconds();
drivers/staging/lustre/lnet/klnds/socklnd/socklnd_cb.c:		time64_t sec = ktime_get_real_seconds();
drivers/staging/lustre/lnet/klnds/o2iblnd/o2iblnd.c:	ktime_get_real_ts64(&tv);
drivers/staging/lustre/lnet/klnds/o2iblnd/o2iblnd_cb.c:			    ktime_get_real_seconds()) {
drivers/staging/lustre/lnet/klnds/o2iblnd/o2iblnd_cb.c:				kiblnd_data.kib_reconn_sec = ktime_get_real_seconds();
drivers/staging/lustre/lnet/selftest/console.c:	console_session.ses_laststamp = ktime_get_real_seconds();
drivers/staging/lustre/lnet/selftest/timer.c:	LASSERT(timer->stt_expires > ktime_get_real_seconds());
drivers/staging/lustre/lnet/selftest/timer.c:	now = ktime_get_real_seconds();
drivers/staging/lustre/lnet/selftest/timer.c:	stt_data.stt_prev_slot = ktime_get_real_seconds() & STTIMER_SLOTTIMEMASK;
drivers/staging/lustre/lnet/selftest/framework.c:	timer->stt_expires = ktime_get_real_seconds() + sn->sn_timeout;
drivers/staging/lustre/lnet/selftest/ping_test.c:	ktime_get_real_ts64(&ts);
drivers/staging/lustre/lnet/selftest/ping_test.c:	ktime_get_real_ts64(&ts);
drivers/staging/lustre/lnet/selftest/brw_test.c:	ktime_get_ts64(&ts);
drivers/staging/lustre/lnet/selftest/conctl.c:	console_session.ses_laststamp = ktime_get_real_seconds();
drivers/staging/lustre/lnet/selftest/conrpc.c:	    ktime_get_real_seconds() - console_session.ses_laststamp >
drivers/staging/lustre/lnet/selftest/conrpc.c:	ptimer->stt_expires = ktime_get_real_seconds() + LST_PING_INTERVAL;
drivers/staging/lustre/lnet/selftest/conrpc.c:	ptimer->stt_expires = ktime_get_real_seconds() + LST_PING_INTERVAL;
drivers/staging/lustre/lnet/selftest/rpc.c:		scd->scd_buf_err_stamp = ktime_get_real_seconds();
drivers/staging/lustre/lnet/selftest/rpc.c:	timer->stt_expires = ktime_get_real_seconds() + rpc->crpc_timeout;
drivers/staging/lustre/lnet/selftest/rpc.c:		    scd->scd_buf_err_stamp < ktime_get_real_seconds()) {
drivers/staging/lustre/lnet/selftest/rpc.c:	srpc_data.rpc_matchbits = ((__u64)ktime_get_real_seconds()) << 48;
drivers/staging/comedi/comedi_fops.c:				ktime_get_real_ts64(&tv);
drivers/staging/comedi/drivers/comedi_test.c:#include <linux/ktime.h>
drivers/staging/comedi/drivers/comedi_test.c:	now = ktime_to_us(ktime_get());
drivers/staging/comedi/drivers/comedi_test.c:	devpriv->ai_convert_time = ktime_to_us(ktime_get()) +
drivers/staging/comedi/drivers/comedi_test.c:	now = ktime_to_us(ktime_get());
drivers/staging/comedi/drivers/comedi_test.c:	devpriv->ao_last_scan_time = ktime_to_us(ktime_get());
drivers/staging/comedi/drivers/serial2002.c:#include <linux/ktime.h>
drivers/staging/comedi/drivers/serial2002.c:	ktime_t start, now;
drivers/staging/comedi/drivers/serial2002.c:	start = ktime_get();
drivers/staging/comedi/drivers/serial2002.c:		now = ktime_get();
drivers/staging/comedi/drivers/serial2002.c:		elapsed = ktime_us_delta(now, start);
drivers/staging/greybus/timesync.c:/* Maximum difference we will accept converting FrameTime to ktime */
drivers/staging/greybus/timesync.c:static u32 gb_timesync_max_ktime_diff;
drivers/staging/greybus/timesync.c:/* Structure to convert from FrameTime to timespec/ktime */
drivers/staging/greybus/timesync.c:	struct dentry *frame_ktime_dentry;
drivers/staging/greybus/timesync.c:	struct timer_list ktime_timer;
drivers/staging/greybus/timesync.c:	struct gb_timesync_frame_time_data ktime_data;
drivers/staging/greybus/timesync.c:static void gb_timesync_ktime_timer_fn(unsigned long data);
drivers/staging/greybus/timesync.c: * Associate a FrameTime with a ktime timestamp represented as struct timespec
drivers/staging/greybus/timesync.c:static void gb_timesync_store_ktime(struct gb_timesync_svc *timesync_svc,
drivers/staging/greybus/timesync.c:	timesync_svc->ktime_data.ts = ts;
drivers/staging/greybus/timesync.c:	timesync_svc->ktime_data.frame_time = frame_time;
drivers/staging/greybus/timesync.c:			gb_timesync_store_ktime(timesync_svc,
drivers/staging/greybus/timesync.c: * to a reference FrameTime/ktime pair. It then returns the calculated
drivers/staging/greybus/timesync.c: * ktime based on the difference between the supplied FrameTime and
drivers/staging/greybus/timesync.c:	/* Support calculating ktime upwards or downwards from the reference */
drivers/staging/greybus/timesync.c:	if (frame_time < timesync_svc->ktime_data.frame_time) {
drivers/staging/greybus/timesync.c:		counts = timesync_svc->ktime_data.frame_time - frame_time;
drivers/staging/greybus/timesync.c:		counts = frame_time - timesync_svc->ktime_data.frame_time;
drivers/staging/greybus/timesync.c:	if (counts > gb_timesync_max_ktime_diff) {
drivers/staging/greybus/timesync.c:		ts->tv_sec = timesync_svc->ktime_data.ts.tv_sec + sec;
drivers/staging/greybus/timesync.c:		ts->tv_nsec = timesync_svc->ktime_data.ts.tv_nsec + nsec;
drivers/staging/greybus/timesync.c:		if (nsec > timesync_svc->ktime_data.ts.tv_nsec) {
drivers/staging/greybus/timesync.c:			nsec = nsec + timesync_svc->ktime_data.ts.tv_nsec;
drivers/staging/greybus/timesync.c:			nsec = timesync_svc->ktime_data.ts.tv_nsec - nsec;
drivers/staging/greybus/timesync.c:		if (sec > timesync_svc->ktime_data.ts.tv_sec) {
drivers/staging/greybus/timesync.c:		ts->tv_sec = timesync_svc->ktime_data.ts.tv_sec - sec;
drivers/staging/greybus/timesync.c:static size_t gb_timesync_log_frame_ktime(struct gb_timesync_svc *timesync_svc,
drivers/staging/greybus/timesync.c:				     size_t len, loff_t *offset, bool ktime)
drivers/staging/greybus/timesync.c:	if (ktime)
drivers/staging/greybus/timesync.c:		ret = gb_timesync_log_frame_ktime(timesync_svc, buf, PAGE_SIZE);
drivers/staging/greybus/timesync.c:static ssize_t gb_timesync_ping_read_frame_ktime(struct file *file,
drivers/staging/greybus/timesync.c:static const struct file_operations gb_timesync_debugfs_frame_ktime_ops = {
drivers/staging/greybus/timesync.c:	.read		= gb_timesync_ping_read_frame_ktime,
drivers/staging/greybus/timesync.c:	timesync_svc->frame_ktime_dentry =
drivers/staging/greybus/timesync.c:		debugfs_create_file("frame-ktime", S_IRUGO, svc->debugfs_dentry,
drivers/staging/greybus/timesync.c:				    &gb_timesync_debugfs_frame_ktime_ops);
drivers/staging/greybus/timesync.c:		debugfs_remove(timesync_svc->frame_ktime_dentry);
drivers/staging/greybus/timesync.c:	init_timer(&timesync_svc->ktime_timer);
drivers/staging/greybus/timesync.c:	timesync_svc->ktime_timer.function = gb_timesync_ktime_timer_fn;
drivers/staging/greybus/timesync.c:	timesync_svc->ktime_timer.expires = jiffies + GB_TIMESYNC_KTIME_UPDATE;
drivers/staging/greybus/timesync.c:	timesync_svc->ktime_timer.data = (unsigned long)timesync_svc;
drivers/staging/greybus/timesync.c:	add_timer(&timesync_svc->ktime_timer);
drivers/staging/greybus/timesync.c:	del_timer_sync(&timesync_svc->ktime_timer);
drivers/staging/greybus/timesync.c:	debugfs_remove(timesync_svc->frame_ktime_dentry);
drivers/staging/greybus/timesync.c:/* Incrementally updates the conversion base from FrameTime to ktime */
drivers/staging/greybus/timesync.c:static void gb_timesync_ktime_timer_fn(unsigned long data)
drivers/staging/greybus/timesync.c:	ktime_get_ts(&ts);
drivers/staging/greybus/timesync.c:	gb_timesync_store_ktime(timesync_svc, ts, frame_time);
drivers/staging/greybus/timesync.c:	mod_timer(&timesync_svc->ktime_timer,
drivers/staging/greybus/timesync.c:	ktime_get_ts(&ts);
drivers/staging/greybus/timesync.c:	/* Calculate the maximum number of clocks we will convert to ktime */
drivers/staging/greybus/timesync.c:	gb_timesync_max_ktime_diff =
drivers/staging/greybus/timesync.c:	pr_info("Time-Sync @ %lu Hz max ktime conversion +/- %d seconds\n",
drivers/staging/media/lirc/lirc_serial.c:#include <linux/ktime.h>
drivers/staging/media/lirc/lirc_serial.c:static ktime_t lastkt;
drivers/staging/media/lirc/lirc_serial.c:	ktime_t kt;
drivers/staging/media/lirc/lirc_serial.c:	ktime_t delkt;
drivers/staging/media/lirc/lirc_serial.c:			kt = ktime_get();
drivers/staging/media/lirc/lirc_serial.c:					dcd, sense, ktime_to_us(kt),
drivers/staging/media/lirc/lirc_serial.c:					ktime_to_us(lastkt));
drivers/staging/media/lirc/lirc_serial.c:			delkt = ktime_sub(kt, lastkt);
drivers/staging/media/lirc/lirc_serial.c:			if (ktime_compare(delkt, ktime_set(15, 0)) > 0) {
drivers/staging/media/lirc/lirc_serial.c:						dcd, sense, ktime_to_us(kt),
drivers/staging/media/lirc/lirc_serial.c:						ktime_to_us(lastkt));
drivers/staging/media/lirc/lirc_serial.c:				data = (int) ktime_to_us(delkt);
drivers/staging/media/lirc/lirc_serial.c:	lastkt = ktime_get();
drivers/staging/media/lirc/lirc_serial.c:	lastkt = ktime_get();
drivers/staging/media/lirc/lirc_sir.c:#include <linux/ktime.h>
drivers/staging/media/lirc/lirc_sir.c:static ktime_t last;
drivers/staging/media/lirc/lirc_sir.c:static ktime_t last_intr_time;
drivers/staging/media/lirc/lirc_sir.c:				  ktime_us_delta(last, last_intr_time),
drivers/staging/media/lirc/lirc_sir.c:	ktime_t curr_time;
drivers/staging/media/lirc/lirc_sir.c:				curr_time = ktime_get();
drivers/staging/media/lirc/lirc_sir.c:					     ktime_us_delta(last, curr_time),
drivers/staging/media/lirc/lirc_sir.c:						 ktime_us_delta(last_intr_time,
drivers/staging/media/lirc/lirc_sir.c:					last = ktime_sub_us(last,
drivers/staging/media/lirc/lirc_parallel.c:#include <linux/ktime.h>
drivers/staging/media/lirc/lirc_parallel.c:	ktime_t kt, now, timeout;
drivers/staging/media/lirc/lirc_parallel.c:	kt = ktime_get();
drivers/staging/media/lirc/lirc_parallel.c:	timeout = ktime_add_ns(kt, NSEC_PER_SEC);
drivers/staging/media/lirc/lirc_parallel.c:		now = ktime_get();
drivers/staging/media/lirc/lirc_parallel.c:	} while (count < 1000 && (ktime_before(now, timeout)));
drivers/staging/media/lirc/lirc_parallel.c:	timeelapsed = ktime_us_delta(now, kt);
drivers/staging/media/lirc/lirc_parallel.c:	ktime_t kt, delkt;
drivers/staging/media/lirc/lirc_parallel.c:	static ktime_t lastkt;
drivers/staging/media/lirc/lirc_parallel.c:		kt = ktime_get();
drivers/staging/media/lirc/lirc_parallel.c:		delkt = ktime_sub(kt, lastkt);
drivers/staging/media/lirc/lirc_parallel.c:		if (ktime_compare(delkt, ktime_set(15, 0)) > 0)
drivers/staging/media/lirc/lirc_parallel.c:			data = (int)(ktime_to_us(delkt) + LIRC_SFH506_DELAY);
drivers/staging/media/lirc/lirc_parallel.c:	lastkt = ktime_get();
drivers/staging/media/lirc/lirc_sasem.c:#include <linux/ktime.h>
drivers/staging/media/lirc/lirc_sasem.c:	ktime_t presstime;
drivers/staging/media/lirc/lirc_sasem.c:	ktime_t kt;
drivers/staging/media/lirc/lirc_sasem.c:	kt = ktime_get();
drivers/staging/media/lirc/lirc_sasem.c:	ns = ktime_to_ns(ktime_sub(kt, context->presstime));
drivers/staging/media/davinci_vpfe/vpfe_video.c:	video->cur_frm->vb.vb2_buf.timestamp = ktime_get_ns();
drivers/staging/media/cec/cec-adap.c:#include <linux/ktime.h>
drivers/staging/media/cec/cec-adap.c:		ts = ktime_get_ns();
drivers/staging/media/cec/cec-adap.c:	u64 ts = ktime_get_ns();
drivers/staging/media/cec/cec-adap.c:	data->msg.tx_ts = ktime_get_ns();
drivers/staging/media/cec/cec-adap.c:	u64 ts = ktime_get_ns();
drivers/staging/media/cec/cec-adap.c:	data->msg.rx_ts = ktime_get_ns();
drivers/staging/media/cec/cec-adap.c:			msg->tx_ts = ktime_get_ns();
drivers/staging/media/cec/cec-adap.c:	msg->rx_ts = ktime_get_ns();
drivers/staging/media/cec/cec-api.c:#include <linux/ktime.h>
drivers/staging/media/omap4iss/iss_video.c:	buf->vb.vb2_buf.timestamp = ktime_get_ns();
drivers/staging/netlogic/xlr_net.c:	unsigned long timeout, stoptime, checktime;
drivers/staging/netlogic/xlr_net.c:		checktime = jiffies;
drivers/staging/netlogic/xlr_net.c:		timedout = time_after(checktime, stoptime);
drivers/staging/netlogic/xlr_net.c:	unsigned long timeout, stoptime, checktime;
drivers/staging/netlogic/xlr_net.c:		checktime = jiffies;
drivers/staging/netlogic/xlr_net.c:		timedout = time_after(checktime, stoptime);
drivers/staging/olpc_dcon/olpc_dcon.c:	ktime_t delta_t, now;
drivers/staging/olpc_dcon/olpc_dcon.c:		now = ktime_get();
drivers/staging/olpc_dcon/olpc_dcon.c:		delta_t = ktime_sub(now, dcon->load_time);
drivers/staging/olpc_dcon/olpc_dcon.c:		if (ktime_to_ns(delta_t) > NSEC_PER_MSEC * 20)
drivers/staging/olpc_dcon/olpc_dcon.c:		dcon->load_time = ktime_get();
drivers/staging/olpc_dcon/olpc_dcon.c:		ktime_t delta_t;
drivers/staging/olpc_dcon/olpc_dcon.c:		dcon->load_time = ktime_get();
drivers/staging/olpc_dcon/olpc_dcon.c:			delta_t = ktime_sub(dcon->irq_time, dcon->load_time);
drivers/staging/olpc_dcon/olpc_dcon.c:			if (dcon->switched && ktime_to_ns(delta_t)
drivers/staging/olpc_dcon/olpc_dcon.c:				dcon->load_time = ktime_get();
drivers/staging/olpc_dcon/olpc_dcon.c:		dcon->irq_time = ktime_get();
drivers/staging/olpc_dcon/olpc_dcon.c:			dcon->irq_time = ktime_get();
drivers/staging/olpc_dcon/olpc_dcon.h:	ktime_t irq_time;
drivers/staging/olpc_dcon/olpc_dcon.h:	ktime_t load_time;
drivers/staging/android/vsoc.c:		hrtimer_set_expires_range_ns(&to->timer, timespec_to_ktime(ts),
drivers/staging/android/ion/ion_dma_pool_heap.c:	ktime_t t1 = ktime_get();
drivers/staging/android/ion/ion_dma_pool_heap.c:	t_ns = ktime_to_ns(ktime_sub(ktime_get(), t1));
drivers/staging/android/ion/ion_dma_pool_heap.c:	ktime_t t1 = ktime_get();
drivers/staging/android/ion/ion_dma_pool_heap.c:		t_ns = ktime_to_ns(ktime_sub(ktime_get(), t1));
drivers/staging/android/alarm-dev.c:static void devalarm_start(struct devalarm *alrm, ktime_t exp)
drivers/staging/android/alarm-dev.c:	devalarm_start(&alarms[alarm_type], timespec_to_ktime(*ts));
drivers/staging/android/alarm-dev.c:		ktime_get_ts(ts);
drivers/staging/android/alarm-dev.c:							ktime_t now)
drivers/staging/fbtft/fbtft.h:	ktime_t update_time;
drivers/staging/fbtft/fbtft-core.c:	ktime_t ts_start, ts_end;
drivers/staging/fbtft/fbtft-core.c:			ts_start = ktime_get();
drivers/staging/fbtft/fbtft-core.c:		ts_end = ktime_get();
drivers/staging/fbtft/fbtft-core.c:		if (!ktime_to_ns(par->update_time))
drivers/staging/fbtft/fbtft-core.c:		fps = ktime_us_delta(ts_start, par->update_time);
drivers/staging/fbtft/fbtft-core.c:		throughput = ktime_us_delta(ts_end, ts_start);
drivers/md/dm-stats.c:		now = ktime_to_ns(ktime_get());
drivers/md/dm-stats.c:				stats_aux->duration_ns = ktime_to_ns(ktime_get());
drivers/md/dm-stats.c:				stats_aux->duration_ns = ktime_to_ns(ktime_get()) - stats_aux->duration_ns;
drivers/md/md.c:	mddev->utime = ktime_get_real_seconds();
drivers/md/md.c:		mddev->ctime         = ktime_get_real_seconds();
drivers/md/md.c:	mddev->ctime         = ktime_get_real_seconds();
drivers/md/dm-core.h:#include <linux/ktime.h>
drivers/md/dm-core.h:	ktime_t last_rq_start_time;
drivers/md/raid10.c:	cur_time_mon = ktime_get_seconds();
drivers/md/bcache/bset.c:	ktime_t start = ktime_get();
drivers/md/bcache/bset.c:			       done / ktime_us_delta(ktime_get(), start));
drivers/md/dm-rq.c:		md->last_rq_start_time = ktime_get();
drivers/md/dm-rq.c:	ktime_t kt_deadline;
drivers/md/dm-rq.c:	kt_deadline = ns_to_ktime((u64)md->seq_rq_merge_deadline_usecs * NSEC_PER_USEC);
drivers/md/dm-rq.c:	kt_deadline = ktime_add_safe(md->last_rq_start_time, kt_deadline);
drivers/md/dm-rq.c:	return !ktime_after(ktime_get(), kt_deadline);
drivers/hwbfm/bfm/chipsets/qcom/bfm_qcom.c:    time_1980 = mktime(1980, 1, 1, 0, 0, 0);
drivers/scsi/stex.c:#include <linux/ktime.h>
drivers/scsi/stex.c:	h->hosttime = cpu_to_le64(ktime_get_real_seconds());
drivers/scsi/stex.c:	h->hosttime = cpu_to_le64(ktime_get_real_seconds());
drivers/scsi/gdth.c:	e->last_stamp = (u32)ktime_get_real_seconds();
drivers/scsi/gdth.c:	e->first_stamp = e->last_stamp = (u32)ktime_get_real_seconds();
drivers/scsi/gdth_proc.c:	    sec = (int)((u32)ktime_get_real_seconds() - estr->first_stamp);
drivers/scsi/qla2xxx/qla_mr.c:#include <linux/ktime.h>
drivers/scsi/qla2xxx/qla_mr.c:			preg_hsi->utc = (uint64_t)ktime_get_real_seconds();
drivers/scsi/scsi_debug.c:		ktime_t kt;
drivers/scsi/scsi_debug.c:			kt = ktime_set(ts.tv_sec, ts.tv_nsec);
drivers/scsi/scsi_debug.c:			kt = ktime_set(0, sdebug_ndelay);
drivers/scsi/ufs/ufs_vendor_mode.S:	.file 31 "/mnt/disk/jenkins/ci/workspace/chipset_patch_970_docker/opensource/component_code/vendor/huawei/extra/build/build_script/kirin_kernel_release/kernel/include/linux/ktime.h"
drivers/scsi/ufs/ufs_vendor_mode.S:	.string	"total_busy_ktime"
drivers/scsi/ufs/ufs_vendor_mode.S:	.string	"bio_stage_ktime"
drivers/scsi/ufs/ufs_vendor_mode.S:	.string	"total_idle_ktime"
drivers/scsi/ufs/ufs_vendor_mode.S:	.string	"last_busy_ktime"
drivers/scsi/ufs/ufs_vendor_mode.S:	.string	"req_stage_ktime"
drivers/scsi/ufs/ufs_vendor_mode.S:	.string	"ktime_t"
drivers/scsi/ufs/ufs_vendor_mode.S:	.string	"ktime"
drivers/scsi/ufs/ufs_vendor_mode.S:	.string	"last_idle_ktime"
drivers/scsi/ufs/ufshcd.c:			err_hist->reg[p], ktime_to_us(err_hist->tstamp[p]));
drivers/scsi/ufs/ufshcd.c:	if (unlikely(!ktime_to_us(hba->last_dme_cmd_tstamp))) {
drivers/scsi/ufs/ufshcd.c:			(unsigned long) ktime_to_us(
drivers/scsi/ufs/ufshcd.c:				ktime_sub(ktime_get(),
drivers/scsi/ufs/ufshcd.c:	ktime_t start = ktime_get();
drivers/scsi/ufs/ufshcd.c:		if (ktime_to_us(ktime_sub(ktime_get(), start)) >
drivers/scsi/ufs/ufshcd.c:	ktime_t start = ktime_get();
drivers/scsi/ufs/ufshcd.c:		if (ktime_to_us(ktime_sub(ktime_get(), start)) >
drivers/scsi/ufs/ufshcd.c:						ktime_t completion;
drivers/scsi/ufs/ufshcd.c:						completion = ktime_get();
drivers/scsi/ufs/ufshcd.c:						delta_us = ktime_us_delta(completion,
drivers/scsi/ufs/ufshcd.c:	reg_hist->tstamp[reg_hist->pos] = ktime_get();
drivers/scsi/ufs/ufshcd.h:	ktime_t tstamp[UIC_ERR_REG_HIST_LENGTH];
drivers/scsi/ufs/ufshcd.h:	ktime_t  busy_start_t;
drivers/scsi/ufs/ufshcd.h:	ktime_t last_dme_cmd_tstamp;
drivers/scsi/ufs/hisi_ufs_bkops.S:	bl	ktime_get
drivers/scsi/ufs/hisi_ufs_bkops.S:	bl	ktime_get
drivers/scsi/ufs/hisi_ufs_bkops.S:	.file 32 "/mnt/disk/jenkins/ci/workspace/chipset_patch_970_docker/opensource/component_code/vendor/huawei/extra/build/build_script/kirin_kernel_release/kernel/include/linux/ktime.h"
drivers/scsi/ufs/hisi_ufs_bkops.S:	.string	"total_busy_ktime"
drivers/scsi/ufs/hisi_ufs_bkops.S:	.string	"ktime_get"
drivers/scsi/ufs/hisi_ufs_bkops.S:	.string	"bio_stage_ktime"
drivers/scsi/ufs/hisi_ufs_bkops.S:	.string	"total_idle_ktime"
drivers/scsi/ufs/hisi_ufs_bkops.S:	.string	"ktime_get_ns"
drivers/scsi/ufs/hisi_ufs_bkops.S:	.string	"last_busy_ktime"
drivers/scsi/ufs/hisi_ufs_bkops.S:	.string	"req_stage_ktime"
drivers/scsi/ufs/hisi_ufs_bkops.S:	.string	"ktime_t"
drivers/scsi/ufs/hisi_ufs_bkops.S:	.string	"ktime"
drivers/scsi/ufs/hisi_ufs_bkops.S:	.string	"last_idle_ktime"
drivers/scsi/st.c:	ktime_t now;
drivers/scsi/st.c:	now = ktime_get();
drivers/scsi/st.c:		now = ktime_sub(now, STp->stats->write_time);
drivers/scsi/st.c:		atomic64_add(ktime_to_ns(now), &STp->stats->tot_write_time);
drivers/scsi/st.c:		atomic64_add(ktime_to_ns(now), &STp->stats->tot_io_time);
drivers/scsi/st.c:		now = ktime_sub(now, STp->stats->read_time);
drivers/scsi/st.c:		atomic64_add(ktime_to_ns(now), &STp->stats->tot_read_time);
drivers/scsi/st.c:		atomic64_add(ktime_to_ns(now), &STp->stats->tot_io_time);
drivers/scsi/st.c:		now = ktime_sub(now, STp->stats->other_time);
drivers/scsi/st.c:		atomic64_add(ktime_to_ns(now), &STp->stats->tot_io_time);
drivers/scsi/st.c:		STp->stats->write_time = ktime_get();
drivers/scsi/st.c:		STp->stats->read_time = ktime_get();
drivers/scsi/st.c:		STp->stats->other_time = ktime_get();
drivers/scsi/mvumi.c:#include <linux/ktime.h>
drivers/scsi/mvumi.c:		time = ktime_get_real_seconds();
drivers/scsi/pmcraid.c:#include <linux/ktime.h>
drivers/scsi/pmcraid.c:	timestamp = ktime_get_real_seconds() * 1000;
drivers/scsi/ibmvscsi_tgt/ibmvscsi_tgt.c:	ktime_t kt;
drivers/scsi/ibmvscsi_tgt/ibmvscsi_tgt.c:				kt = ktime_set(0, WAIT_NANO_SECONDS);
drivers/scsi/ibmvscsi_tgt/ibmvscsi_tgt.c:				kt = ktime_set(WAIT_SECONDS, 0);
drivers/scsi/st.h:	atomic64_t tot_read_time;  /* ktime spent completing reads */
drivers/scsi/st.h:	atomic64_t tot_write_time; /* ktime spent completing writes */
drivers/scsi/st.h:	atomic64_t tot_io_time;    /* ktime spent doing any I/O */
drivers/scsi/st.h:	ktime_t read_time;         /* holds ktime request was queued */
drivers/scsi/st.h:	ktime_t write_time;        /* holds ktime request was queued */
drivers/scsi/st.h:	ktime_t other_time;        /* holds ktime request was queued */
drivers/scsi/mpt3sas/mpt3sas_base.c:#include <linux/ktime.h>
drivers/scsi/mpt3sas/mpt3sas_base.c:	ktime_t current_time;
drivers/scsi/mpt3sas/mpt3sas_base.c:	current_time = ktime_get_real();
drivers/scsi/mpt3sas/mpt3sas_base.c:	mpi_request.TimeStamp = cpu_to_le64(ktime_to_ms(current_time));
drivers/scsi/smartpqi/smartpqi_init.c:	local_time = ktime_get_real_seconds();
include/linux/mmc/core.h:	ktime_t			io_start;
include/linux/mmc/host.h:	ktime_t issue_time;
include/linux/mmc/host.h:	ktime_t start_dbr_time;
include/linux/mmc/host.h:	ktime_t end_dbr_time;
include/linux/mmc/host.h:	ktime_t complete_time;
include/linux/jbd2.h:	ktime_t			t_start_time;
include/linux/time.h:extern time64_t mktime64(const unsigned int year, const unsigned int mon,
include/linux/time.h: * Deprecated. Use mktime64().
include/linux/time.h:static inline unsigned long mktime(const unsigned int year,
include/linux/time.h:	return mktime64(year, mon, day, hour, min, sec);
include/linux/time.h:	/* Disallow values that could overflow ktime_t */
include/linux/clockchips.h:# include <linux/ktime.h>
include/linux/clockchips.h: * @set_next_ktime:	set next event function using a direct ktime value
include/linux/clockchips.h:	int			(*set_next_ktime)(ktime_t expires, struct clock_event_device *);
include/linux/clockchips.h:	ktime_t			next_event;
include/linux/ftrace.h:#include <linux/ktime.h>
include/linux/hisi/hisi_fpga_touchscreen.h:	ktime_t time_stamp;
include/linux/wait.h: * @timeout: timeout, as a ktime_t
include/linux/wait.h: * @timeout: timeout, as a ktime_t
include/linux/wakelock.h:#include <linux/ktime.h>
include/linux/poll.h:#include <linux/ktime.h>
include/linux/poll.h:				 ktime_t *expires, unsigned long slack);
include/linux/sched.h:	ktime_t it_real_incr;
include/linux/blk_types.h:	ktime_t bio_stage_ktime[BIO_PROC_STAGE_MAX];
include/linux/timerqueue.h:#include <linux/ktime.h>
include/linux/timerqueue.h:	ktime_t expires;
include/linux/regmap.h:	ktime_t timeout = ktime_add_us(ktime_get(), timeout_us); \
include/linux/regmap.h:		if (timeout_us && ktime_compare(ktime_get(), timeout) > 0) { \
include/linux/timekeeping.h:/* Included from linux/ktime.h */
include/linux/timekeeping.h:extern void ktime_get_ts64(struct timespec64 *ts);
include/linux/timekeeping.h:extern time64_t ktime_get_seconds(void);
include/linux/timekeeping.h:extern time64_t ktime_get_real_seconds(void);
include/linux/timekeeping.h:static inline void ktime_get_ts(struct timespec *ts)
include/linux/timekeeping.h:	ktime_get_ts64(ts);
include/linux/timekeeping.h:static inline void ktime_get_real_ts(struct timespec *ts)
include/linux/timekeeping.h:static inline void ktime_get_ts(struct timespec *ts)
include/linux/timekeeping.h:	ktime_get_ts64(&ts64);
include/linux/timekeeping.h:static inline void ktime_get_real_ts(struct timespec *ts)
include/linux/timekeeping.h:#define do_posix_clock_monotonic_gettime(ts) ktime_get_ts(ts)
include/linux/timekeeping.h:#define ktime_get_real_ts64(ts)	getnstimeofday64(ts)
include/linux/timekeeping.h: * ktime_t based interfaces
include/linux/timekeeping.h:extern ktime_t ktime_get(void);
include/linux/timekeeping.h:extern ktime_t ktime_get_with_offset(enum tk_offsets offs);
include/linux/timekeeping.h:extern ktime_t ktime_mono_to_any(ktime_t tmono, enum tk_offsets offs);
include/linux/timekeeping.h:extern ktime_t ktime_get_raw(void);
include/linux/timekeeping.h:extern u32 ktime_get_resolution_ns(void);
include/linux/timekeeping.h: * ktime_get_real - get the real (wall-) time in ktime_t format
include/linux/timekeeping.h:static inline ktime_t ktime_get_real(void)
include/linux/timekeeping.h:	return ktime_get_with_offset(TK_OFFS_REAL);
include/linux/timekeeping.h: * ktime_get_boottime - Returns monotonic time since boot in ktime_t format
include/linux/timekeeping.h: * This is similar to CLOCK_MONTONIC/ktime_get, but also includes the
include/linux/timekeeping.h:static inline ktime_t ktime_get_boottime(void)
include/linux/timekeeping.h:	return ktime_get_with_offset(TK_OFFS_BOOT);
include/linux/timekeeping.h: * ktime_get_clocktai - Returns the TAI time of day in ktime_t format
include/linux/timekeeping.h:static inline ktime_t ktime_get_clocktai(void)
include/linux/timekeeping.h:	return ktime_get_with_offset(TK_OFFS_TAI);
include/linux/timekeeping.h: * ktime_mono_to_real - Convert monotonic time to clock realtime
include/linux/timekeeping.h:static inline ktime_t ktime_mono_to_real(ktime_t mono)
include/linux/timekeeping.h:	return ktime_mono_to_any(mono, TK_OFFS_REAL);
include/linux/timekeeping.h:static inline u64 ktime_get_ns(void)
include/linux/timekeeping.h:	return ktime_to_ns(ktime_get());
include/linux/timekeeping.h:static inline u64 ktime_get_real_ns(void)
include/linux/timekeeping.h:	return ktime_to_ns(ktime_get_real());
include/linux/timekeeping.h:static inline u64 ktime_get_boot_ns(void)
include/linux/timekeeping.h:	return ktime_to_ns(ktime_get_boottime());
include/linux/timekeeping.h:static inline u64 ktime_get_tai_ns(void)
include/linux/timekeeping.h:	return ktime_to_ns(ktime_get_clocktai());
include/linux/timekeeping.h:static inline u64 ktime_get_raw_ns(void)
include/linux/timekeeping.h:	return ktime_to_ns(ktime_get_raw());
include/linux/timekeeping.h:extern u64 ktime_get_mono_fast_ns(void);
include/linux/timekeeping.h:extern u64 ktime_get_raw_fast_ns(void);
include/linux/timekeeping.h:extern u64 ktime_get_boot_fast_ns(void);
include/linux/timekeeping.h: * Timespec interfaces utilizing the ktime based ones
include/linux/timekeeping.h:	*ts = ktime_to_timespec(ktime_get_boottime());
include/linux/timekeeping.h:	*ts = ktime_to_timespec64(ktime_get_boottime());
include/linux/timekeeping.h:	*ts = ktime_to_timespec(ktime_get_clocktai());
include/linux/timekeeping.h:extern void ktime_get_raw_and_real_ts64(struct timespec64 *ts_raw,
include/linux/timekeeping.h:	ktime_t		real;
include/linux/timekeeping.h:	ktime_t		raw;
include/linux/timekeeping.h:	ktime_t device;
include/linux/timekeeping.h:	ktime_t sys_realtime;
include/linux/timekeeping.h:	ktime_t sys_monoraw;
include/linux/timekeeping.h:			int (*get_time_fn)(ktime_t *device_time,
include/linux/timekeeping.h:extern void ktime_get_snapshot(struct system_time_snapshot *systime_snapshot);
include/linux/interrupt.h:void tasklet_hrtimer_start(struct tasklet_hrtimer *ttimer, ktime_t time,
include/linux/futex.h:union ktime;
include/linux/futex.h:long do_futex(u32 __user *uaddr, int op, u32 val, union ktime *timeout,
include/linux/iopoll.h:	ktime_t timeout = ktime_add_us(ktime_get(), timeout_us); \
include/linux/iopoll.h:		if (timeout_us && ktime_compare(ktime_get(), timeout) > 0) { \
include/linux/iopoll.h:	ktime_t timeout = ktime_add_us(ktime_get(), timeout_us); \
include/linux/iopoll.h:		if (timeout_us && ktime_compare(ktime_get(), timeout) > 0) { \
include/linux/timer.h:#include <linux/ktime.h>
include/linux/bpf.h:extern const struct bpf_func_proto bpf_ktime_get_ns_proto;
include/linux/skbuff.h: * Software time stamps generated by ktime_get_real() are stored in
include/linux/skbuff.h:	ktime_t	hwtstamp;
include/linux/skbuff.h:				ktime_t		tstamp;
include/linux/skbuff.h:static inline ktime_t skb_get_ktime(const struct sk_buff *skb)
include/linux/skbuff.h:	*stamp = ktime_to_timeval(skb->tstamp);
include/linux/skbuff.h:	*stamp = ktime_to_timespec(skb->tstamp);
include/linux/skbuff.h:	skb->tstamp = ktime_get_real();
include/linux/skbuff.h:static inline ktime_t net_timedelta(ktime_t t)
include/linux/skbuff.h:	return ktime_sub(ktime_get_real(), t);
include/linux/skbuff.h:static inline ktime_t net_invalid_timestamp(void)
include/linux/skbuff.h:	return ktime_set(0, 0);
include/linux/wbt.h:#include <linux/ktime.h>
include/linux/wbt.h:			(ktime_to_ns(ktime_get()) & ISSUE_STAT_TIME_MASK);
include/linux/blkdev.h:	ktime_t req_stage_ktime[REQ_PROC_STAGE_MAX];
include/linux/blkdev.h:	ktime_t			lat_hist_io_start;
include/linux/blkdev.h:	ktime_t last_idle_ktime;
include/linux/blkdev.h:	ktime_t last_busy_ktime;
include/linux/blkdev.h:	ktime_t total_busy_ktime;
include/linux/blkdev.h:	ktime_t total_idle_ktime;
include/linux/pm_wakeup.h:	ktime_t total_time;
include/linux/pm_wakeup.h:	ktime_t max_time;
include/linux/pm_wakeup.h:	ktime_t last_time;
include/linux/pm_wakeup.h:	ktime_t start_prevent_time;
include/linux/pm_wakeup.h:	ktime_t prevent_sleep_time;
include/linux/ktime.h: *  include/linux/ktime.h
include/linux/ktime.h: *  ktime_t - nanosecond-resolution time format.
include/linux/ktime.h: *  	the ktime_t union and further simplifications of the original
include/linux/ktime.h: * ktime_t:
include/linux/ktime.h: * NOPs and most arithmetic ktime_t operations are plain arithmetic
include/linux/ktime.h:union ktime {
include/linux/ktime.h:typedef union ktime ktime_t;		/* Kill this */
include/linux/ktime.h: * ktime_set - Set a ktime_t variable from a seconds/nanoseconds value
include/linux/ktime.h: * Return: The ktime_t representation of the value.
include/linux/ktime.h:static inline ktime_t ktime_set(const s64 secs, const unsigned long nsecs)
include/linux/ktime.h:		return (ktime_t){ .tv64 = KTIME_MAX };
include/linux/ktime.h:	return (ktime_t) { .tv64 = secs * NSEC_PER_SEC + (s64)nsecs };
include/linux/ktime.h:/* Subtract two ktime_t variables. rem = lhs -rhs: */
include/linux/ktime.h:#define ktime_sub(lhs, rhs) \
include/linux/ktime.h:		({ (ktime_t){ .tv64 = (lhs).tv64 - (rhs).tv64 }; })
include/linux/ktime.h:/* Add two ktime_t variables. res = lhs + rhs: */
include/linux/ktime.h:#define ktime_add(lhs, rhs) \
include/linux/ktime.h:		({ (ktime_t){ .tv64 = (lhs).tv64 + (rhs).tv64 }; })
include/linux/ktime.h: * Same as ktime_add(), but avoids undefined behaviour on overflow; however,
include/linux/ktime.h:#define ktime_add_unsafe(lhs, rhs) \
include/linux/ktime.h:		({ (ktime_t){ .tv64 = (u64) (lhs).tv64 + (rhs).tv64 }; })
include/linux/ktime.h: * Add a ktime_t variable and a scalar nanosecond value.
include/linux/ktime.h:#define ktime_add_ns(kt, nsval) \
include/linux/ktime.h:		({ (ktime_t){ .tv64 = (kt).tv64 + (nsval) }; })
include/linux/ktime.h: * Subtract a scalar nanosecod from a ktime_t variable
include/linux/ktime.h:#define ktime_sub_ns(kt, nsval) \
include/linux/ktime.h:		({ (ktime_t){ .tv64 = (kt).tv64 - (nsval) }; })
include/linux/ktime.h:/* convert a timespec to ktime_t format: */
include/linux/ktime.h:static inline ktime_t timespec_to_ktime(struct timespec ts)
include/linux/ktime.h:	return ktime_set(ts.tv_sec, ts.tv_nsec);
include/linux/ktime.h:/* convert a timespec64 to ktime_t format: */
include/linux/ktime.h:static inline ktime_t timespec64_to_ktime(struct timespec64 ts)
include/linux/ktime.h:	return ktime_set(ts.tv_sec, ts.tv_nsec);
include/linux/ktime.h:/* convert a timeval to ktime_t format: */
include/linux/ktime.h:static inline ktime_t timeval_to_ktime(struct timeval tv)
include/linux/ktime.h:	return ktime_set(tv.tv_sec, tv.tv_usec * NSEC_PER_USEC);
include/linux/ktime.h:/* Map the ktime_t to timespec conversion to ns_to_timespec function */
include/linux/ktime.h:#define ktime_to_timespec(kt)		ns_to_timespec((kt).tv64)
include/linux/ktime.h:/* Map the ktime_t to timespec conversion to ns_to_timespec function */
include/linux/ktime.h:#define ktime_to_timespec64(kt)		ns_to_timespec64((kt).tv64)
include/linux/ktime.h:/* Map the ktime_t to timeval conversion to ns_to_timeval function */
include/linux/ktime.h:#define ktime_to_timeval(kt)		ns_to_timeval((kt).tv64)
include/linux/ktime.h:/* Convert ktime_t to nanoseconds - NOP in the scalar storage format: */
include/linux/ktime.h:#define ktime_to_ns(kt)			((kt).tv64)
include/linux/ktime.h: * ktime_equal - Compares two ktime_t variables to see if they are equal
include/linux/ktime.h: * Compare two ktime_t variables.
include/linux/ktime.h:static inline int ktime_equal(const ktime_t cmp1, const ktime_t cmp2)
include/linux/ktime.h: * ktime_compare - Compares two ktime_t variables for less, greater or equal
include/linux/ktime.h:static inline int ktime_compare(const ktime_t cmp1, const ktime_t cmp2)
include/linux/ktime.h: * ktime_after - Compare if a ktime_t value is bigger than another one.
include/linux/ktime.h:static inline bool ktime_after(const ktime_t cmp1, const ktime_t cmp2)
include/linux/ktime.h:	return ktime_compare(cmp1, cmp2) > 0;
include/linux/ktime.h: * ktime_before - Compare if a ktime_t value is smaller than another one.
include/linux/ktime.h:static inline bool ktime_before(const ktime_t cmp1, const ktime_t cmp2)
include/linux/ktime.h:	return ktime_compare(cmp1, cmp2) < 0;
include/linux/ktime.h:extern s64 __ktime_divns(const ktime_t kt, s64 div);
include/linux/ktime.h:static inline s64 ktime_divns(const ktime_t kt, s64 div)
include/linux/ktime.h:		return __ktime_divns(kt, div);
include/linux/ktime.h:static inline s64 ktime_divns(const ktime_t kt, s64 div)
include/linux/ktime.h:static inline s64 ktime_to_us(const ktime_t kt)
include/linux/ktime.h:	return ktime_divns(kt, NSEC_PER_USEC);
include/linux/ktime.h:static inline s64 ktime_to_ms(const ktime_t kt)
include/linux/ktime.h:	return ktime_divns(kt, NSEC_PER_MSEC);
include/linux/ktime.h:static inline s64 ktime_us_delta(const ktime_t later, const ktime_t earlier)
include/linux/ktime.h:       return ktime_to_us(ktime_sub(later, earlier));
include/linux/ktime.h:static inline s64 ktime_ms_delta(const ktime_t later, const ktime_t earlier)
include/linux/ktime.h:	return ktime_to_ms(ktime_sub(later, earlier));
include/linux/ktime.h:static inline ktime_t ktime_add_us(const ktime_t kt, const u64 usec)
include/linux/ktime.h:	return ktime_add_ns(kt, usec * NSEC_PER_USEC);
include/linux/ktime.h:static inline ktime_t ktime_add_ms(const ktime_t kt, const u64 msec)
include/linux/ktime.h:	return ktime_add_ns(kt, msec * NSEC_PER_MSEC);
include/linux/ktime.h:static inline ktime_t ktime_sub_us(const ktime_t kt, const u64 usec)
include/linux/ktime.h:	return ktime_sub_ns(kt, usec * NSEC_PER_USEC);
include/linux/ktime.h:static inline ktime_t ktime_sub_ms(const ktime_t kt, const u64 msec)
include/linux/ktime.h:	return ktime_sub_ns(kt, msec * NSEC_PER_MSEC);
include/linux/ktime.h:extern ktime_t ktime_add_safe(const ktime_t lhs, const ktime_t rhs);
include/linux/ktime.h: * ktime_to_timespec_cond - convert a ktime_t variable to timespec
include/linux/ktime.h: * @kt:		the ktime_t variable to convert
include/linux/ktime.h:static inline __must_check bool ktime_to_timespec_cond(const ktime_t kt,
include/linux/ktime.h:		*ts = ktime_to_timespec(kt);
include/linux/ktime.h: * ktime_to_timespec64_cond - convert a ktime_t variable to timespec64
include/linux/ktime.h: * @kt:		the ktime_t variable to convert
include/linux/ktime.h:static inline __must_check bool ktime_to_timespec64_cond(const ktime_t kt,
include/linux/ktime.h:		*ts = ktime_to_timespec64(kt);
include/linux/ktime.h:#define KTIME_LOW_RES		(ktime_t){ .tv64 = LOW_RES_NSEC }
include/linux/ktime.h:static inline ktime_t ns_to_ktime(u64 ns)
include/linux/ktime.h:	static const ktime_t ktime_zero = { .tv64 = 0 };
include/linux/ktime.h:	return ktime_add_ns(ktime_zero, ns);
include/linux/ktime.h:static inline ktime_t ms_to_ktime(u64 ms)
include/linux/ktime.h:	static const ktime_t ktime_zero = { .tv64 = 0 };
include/linux/ktime.h:	return ktime_add_ms(ktime_zero, ms);
include/linux/posix-timers.h:			ktime_t interval;
include/linux/posix-timers.h:			ktime_t interval;
include/linux/alarmtimer.h:	enum alarmtimer_restart	(*function)(struct alarm *, ktime_t now);
include/linux/alarmtimer.h:		enum alarmtimer_restart (*function)(struct alarm *, ktime_t));
include/linux/alarmtimer.h:void alarm_start(struct alarm *alarm, ktime_t start);
include/linux/alarmtimer.h:void alarm_start_relative(struct alarm *alarm, ktime_t start);
include/linux/alarmtimer.h:u64 alarm_forward(struct alarm *alarm, ktime_t now, ktime_t interval);
include/linux/alarmtimer.h:u64 alarm_forward_now(struct alarm *alarm, ktime_t interval);
include/linux/alarmtimer.h:ktime_t alarm_expires_remaining(const struct alarm *alarm);
include/linux/perf_event.h:	ktime_t				hrtimer_interval;
include/linux/tick.h:extern ktime_t tick_nohz_get_sleep_length(void);
include/linux/tick.h:static inline ktime_t tick_nohz_get_sleep_length(void)
include/linux/tick.h:	ktime_t len = { .tv64 = NSEC_PER_SEC/HZ };
include/linux/hrtimer.h:#include <linux/ktime.h>
include/linux/hrtimer.h:	ktime_t				_softexpires;
include/linux/hrtimer.h:	ktime_t			(*get_time)(void);
include/linux/hrtimer.h:	ktime_t			offset;
include/linux/hrtimer.h:	ktime_t				expires_next;
include/linux/hrtimer.h:static inline void hrtimer_set_expires(struct hrtimer *timer, ktime_t time)
include/linux/hrtimer.h:static inline void hrtimer_set_expires_range(struct hrtimer *timer, ktime_t time, ktime_t delta)
include/linux/hrtimer.h:	timer->node.expires = ktime_add_safe(time, delta);
include/linux/hrtimer.h:static inline void hrtimer_set_expires_range_ns(struct hrtimer *timer, ktime_t time, u64 delta)
include/linux/hrtimer.h:	timer->node.expires = ktime_add_safe(time, ns_to_ktime(delta));
include/linux/hrtimer.h:static inline void hrtimer_add_expires(struct hrtimer *timer, ktime_t time)
include/linux/hrtimer.h:	timer->node.expires = ktime_add_safe(timer->node.expires, time);
include/linux/hrtimer.h:	timer->_softexpires = ktime_add_safe(timer->_softexpires, time);
include/linux/hrtimer.h:	timer->node.expires = ktime_add_ns(timer->node.expires, ns);
include/linux/hrtimer.h:	timer->_softexpires = ktime_add_ns(timer->_softexpires, ns);
include/linux/hrtimer.h:static inline ktime_t hrtimer_get_expires(const struct hrtimer *timer)
include/linux/hrtimer.h:static inline ktime_t hrtimer_get_softexpires(const struct hrtimer *timer)
include/linux/hrtimer.h:	return ktime_to_ns(timer->node.expires);
include/linux/hrtimer.h:static inline ktime_t hrtimer_expires_remaining(const struct hrtimer *timer)
include/linux/hrtimer.h:	return ktime_sub(timer->node.expires, timer->base->get_time());
include/linux/hrtimer.h:static inline ktime_t hrtimer_cb_get_time(struct hrtimer *timer)
include/linux/hrtimer.h:# define KTIME_HIGH_RES		(ktime_t) { .tv64 = HIGH_RES_NSEC }
include/linux/hrtimer.h:static inline ktime_t
include/linux/hrtimer.h:__hrtimer_expires_remaining_adjusted(const struct hrtimer *timer, ktime_t now)
include/linux/hrtimer.h:	ktime_t rem = ktime_sub(timer->node.expires, now);
include/linux/hrtimer.h:static inline ktime_t
include/linux/hrtimer.h:extern void hrtimer_start_range_ns(struct hrtimer *timer, ktime_t tim,
include/linux/hrtimer.h:static inline void hrtimer_start(struct hrtimer *timer, ktime_t tim,
include/linux/hrtimer.h:	ktime_t soft, hard;
include/linux/hrtimer.h:	delta = ktime_to_ns(ktime_sub(hard, soft));
include/linux/hrtimer.h:extern ktime_t __hrtimer_get_remaining(const struct hrtimer *timer, bool adjust);
include/linux/hrtimer.h:static inline ktime_t hrtimer_get_remaining(const struct hrtimer *timer)
include/linux/hrtimer.h:hrtimer_forward(struct hrtimer *timer, ktime_t now, ktime_t interval);
include/linux/hrtimer.h:				      ktime_t interval)
include/linux/hrtimer.h:extern int schedule_hrtimeout_range(ktime_t *expires, u64 delta,
include/linux/hrtimer.h:extern int schedule_hrtimeout_range_clock(ktime_t *expires,
include/linux/hrtimer.h:extern int schedule_hrtimeout(ktime_t *expires, const enum hrtimer_mode mode);
include/linux/rcupdate.h:#include <linux/ktime.h>
include/linux/fence.h:	ktime_t timestamp;
include/linux/rtc.h:ktime_t rtc_tm_to_ktime(struct rtc_time tm);
include/linux/rtc.h:struct rtc_time rtc_ktime_to_tm(ktime_t kt);
include/linux/rtc.h:	ktime_t period;
include/linux/rtc.h:		    ktime_t expires, ktime_t period);
include/linux/time64.h:	/* Disallow values that could overflow ktime_t */
include/linux/pps_kernel.h:	struct pps_ktime assert_tu;
include/linux/pps_kernel.h:	struct pps_ktime clear_tu;
include/linux/pps_kernel.h:static inline void timespec_to_pps_ktime(struct pps_ktime *kt,
include/linux/pps_kernel.h:	ktime_get_snapshot(&snap);
include/linux/pps_kernel.h:	ts->ts_real = ktime_to_timespec64(snap.real);
include/linux/pps_kernel.h:	ts->ts_raw = ktime_to_timespec64(snap.raw);
include/linux/timekeeper_internal.h: * @base:	ktime_t (nanoseconds) base time for readout
include/linux/timekeeper_internal.h:	ktime_t			base;
include/linux/timekeeper_internal.h: * @ktime_sec:		Current CLOCK_MONOTONIC time in seconds
include/linux/timekeeper_internal.h: * @next_leap_ktime:	CLOCK_MONOTONIC time value of a pending leap-second
include/linux/timekeeper_internal.h:	unsigned long		ktime_sec;
include/linux/timekeeper_internal.h:	ktime_t			offs_real;
include/linux/timekeeper_internal.h:	ktime_t			offs_boot;
include/linux/timekeeper_internal.h:	ktime_t			offs_tai;
include/linux/timekeeper_internal.h:	ktime_t			next_leap_ktime;
include/linux/mISDNif.h:extern void	mISDN_clock_update(struct mISDNclock *, int, ktime_t *);
include/linux/sunrpc/metrics.h:#include <linux/ktime.h>
include/linux/sunrpc/metrics.h:	ktime_t			om_queue,	/* queued for xmit */
include/linux/sunrpc/sched.h:#include <linux/ktime.h>
include/linux/sunrpc/sched.h:	ktime_t			tk_start;	/* RPC task init timestamp */
include/linux/sunrpc/xprt.h:#include <linux/ktime.h>
include/linux/sunrpc/xprt.h:	ktime_t			rq_rtt;		/* round-trip time */
include/linux/sunrpc/xprt.h:	ktime_t			rq_xtime;	/* transmit time stamp */
include/linux/freezer.h:static inline int freezable_schedule_hrtimeout_range(ktime_t *expires,
include/linux/sync_file.h:#include <linux/ktime.h>
include/linux/dccp.h:#include <linux/ktime.h>
include/linux/gpio_event.h:	ktime_t settle_time;
include/linux/gpio_event.h:	ktime_t debounce_delay;
include/linux/gpio_event.h:	ktime_t poll_time;
include/linux/gpio_event.h:	ktime_t debounce_time;
include/linux/gpio_event.h:	ktime_t poll_time;
include/net/cfg80211.h: *	ktime_get_boot_ns() is likely appropriate.
include/net/sock.h:	ktime_t			sk_stamp;
include/net/sock.h:	ktime_t kt = skb->tstamp;
include/net/codel.h:#include <linux/ktime.h>
include/net/codel.h:	u64 ns = ktime_get_ns();
include/net/bluetooth/hci_core.h:				 void *data, u16 data_len, ktime_t tstamp,
include/net/inet_frag.h:	ktime_t			stamp;
include/net/pkt_sched.h:#include <linux/ktime.h>
include/net/pkt_sched.h:	return PSCHED_NS2TICKS(ktime_get_ns());
include/net/red.h:	ktime_t		qidlestart;	/* Start of current idle period */
include/net/red.h:	v->qidlestart = ktime_get();
include/net/red.h:	s64 delta = ktime_us_delta(ktime_get(), v->qidlestart);
include/net/tcp.h:#include <linux/ktime.h>
include/net/sctp/structs.h:#include <linux/ktime.h>
include/net/sctp/structs.h:	ktime_t expiration;
include/net/sctp/structs.h:	ktime_t last_time_heard;
include/net/sctp/structs.h:	ktime_t cookie_life;
include/huawei_platform/usb/pd/richtek/tcpci_core.h:	ktime_t last_expire[PD_TIMER_NR];
include/huawei_platform/touthscreen/huawei_touchscreen.h:	ktime_t time_stamp;
include/huawei_platform/touthscreen/huawei_touchscreen.h:	ktime_t time_stamp;
include/huawei_platform/touthscreen/huawei_touchscreen.h:	ktime_t time_stamp;
include/huawei_platform/emcom/smartcare/network_measurement/nm.h:#include <linux/ktime.h>
include/uapi/linux/bpf.h:	BPF_FUNC_ktime_get_ns,    /* u64 bpf_ktime_get_ns(void) */
include/uapi/linux/pps.h: * two consecutive 'struct pps_ktime' members of struct pps_kinfo and struct
include/uapi/linux/pps.h:struct pps_ktime {
include/uapi/linux/pps.h:	struct pps_ktime assert_tu;	/* time of assert event */
include/uapi/linux/pps.h:	struct pps_ktime clear_tu;	/* time of clear event */
include/uapi/linux/pps.h:	struct pps_ktime assert_off_tu;	/* offset compensation for assert */
include/uapi/linux/pps.h:	struct pps_ktime clear_off_tu;	/* offset compensation for clear */
include/uapi/linux/pps.h:	struct pps_ktime timeout;
include/trace/events/spi.h:#include <linux/ktime.h>
include/trace/events/asoc.h:#include <linux/ktime.h>
include/trace/events/timer.h:		  (unsigned long long)ktime_to_ns((ktime_t) {
include/trace/events/timer.h:		  (unsigned long long)ktime_to_ns((ktime_t) {
include/trace/events/timer.h:	TP_PROTO(struct hrtimer *hrtimer, ktime_t *now),
include/trace/events/timer.h:		  (unsigned long long)ktime_to_ns((ktime_t) { .tv64 = __entry->now }))
include/trace/events/rpm.h:#include <linux/ktime.h>
include/trace/events/power.h:#include <linux/ktime.h>
include/trace/events/hswadsp.h:#include <linux/ktime.h>
include/trace/events/regulator.h:#include <linux/ktime.h>
include/trace/events/rxrpc.h:		     ktime_t now, unsigned long now_j),
include/trace/events/rxrpc.h:		    __field_struct(ktime_t,			now		)
include/trace/events/rxrpc.h:		    __field_struct(ktime_t,			expire_at	)
include/trace/events/rxrpc.h:		    __field_struct(ktime_t,			ack_at		)
include/trace/events/rxrpc.h:		    __field_struct(ktime_t,			resend_at	)
include/trace/events/rxrpc.h:		      ktime_to_ns(ktime_sub(__entry->expire_at, __entry->now)),
include/trace/events/rxrpc.h:		      ktime_to_ns(ktime_sub(__entry->ack_at, __entry->now)),
include/trace/events/rxrpc.h:		      ktime_to_ns(ktime_sub(__entry->resend_at, __entry->now)),
include/trace/events/mce.h:#include <linux/ktime.h>
include/trace/events/host1x.h:#include <linux/ktime.h>
include/trace/events/preemptirq.h:#include <linux/ktime.h>
include/trace/events/intel-sst.h:#include <linux/ktime.h>
include/trace/events/nmi.h:#include <linux/ktime.h>
include/sound/pcm.h:		ktime_get_ts(tv);
include/drm/drm_irq.h:					  struct timeval *vblanktime);
include/drm/drmP.h:	 * optional accurate ktime_get timestamp of when position was measured.
include/drm/drmP.h:				     ktime_t *stime, ktime_t *etime,
include/ras/ras_event.h:#include <linux/ktime.h>
fs/gfs2/trace_gfs2.h:#include <linux/ktime.h>
fs/gfs2/rgrp.c:	tdiff = ktime_to_ns(ktime_sub(ktime_get_real(),
fs/gfs2/glock.c:	gl->gl_dstamp = ktime_set(0, 0);
fs/gfs2/lock_dlm.c:	rtt = ktime_to_ns(ktime_sub(ktime_get_real(), gl->gl_dstamp));
fs/gfs2/lock_dlm.c:	ktime_t dstamp;
fs/gfs2/lock_dlm.c:	gl->gl_dstamp = ktime_get_real();
fs/gfs2/lock_dlm.c:	irt = ktime_to_ns(ktime_sub(gl->gl_dstamp, dstamp));
fs/gfs2/lock_dlm.c:		gl->gl_dstamp = ktime_get_real();
fs/gfs2/incore.h:#include <linux/ktime.h>
fs/gfs2/incore.h:	ktime_t gl_dstamp;
fs/aio.c:	ktime_t until = { .tv64 = KTIME_MAX };
fs/aio.c:		until = timespec_to_ktime(ts);
fs/afs/server.c:		server->time_of_death = ktime_get_real_seconds();
fs/afs/server.c:	now = ktime_get_real_seconds();
fs/afs/internal.h:#include <linux/ktime.h>
fs/afs/callback.c:	now = ktime_get_real_seconds();
fs/afs/callback.c:	vnode->update_at = ktime_get_real_seconds() +
fs/afs/fsclient.c:	vnode->cb_expires	= vnode->cb_expiry + ktime_get_real_seconds();
fs/afs/vlocation.c:	vl->update_at = ktime_get_real_seconds() +
fs/afs/vlocation.c:		vl->time_of_death = ktime_get_real_seconds();
fs/afs/vlocation.c:	now = ktime_get_real_seconds();
fs/afs/vlocation.c:	now = ktime_get_real_seconds();
fs/afs/vlocation.c:	vl->update_at = ktime_get_real_seconds() +
fs/afs/inode.c:			vnode->cb_expires = ktime_get_real_seconds();
fs/afs/inode.c:				ktime_get_real_seconds();
fs/afs/inode.c:		if (vnode->cb_expires < ktime_get_real_seconds() + 10) {
fs/coredump.c:				time = ktime_get_real_seconds();
fs/f2fs/segment.c:	sit_i->mounted_time = ktime_get_real_seconds();
fs/f2fs/sysfs.c:	time64_t now = ktime_get_real_seconds();
fs/f2fs/segment.h:	time64_t now = ktime_get_real_seconds();
fs/isofs/util.c:		crtime = mktime64(year+1900, month, day, hour, minute, second);
fs/kernfs/inode.c:	ktime_get_real_ts(&iattrs->ia_atime);
fs/kernfs/dir.c:		ktime_get_real_ts(&ps_iattrs->ia_ctime);
fs/kernfs/dir.c:				ktime_get_real_ts(&ps_iattr->ia_iattr.ia_ctime);
fs/quota/dquot.c:	    ktime_get_real_seconds() >= dquot->dq_dqb.dqb_itime &&
fs/quota/dquot.c:		dquot->dq_dqb.dqb_itime = ktime_get_real_seconds() +
fs/quota/dquot.c:	    ktime_get_real_seconds() >= dquot->dq_dqb.dqb_btime &&
fs/quota/dquot.c:			dquot->dq_dqb.dqb_btime = ktime_get_real_seconds() +
fs/quota/dquot.c:			dm->dqb_btime = ktime_get_real_seconds() + dqi->dqi_bgrace;
fs/quota/dquot.c:			dm->dqb_itime = ktime_get_real_seconds() + dqi->dqi_igrace;
fs/dlm/lock.c:	lkb->lkb_timestamp = ktime_get();
fs/dlm/lock.c:	ktime_t zero = ktime_set(0, 0);
fs/dlm/lock.c:		if (ktime_equal(lkb->lkb_wait_time, zero))
fs/dlm/lock.c:		us = ktime_to_us(ktime_sub(ktime_get(), lkb->lkb_wait_time));
fs/dlm/lock.c:	lkb->lkb_wait_time = ktime_get();
fs/dlm/lock.c:			wait_us = ktime_to_us(ktime_sub(ktime_get(),
fs/dlm/lock.c:		lkb->lkb_timestamp = ktime_add_us(lkb->lkb_timestamp, adj_us);
fs/dlm/lock.c:		if (ktime_to_us(lkb->lkb_wait_time))
fs/dlm/lock.c:			lkb->lkb_wait_time = ktime_get();
fs/dlm/ast.c:		lkb->lkb_last_cast_time = ktime_get();
fs/dlm/ast.c:		lkb->lkb_last_bast_time = ktime_get();
fs/dlm/dlm_internal.h:	ktime_t			lkb_timestamp;
fs/dlm/dlm_internal.h:	ktime_t			lkb_wait_time;
fs/dlm/dlm_internal.h:	ktime_t			lkb_last_cast_time;	/* for debugging */
fs/dlm/dlm_internal.h:	ktime_t			lkb_last_bast_time;	/* for debugging */
fs/dlm/debug_fs.c:	us = ktime_to_us(ktime_sub(ktime_get(), lkb->lkb_timestamp));
fs/dlm/debug_fs.c:		   (unsigned long long)ktime_to_ns(lkb->lkb_timestamp),
fs/dlm/debug_fs.c:		   (unsigned long long)ktime_to_ns(lkb->lkb_last_bast_time));
fs/ext2/super.c:			"warning: checktime reached, "
fs/lockd/mon.c:#include <linux/ktime.h>
fs/lockd/mon.c:	ns = ktime_get_ns();
fs/ext4/super.c:			 "warning: checktime reached, "
fs/ext4/extents_status.c:	ktime_t start_time;
fs/ext4/extents_status.c:	start_time = ktime_get();
fs/ext4/extents_status.c:	scan_time = ktime_to_ns(ktime_sub(ktime_get(), start_time));
fs/nfs/nfs4xdr.c:	*p++ = cpu_to_be32(ktime_to_ns(nn->boot_time));	/* stamp */
fs/nfs/netns.h:	ktime_t boot_time;
fs/nfs/flexfilelayout/flexfilelayout.c:		ffl->last_report_time = ktime_get();
fs/nfs/flexfilelayout/flexfilelayout.c:nfs4_ff_start_busy_timer(struct nfs4_ff_busy_timer *timer, ktime_t now)
fs/nfs/flexfilelayout/flexfilelayout.c:static ktime_t
fs/nfs/flexfilelayout/flexfilelayout.c:nfs4_ff_end_busy_timer(struct nfs4_ff_busy_timer *timer, ktime_t now)
fs/nfs/flexfilelayout/flexfilelayout.c:	ktime_t start;
fs/nfs/flexfilelayout/flexfilelayout.c:	return ktime_sub(now, start);
fs/nfs/flexfilelayout/flexfilelayout.c:			    ktime_t now)
fs/nfs/flexfilelayout/flexfilelayout.c:	static const ktime_t notime = {0};
fs/nfs/flexfilelayout/flexfilelayout.c:	if (ktime_equal(mirror->start_time, notime))
fs/nfs/flexfilelayout/flexfilelayout.c:	if (ktime_to_ms(ktime_sub(now, ffl->last_report_time)) >=
fs/nfs/flexfilelayout/flexfilelayout.c:		ktime_t time_completed,
fs/nfs/flexfilelayout/flexfilelayout.c:		ktime_t time_started)
fs/nfs/flexfilelayout/flexfilelayout.c:	ktime_t completion_time = ktime_sub(time_completed, time_started);
fs/nfs/flexfilelayout/flexfilelayout.c:	ktime_t timer;
fs/nfs/flexfilelayout/flexfilelayout.c:			ktime_add(iostat->total_busy_time, timer);
fs/nfs/flexfilelayout/flexfilelayout.c:			ktime_add(iostat->aggregate_completion_time,
fs/nfs/flexfilelayout/flexfilelayout.c:		__u64 requested, ktime_t now)
fs/nfs/flexfilelayout/flexfilelayout.c:			ktime_get(), task->tk_start);
fs/nfs/flexfilelayout/flexfilelayout.c:		__u64 requested, ktime_t now)
fs/nfs/flexfilelayout/flexfilelayout.c:			requested, completed, ktime_get(), task->tk_start);
fs/nfs/flexfilelayout/flexfilelayout.c:			 ktime_t t)
fs/nfs/flexfilelayout/flexfilelayout.c:	ts = ktime_to_timespec64(t);
fs/nfs/flexfilelayout/flexfilelayout.c:	ff_layout_encode_nfstime(xdr, ktime_sub(ktime_get(), mirror->start_time));
fs/nfs/flexfilelayout/flexfilelayout.h:	ktime_t				total_busy_time;
fs/nfs/flexfilelayout/flexfilelayout.h:	ktime_t				aggregate_completion_time;
fs/nfs/flexfilelayout/flexfilelayout.h:	ktime_t start_time;
fs/nfs/flexfilelayout/flexfilelayout.h:	ktime_t				start_time;
fs/nfs/flexfilelayout/flexfilelayout.h:	ktime_t			last_report_time; /* Layoutstat report times */
fs/nfs/nfs4_fs.h:	ktime_t create_time;
fs/nfs/client.c:	nn->boot_time = ktime_get_real();
fs/nfs/nfs4state.c:	sc->create_time = ktime_get();
fs/nfs/nfs4proc.c:	p->o_arg.id.create_time = ktime_to_ns(sp->so_seqid.create_time);
fs/nfs/nfs4proc.c:		u64 ns = ktime_to_ns(nn->boot_time);
fs/btrfs/extent-tree.c:	ktime_t start = ktime_get();
fs/btrfs/extent-tree.c:		u64 runtime = ktime_to_ns(ktime_sub(ktime_get(), start));
fs/jbd2/commit.c:	ktime_t start_time;
fs/jbd2/commit.c:	start_time = ktime_get();
fs/jbd2/commit.c:	commit_time = ktime_to_ns(ktime_sub(ktime_get(), start_time));
fs/jbd2/transaction.c:	transaction->t_start_time = ktime_get();
fs/jbd2/transaction.c:		trans_time = ktime_to_ns(ktime_sub(ktime_get(),
fs/jbd2/transaction.c:			ktime_t expires = ktime_add_ns(ktime_get(),
fs/nfsd/nfs4layouts.c:	ktime_t now, cutoff;
fs/nfsd/nfs4layouts.c:		now = ktime_get();
fs/nfsd/nfs4layouts.c:		cutoff = ktime_add_ns(task->tk_start,
fs/nfsd/nfs4layouts.c:		if (ktime_before(now, cutoff)) {
fs/compat.c:	ktime_get_ts(&ts);
fs/affs/super.c:	secs_to_datestamp(ktime_get_real_seconds(), &tail->disk_change);
fs/ocfs2/dlmglue.c:	ktime_t			mw_lock_start;
fs/ocfs2/dlmglue.c:	ktime_t kt;
fs/ocfs2/dlmglue.c:	kt = ktime_sub(ktime_get(), mw->mw_lock_start);
fs/ocfs2/dlmglue.c:	usec = ktime_to_us(kt);
fs/ocfs2/dlmglue.c:	stats->ls_total += ktime_to_ns(kt);
fs/ocfs2/dlmglue.c:		stats->ls_total = ktime_to_ns(kt);
fs/ocfs2/dlmglue.c:	mw->mw_lock_start = ktime_get();
fs/ocfs2/cluster/tcp.c:	nst->st_sock_time = ktime_get();
fs/ocfs2/cluster/tcp.c:	nst->st_send_time = ktime_get();
fs/ocfs2/cluster/tcp.c:	nst->st_status_time = ktime_get();
fs/ocfs2/cluster/tcp.c:	sc->sc_tv_timer = ktime_get();
fs/ocfs2/cluster/tcp.c:	sc->sc_tv_data_ready = ktime_get();
fs/ocfs2/cluster/tcp.c:	sc->sc_tv_advance_start = ktime_get();
fs/ocfs2/cluster/tcp.c:	sc->sc_tv_advance_stop = ktime_get();
fs/ocfs2/cluster/tcp.c:	sc->sc_tv_func_start = ktime_get();
fs/ocfs2/cluster/tcp.c:	sc->sc_tv_func_stop = ktime_get();
fs/ocfs2/cluster/tcp.c:static ktime_t o2net_get_func_run_time(struct o2net_sock_container *sc)
fs/ocfs2/cluster/tcp.c:	return ktime_sub(sc->sc_tv_func_stop, sc->sc_tv_func_start);
fs/ocfs2/cluster/tcp.c:	sc->sc_tv_status_total = ktime_add(sc->sc_tv_status_total,
fs/ocfs2/cluster/tcp.c:					   ktime_sub(ktime_get(),
fs/ocfs2/cluster/tcp.c:	sc->sc_tv_send_total = ktime_add(sc->sc_tv_send_total,
fs/ocfs2/cluster/tcp.c:					 ktime_sub(nst->st_status_time,
fs/ocfs2/cluster/tcp.c:	sc->sc_tv_acquiry_total = ktime_add(sc->sc_tv_acquiry_total,
fs/ocfs2/cluster/tcp.c:					    ktime_sub(nst->st_send_time,
fs/ocfs2/cluster/tcp.c:	sc->sc_tv_process_total = ktime_add(sc->sc_tv_process_total,
fs/ocfs2/cluster/tcp.c:	unsigned long msecs = ktime_to_ms(ktime_get()) -
fs/ocfs2/cluster/tcp.c:		ktime_to_ms(sc->sc_tv_timer);
fs/ocfs2/cluster/netdebug.c:	ktime_t now;
fs/ocfs2/cluster/netdebug.c:	now = ktime_get();
fs/ocfs2/cluster/netdebug.c:	sock = ktime_to_us(ktime_sub(now, nst->st_sock_time));
fs/ocfs2/cluster/netdebug.c:	send = ktime_to_us(ktime_sub(now, nst->st_send_time));
fs/ocfs2/cluster/netdebug.c:	status = ktime_to_us(ktime_sub(now, nst->st_status_time));
fs/ocfs2/cluster/netdebug.c:# define sc_tv_acquiry_total_ns(_s)	(ktime_to_ns((_s)->sc_tv_acquiry_total))
fs/ocfs2/cluster/netdebug.c:# define sc_tv_send_total_ns(_s)	(ktime_to_ns((_s)->sc_tv_send_total))
fs/ocfs2/cluster/netdebug.c:# define sc_tv_status_total_ns(_s)	(ktime_to_ns((_s)->sc_tv_status_total))
fs/ocfs2/cluster/netdebug.c:# define sc_tv_process_total_ns(_s)	(ktime_to_ns((_s)->sc_tv_process_total))
fs/ocfs2/cluster/netdebug.c:		   (long long)ktime_to_us(sc->sc_tv_timer),
fs/ocfs2/cluster/netdebug.c:		   (long long)ktime_to_us(sc->sc_tv_data_ready),
fs/ocfs2/cluster/netdebug.c:		   (long long)ktime_to_us(sc->sc_tv_advance_start),
fs/ocfs2/cluster/netdebug.c:		   (long long)ktime_to_us(sc->sc_tv_advance_stop),
fs/ocfs2/cluster/netdebug.c:		   (long long)ktime_to_us(sc->sc_tv_func_start),
fs/ocfs2/cluster/netdebug.c:		   (long long)ktime_to_us(sc->sc_tv_func_stop),
fs/ocfs2/cluster/heartbeat.c:#include <linux/ktime.h>
fs/ocfs2/cluster/heartbeat.c:	ktime_t before_hb, after_hb;
fs/ocfs2/cluster/heartbeat.c:		before_hb = ktime_get_real();
fs/ocfs2/cluster/heartbeat.c:		after_hb = ktime_get_real();
fs/ocfs2/cluster/heartbeat.c:				ktime_ms_delta(after_hb, before_hb);
fs/ocfs2/cluster/tcp_internal.h:	ktime_t			sc_tv_timer;
fs/ocfs2/cluster/tcp_internal.h:	ktime_t			sc_tv_data_ready;
fs/ocfs2/cluster/tcp_internal.h:	ktime_t			sc_tv_advance_start;
fs/ocfs2/cluster/tcp_internal.h:	ktime_t			sc_tv_advance_stop;
fs/ocfs2/cluster/tcp_internal.h:	ktime_t			sc_tv_func_start;
fs/ocfs2/cluster/tcp_internal.h:	ktime_t			sc_tv_func_stop;
fs/ocfs2/cluster/tcp_internal.h:	ktime_t			sc_tv_acquiry_total;
fs/ocfs2/cluster/tcp_internal.h:	ktime_t			sc_tv_send_total;
fs/ocfs2/cluster/tcp_internal.h:	ktime_t			sc_tv_status_total;
fs/ocfs2/cluster/tcp_internal.h:	ktime_t			sc_tv_process_total;
fs/ocfs2/cluster/tcp_internal.h:	ktime_t				st_sock_time;
fs/ocfs2/cluster/tcp_internal.h:	ktime_t				st_send_time;
fs/ocfs2/cluster/tcp_internal.h:	ktime_t				st_status_time;
fs/timerfd.c:	ktime_t tintv;
fs/timerfd.c:	ktime_t moffs;
fs/timerfd.c:	ktime_t now)
fs/timerfd.c:	ktime_t moffs = ktime_mono_to_real((ktime_t){ .tv64 = 0 });
fs/timerfd.c:	ctx->moffs = ktime_mono_to_real((ktime_t){ .tv64 = 0 });
fs/timerfd.c:static ktime_t timerfd_get_remaining(struct timerfd_ctx *ctx)
fs/timerfd.c:	ktime_t remaining;
fs/timerfd.c:	return remaining.tv64 < 0 ? ktime_set(0, 0): remaining;
fs/timerfd.c:	ktime_t texp;
fs/timerfd.c:	texp = timespec_to_ktime(ktmr->it_value);
fs/timerfd.c:	ctx->tintv = timespec_to_ktime(ktmr->it_interval);
fs/timerfd.c:	t.it_value = ktime_to_timespec(timerfd_get_remaining(ctx));
fs/timerfd.c:	t.it_interval = ktime_to_timespec(ctx->tintv);
fs/timerfd.c:	ctx->moffs = ktime_mono_to_real((ktime_t){ .tv64 = 0 });
fs/timerfd.c:	old->it_value = ktime_to_timespec(timerfd_get_remaining(ctx));
fs/timerfd.c:	old->it_interval = ktime_to_timespec(ctx->tintv);
fs/timerfd.c:	t->it_value = ktime_to_timespec(timerfd_get_remaining(ctx));
fs/timerfd.c:	t->it_interval = ktime_to_timespec(ctx->tintv);
fs/select.c:	ktime_get_ts64(&now);
fs/select.c:			  ktime_t *expires, unsigned long slack)
fs/select.c:		ktime_get_ts64(to);
fs/select.c:	ktime_get_ts64(&rts64);
fs/select.c:	ktime_t expire, *to = NULL;
fs/select.c:		 * given, then we convert to ktime_t and set the to
fs/select.c:			expire = timespec64_to_ktime(*end_time);
fs/select.c:	ktime_t expire, *to = NULL;
fs/select.c:		 * given, then we convert to ktime_t and set the to
fs/select.c:			expire = timespec64_to_ktime(*end_time);
fs/ubifs/ubifs.h:	ktime_t softlimit;
fs/ubifs/io.c:	       div_u64(ktime_to_ns(wbuf->softlimit), USEC_PER_SEC),
fs/ubifs/io.c:	       div_u64(ktime_to_ns(wbuf->softlimit) + wbuf->delta,
fs/ubifs/io.c:	wbuf->softlimit = ktime_set(WBUF_TIMEOUT_SOFTLIMIT, 0);
fs/nsfs.c:#include <linux/ktime.h>
fs/exfat/exfat_oal.c:	ktime_get_real_ts(&ts);
fs/eventpoll.c:	ktime_get_ts64(&now);
fs/eventpoll.c:	ktime_t expires, *to = NULL;
fs/eventpoll.c:		*to = timespec64_to_ktime(end_time);
Documentation/pps/pps.txt:    static struct pps_source_info pps_ktimer_info = {
Documentation/pps/pps.txt:	    .name         = "ktimer",
Documentation/pps/pps.txt:	    .echo         = pps_ktimer_echo,
Documentation/pps/pps.txt:    source = pps_register_source(&pps_ktimer_info,
Documentation/pps/pps.txt:(pps_ktimer_echo(), passing to it the "ptr" pointer) if the user
Documentation/pps/pps.txt:Please see the file drivers/pps/clients/pps-ktimer.c for example code.
Documentation/pps/pps.txt:the ktimer driver (see the client subsection in the PPS configuration menu)
Documentation/pps/pps.txt:Once you have enabled the compilation of ktimer just modprobe it (if
Documentation/pps/pps.txt:   # modprobe ktimer
Documentation/devicetree/bindings/timer/ti,keystone-timer.txt:	clocks = <&clktimer15>;
Documentation/networking/timestamping.txt:	ktime_t	hwtstamp;
Documentation/ioctl/botching-up-ioctls.txt:   that the kernel native struct ktime has a signed integer for both seconds
Documentation/timers/hrtimers.txt:special nanosecond-resolution type: ktime_t. The kernel-internal
Documentation/timers/hrtimers.txt:representation of ktime_t values and operations is implemented via
Documentation/timers/hrtimers.txt:CPUs. This build-time-selectable ktime_t storage format was implemented
Documentation/timers/hrtimers.txt:and the internal time format. (See include/linux/ktime.h for further
Documentation/driver-api/basics.rst:.. kernel-doc:: include/linux/ktime.h
Documentation/media/conf_nitpick.py:    ("c:type", "ktime_t"),
Documentation/trace/ftrace.txt:		ktime_get_boot_fast_ns() function for more information.
Documentation/trace/ftrace.txt:	       seeing just "ktime_get", you will see
Documentation/trace/ftrace.txt:	       "ktime_get+0xb/0x20".
Documentation/trace/ftrace.txt:    bash-1994    1d.h2   14us : ktime_get_update_offsets <-hrtimer_interrupt
Documentation/trace/ftrace.txt:  <idle>-0       3dNh1    8us : ktime_get <-clockevents_program_event
Documentation/trace/ftrace.txt:  <idle>-0       3dN.1   12us : ktime_get <-tick_nohz_idle_exit
Documentation/trace/ftrace.txt:  <idle>-0       3dN.2   18us : ktime_get <-clockevents_program_event
Documentation/trace/ftrace.txt:  <idle>-0       3dN.1   20us : ktime_add_safe <-hrtimer_forward
Documentation/trace/ftrace.txt:  <idle>-0       3dN.1   20us : ktime_add_safe <-hrtimer_forward
Documentation/trace/ftrace.txt:  <idle>-0       3dN.2   22us : ktime_add_safe <-__hrtimer_start_range_ns
Documentation/trace/ftrace.txt:  <idle>-0       3dN.2   23us : ktime_get <-clockevents_program_event
grep: input file 'log' is also the output
sound/pci/intel8x0.c:	ktime_t start_time, stop_time;
sound/pci/intel8x0.c:	start_time = ktime_get();
sound/pci/intel8x0.c:	stop_time = ktime_get();
sound/pci/intel8x0.c:	t = ktime_us_delta(stop_time, start_time);
sound/pci/es1968.c:	ktime_t start_time, stop_time;
sound/pci/es1968.c:	ktime_t diff;
sound/pci/es1968.c:	start_time = ktime_get();
sound/pci/es1968.c:	stop_time = ktime_get();
sound/pci/es1968.c:	diff = ktime_sub(stop_time, start_time);
sound/pci/es1968.c:	t = ktime_to_us(diff);
sound/pci/hda/hda_controller.c:static int azx_get_sync_time(ktime_t *device,
sound/pci/hda/hda_controller.c:	*device = ns_to_ktime(azx_scale64(ll_counter,
sound/pci/hda/hda_controller.c:	*device = ktime_add_ns(*device, (wallclk_cycles * NSEC_PER_SEC) /
sound/pci/hda/hda_controller.c:static int azx_get_sync_time(ktime_t *device,
sound/pci/hda/hda_controller.c:			*system_ts = ktime_to_timespec(xtstamp.sys_monoraw);
sound/pci/hda/hda_controller.c:			*system_ts = ktime_to_timespec(xtstamp.sys_realtime);
sound/pci/hda/hda_controller.c:		*audio_ts = ktime_to_timespec(xtstamp.device);
sound/pci/pcxhr/pcxhr_core.c:	ktime_t start_time, stop_time, diff_time;
sound/pci/pcxhr/pcxhr_core.c:	start_time = ktime_get();
sound/pci/pcxhr/pcxhr_core.c:	stop_time = ktime_get();
sound/pci/pcxhr/pcxhr_core.c:	diff_time = ktime_sub(stop_time, start_time);
sound/pci/pcxhr/pcxhr_core.c:			(long)(ktime_to_ns(diff_time)), err);
sound/pci/pcxhr/pcxhr.c:	ktime_t start_time, stop_time, diff_time;
sound/pci/pcxhr/pcxhr.c:	start_time = ktime_get();
sound/pci/pcxhr/pcxhr.c:	stop_time = ktime_get();
sound/pci/pcxhr/pcxhr.c:	diff_time = ktime_sub(stop_time, start_time);
sound/pci/pcxhr/pcxhr.c:		    (long)(ktime_to_ns(diff_time)), err);
sound/soc/codecs/tlv320dac33.c:		dac33->t_stamp2 = ktime_to_us(ktime_get());
sound/soc/codecs/tlv320dac33.c:		dac33->t_stamp1 = ktime_to_us(ktime_get());
sound/soc/codecs/tlv320dac33.c:		dac33->t_stamp2 = ktime_to_us(ktime_get());
sound/soc/codecs/tlv320dac33.c:	dac33->t_stamp1 = ktime_to_us(ktime_get());
sound/soc/codecs/tlv320dac33.c:		t_now = ktime_to_us(ktime_get());
sound/soc/codecs/tlv320dac33.c:		t_now = ktime_to_us(ktime_get());
sound/soc/fsl/imx-pcm-fiq.c:	hrtimer_forward_now(hrt, ns_to_ktime(iprtd->poll_time_ns));
sound/soc/fsl/imx-pcm-fiq.c:		hrtimer_start(&iprtd->hrt, ns_to_ktime(iprtd->poll_time_ns),
sound/firewire/lib.h:	ktime_t next_ktime;
sound/firewire/lib.c:		port->next_ktime = ktime_set(0, 0);
sound/firewire/lib.c:	if (ktime_after(port->next_ktime, ktime_get())) {
sound/firewire/lib.c:			port->next_ktime = ktime_set(0, 0);
sound/firewire/lib.c:	port->next_ktime = ktime_add_ns(ktime_get(),
sound/firewire/lib.c:	port->next_ktime = ktime_set(0, 0);
sound/sh/sh_dac_audio.c:	ktime_t wakeups_per_second;
sound/sh/sh_dac_audio.c:	chip->wakeups_per_second = ktime_set(0, 1000000000 / chip->rate);
sound/drivers/pcsp/pcsp_lib.c:	hrtimer_forward(handle, hrtimer_get_expires(handle), ns_to_ktime(ns));
sound/drivers/pcsp/pcsp_lib.c:	hrtimer_start(&pcsp_chip.timer, ktime_set(0, 0), HRTIMER_MODE_REL);
sound/drivers/dummy.c:	ktime_t base_time;
sound/drivers/dummy.c:	ktime_t period_time;
sound/drivers/dummy.c:	delta = ktime_us_delta(hrtimer_cb_get_time(&dpcm->timer),
sound/drivers/dummy.c:	dpcm->period_time = ktime_set(sec, nsecs);
sound/core/timer.c:		ktime_get_ts(&tstamp);
sound/core/timer.c:			ktime_get_ts(&tstamp);
sound/core/hrtimer.c:	ktime_t delta;
sound/core/hrtimer.c:	delta = ktime_sub(hrt->base->get_time(), hrtimer_get_expires(hrt));
sound/core/hrtimer.c:		ticks += ktime_divns(delta, ticks * resolution);
sound/core/hrtimer.c:	hrtimer_start(&stime->hrt, ns_to_ktime(t->sticks * resolution),
sound/core/seq/seq_timer.c:	ktime_get_ts64(&tmr->last_update);
sound/core/seq/seq_timer.c:	ktime_get_ts64(&tmr->last_update);
sound/core/seq/seq_timer.c:	ktime_get_ts64(&tmr->last_update);
sound/core/seq/seq_timer.c:		ktime_get_ts64(&tm);
crypto/jitterentropy-kcapi.c:		tmp = ktime_get_ns();
crypto/asymmetric_keys/x509_cert_parser.c:	*_t = mktime64(year, mon, day, hour, min, sec);
tools/time/udelay_test.sh:# at least as long as requested (as compared to ktime).
tools/perf/scripts/python/futex-contention.py:thread_blocktime = {}
tools/perf/scripts/python/futex-contention.py:	thread_blocktime[tid] = nsecs(s, ns)
tools/perf/scripts/python/futex-contention.py:	if thread_blocktime.has_key(tid):
tools/perf/scripts/python/futex-contention.py:		elapsed = nsecs(s, ns) - thread_blocktime[tid]
tools/perf/scripts/python/futex-contention.py:		del thread_blocktime[tid]
tools/pack_kernerimage_cmd.sh:./mkbootimg --kernel kernel --base 0x0 --cmdline "loglevel=4 initcall_debug=n page_tracker=on unmovable_isolate1=2:192M,3:224M,4:256M printktimer=0xfff0a000,0x534,0x538 androidboot.selinux=enforcing buildvariant=user" --tags_offset 0x07A00000 --kernel_offset 0x00080000 --ramdisk_offset 0x07C00000 --header_version 1 --os_version 9 --os_patch_level 2018-11-01  --output kernel.img
tools/include/uapi/linux/bpf.h:	BPF_FUNC_ktime_get_ns,    /* u64 bpf_ktime_get_ns(void) */
tools/thermal/tmon/tmon.h:extern unsigned long ticktime;
tools/thermal/tmon/tmon.c:unsigned long ticktime = 1; /* seconds */
tools/thermal/tmon/tmon.c:			ticktime = strtod(optarg, NULL);
tools/thermal/tmon/tmon.c:			if (ticktime < 1)
tools/thermal/tmon/tmon.c:				ticktime = 1;
tools/thermal/tmon/tmon.c:		sleep(ticktime);
tools/thermal/tmon/tmon.c:		time_elapsed += ticktime;
tools/thermal/tmon/pid.c:	p_param.ts = ticktime;
tools/testing/selftests/timers/set-2038.c:#define YEAR_2262 KTIME_SEC_MAX			/*overflows 64bit ktime_t */
arch/ia64/kernel/efi.c:	ts->tv_sec = mktime64(tm.year, tm.month, tm.day,
arch/m68k/kernel/time.c:		ts->tv_sec = mktime(time.tm_year, time.tm_mon, time.tm_mday,
arch/m68k/mac/misc.c:static void unmktime(unsigned long time, long offset,
arch/m68k/mac/misc.c:		unmktime(now, 0,
arch/m68k/mac/misc.c:		now = mktime(t->tm_year + 1900, t->tm_mon + 1, t->tm_mday,
arch/m68k/include/asm/machdep.h:struct mktime;
arch/powerpc/oprofile/cell/spu_profiler.c:	ktime_t kt;
arch/powerpc/oprofile/cell/spu_profiler.c:	kt = ktime_set(0, profiling_interval);
arch/powerpc/oprofile/cell/spu_profiler.c:	ktime_t kt;
arch/powerpc/oprofile/cell/spu_profiler.c:	kt = ktime_set(0, profiling_interval);
arch/powerpc/kernel/rtas-rtc.c:	return mktime(ret[0], ret[1], ret[2], ret[3], ret[4], ret[5]);
arch/powerpc/kernel/nvram_64.c:	oops_hdr->timestamp = cpu_to_be64(ktime_get_real_seconds());
arch/powerpc/kernel/nvram_64.c:	oops_hdr->timestamp = cpu_to_be64(ktime_get_real_seconds());
arch/powerpc/kernel/nvram_64.c:		oops_hdr->timestamp = cpu_to_be64(ktime_get_real_seconds());
arch/powerpc/kernel/rtas-proc.c:				mktime(year, mon, day, hour, min, sec));
arch/powerpc/kernel/reloc_64.S:	 * Work out linktime address of _stext and hence the
arch/powerpc/kernel/time.c:	ts->tv_sec = mktime(tm.tm_year+1900, tm.tm_mon+1, tm.tm_mday,
arch/powerpc/platforms/powermac/time.c:	return mktime(tm->tm_year+1900, tm->tm_mon+1, tm->tm_mday,
arch/powerpc/platforms/maple/time.c:	return mktime(tm.tm_year+1900, tm.tm_mon+1, tm.tm_mday,
arch/powerpc/platforms/cell/spufs/sched.c:	curtime = ktime_get_ns();
arch/powerpc/platforms/cell/spufs/context.c:	ctx->stats.tstamp = ktime_get_ns();
arch/powerpc/platforms/cell/spufs/file.c:		time += ktime_get_ns() - ctx->stats.tstamp;
arch/powerpc/platforms/cell/spufs/file.c:		ktime_get_ts(&p->tstamp);
arch/powerpc/platforms/cell/spu_base.c:	spu->stats.tstamp = ktime_get_ns();
arch/powerpc/platforms/cell/spu_base.c:		time += ktime_get_ns() - spu->stats.tstamp;
arch/powerpc/platforms/powernv/opal-rtc.c:	return mktime(tm.tm_year + 1900, tm.tm_mon + 1, tm.tm_mday,
arch/powerpc/platforms/pasemi/time.c:	return mktime(2006, 1, 1, 12, 0, 0);
arch/powerpc/platforms/8xx/m8xx_setup.c:	time = mktime(tm->tm_year+1900, tm->tm_mon+1, tm->tm_mday,
arch/powerpc/platforms/pseries/nvram.c:		last_unread_rtas_event = ktime_get_real_seconds();
arch/powerpc/platforms/pseries/nvram.c:		last_rtas_event = ktime_get_real_seconds();
arch/powerpc/platforms/pseries/nvram.c:		&& ktime_get_real_seconds() - last_unread_rtas_event <=
arch/powerpc/boot/crt0.S:	subf	r11,r11,r12	/* runtime - linktime offset */
arch/powerpc/kvm/book3s_hv.c:	hrtimer_start(&vcpu->arch.dec_timer, ktime_set(0, dec_nsec),
arch/powerpc/kvm/book3s_hv.c:	ktime_t cur, start_poll, start_wait;
arch/powerpc/kvm/book3s_hv.c:	cur = start_poll = ktime_get();
arch/powerpc/kvm/book3s_hv.c:		ktime_t stop = ktime_add_ns(start_poll, vc->halt_poll_ns);
arch/powerpc/kvm/book3s_hv.c:			cur = ktime_get();
arch/powerpc/kvm/book3s_hv.c:		} while (single_task_running() && ktime_before(cur, stop));
arch/powerpc/kvm/book3s_hv.c:	start_wait = ktime_get();
arch/powerpc/kvm/book3s_hv.c:	cur = ktime_get();
arch/powerpc/kvm/book3s_hv.c:	block_ns = ktime_to_ns(cur) - ktime_to_ns(start_poll);
arch/powerpc/kvm/book3s_hv.c:			ktime_to_ns(cur) - ktime_to_ns(start_wait);
arch/powerpc/kvm/book3s_hv.c:				ktime_to_ns(start_wait) -
arch/powerpc/kvm/book3s_hv.c:				ktime_to_ns(start_poll);
arch/powerpc/kvm/book3s_hv.c:				ktime_to_ns(cur) -
arch/powerpc/kvm/book3s_hv.c:				ktime_to_ns(start_poll);
arch/powerpc/kvm/emulate.c:		ktime_set(dec_time, dec_nsec), HRTIMER_MODE_REL);
arch/arm/xen/enlighten.c:	ktime_get_ts64(&ts_monotonic);
arch/arm/mach-davinci/clock.c:	unsigned int locktime;
arch/arm/mach-davinci/clock.c:		locktime = ((2000 * prediv) / 100);
arch/arm/mach-davinci/clock.c:		locktime = PLL_LOCK_TIME;
arch/arm/mach-davinci/clock.c:	udelay(locktime);
arch/arm/common/bL_switcher.c:	trace_cpu_migrate_begin(ktime_get_real_ns(), ob_mpidr);
arch/arm/common/bL_switcher.c:	trace_cpu_migrate_finish(ktime_get_real_ns(), ib_mpidr);
arch/arm/common/bL_switcher.c:	trace_cpu_migrate_current(ktime_get_real_ns(), read_mpidr());
arch/arm/plat-samsung/include/plat/cpu-freq-core.h: * @locktime_m: The lock-time in uS for the MPLL.
arch/arm/plat-samsung/include/plat/cpu-freq-core.h: * @locktime_u: The lock-time in uS for the UPLL.
arch/arm/plat-samsung/include/plat/cpu-freq-core.h:	unsigned int		locktime_m;
arch/arm/plat-samsung/include/plat/cpu-freq-core.h:	unsigned int		locktime_u;
arch/arm/plat-samsung/include/plat/cpu-freq-core.h:	unsigned char		locktime_bits;
arch/arm/boot/dts/keystone.dtsi:			clocks = <&clktimer15>;
arch/arm/boot/dts/keystone-clocks.dtsi:	clktimer15: clktimer15 {
arch/arm/mm/cache-l2x0-pmu.c:static ktime_t l2x0_pmu_poll_period;
arch/arm/mm/cache-l2x0-pmu.c:	l2x0_pmu_poll_period = ms_to_ktime(1000);
arch/arm64/boot/dts/rockchip/rk3399.dtsi:	rktimer: rktimer@ff850000 {
arch/arm64/boot/dts/auto-generate/overlay/kirin970/kirin970_timer.dtsi:	hisi_prktimer: prktimer@fff0a000 {
arch/arm64/boot/dts/auto-generate/overlay/kirin970/kirin970_timer.dtsi:		compatible = "hisilicon,prktimer";
Binary file arch/arm64/boot/dts/auto-generate/config/kirin970/kirin970_udp_cs_config.dtb matches
Binary file arch/arm64/boot/dts/auto-generate/config/kirin970/kirin970_udp_cs_EVB1_VB_config.dtb matches
Binary file arch/arm64/boot/dts/auto-generate/config/kirin970/kirin970_udp_cs_EVB7_config.dtb matches
arch/arm64/boot/dts/auto-generate/config/kirin970/kirin970_timer.dtsi:	hisi_prktimer: prktimer@fff0a000 {
arch/arm64/boot/dts/auto-generate/config/kirin970/kirin970_timer.dtsi:		compatible = "hisilicon,prktimer";
Binary file arch/arm64/boot/dts/auto-generate/config/kirin970/kirin970_udp_cs_EVB3_config.dtb matches
Binary file arch/arm64/boot/dts/auto-generate/config/kirin970/kirin970_udp_cs_EVB3_PILOT_config.dtb matches
arch/arm64/mm/fault.c:	ktime_t before, after;
arch/arm64/mm/fault.c:	before = ktime_get();
arch/arm64/mm/fault.c:	after = ktime_get();
arch/arm64/mm/fault.c:	consumed_ns = ktime_to_ns(ktime_sub(after, before));
arch/m32r/kernel/time.c:	ts->tv_sec = mktime(year, mon, day, hour, min, sec);
arch/cris/kernel/time.c: *	fixed set_rtc_mmss, fixed time.year for >= 2000, new mktime
arch/cris/arch-v32/drivers/sync_serial.c:		ktime_get_ts(&port->timestamp[idx]);
arch/um/Makefile:# Same things for in6addr_loopback and mktime - found in libc. For these two we
arch/um/Makefile:			 -Dmktime=kernel_mktime $(ARCH_KERNEL_DEFINES))
arch/mips/sibyte/swarm/rtc_xicor1241.c:	return mktime(year, mon, day, hour, min, sec);
arch/mips/sibyte/swarm/rtc_m41t81.c:	return mktime(year, mon, day, hour, min, sec);
arch/mips/sibyte/swarm/setup.c:		sec = mktime(2000, 1, 1, 0, 0, 0);
arch/mips/kernel/spinlock_test.c:	ktime_t start, finish;
arch/mips/kernel/spinlock_test.c:	start = ktime_get();
arch/mips/kernel/spinlock_test.c:	finish = ktime_get();
arch/mips/kernel/spinlock_test.c:	*val = ktime_us_delta(finish, start);
arch/mips/kernel/spinlock_test.c:	ktime_t start;
arch/mips/kernel/spinlock_test.c:	pt->start = ktime_get();
arch/mips/kernel/spinlock_test.c:	ktime_t finish;
arch/mips/kernel/spinlock_test.c:	finish = ktime_get();
arch/mips/kernel/spinlock_test.c:	*val = ktime_us_delta(finish, t1.start);
arch/mips/dec/time.c:	ts->tv_sec = mktime(year, mon, day, hour, min, sec);
arch/mips/include/asm/kvm_host.h:	ktime_t count_resume;
arch/mips/include/asm/mc146818-time.h:	return mktime(year, mon, day, hour, min, sec);
arch/mips/kvm/trap_emul.c:		*v = ktime_to_ns(vcpu->arch.count_resume);
arch/mips/kvm/emulate.c:#include <linux/ktime.h>
arch/mips/kvm/emulate.c: * kvm_mips_ktime_to_count() - Scale ktime_t to a 32-bit count.
arch/mips/kvm/emulate.c:static u32 kvm_mips_ktime_to_count(struct kvm_vcpu *vcpu, ktime_t now)
arch/mips/kvm/emulate.c:	now_ns = ktime_to_ns(now);
arch/mips/kvm/emulate.c: * Get effective monotonic ktime. This is usually a straightforward ktime_get(),
arch/mips/kvm/emulate.c: * Returns:	Effective monotonic ktime for CP0_Count.
arch/mips/kvm/emulate.c:static inline ktime_t kvm_mips_count_time(struct kvm_vcpu *vcpu)
arch/mips/kvm/emulate.c:	return ktime_get();
arch/mips/kvm/emulate.c:static u32 kvm_mips_read_count_running(struct kvm_vcpu *vcpu, ktime_t now)
arch/mips/kvm/emulate.c:	ktime_t expires, threshold;
arch/mips/kvm/emulate.c:	count = vcpu->arch.count_bias + kvm_mips_ktime_to_count(vcpu, now);
arch/mips/kvm/emulate.c:	threshold = ktime_add_ns(now, vcpu->arch.count_period / 4);
arch/mips/kvm/emulate.c:	if (ktime_before(expires, threshold)) {
arch/mips/kvm/emulate.c:			expires = ktime_add_ns(expires,
arch/mips/kvm/emulate.c:	return kvm_mips_read_count_running(vcpu, ktime_get());
arch/mips/kvm/emulate.c: * Freeze the hrtimer safely and return both the ktime and the CP0_Count value
arch/mips/kvm/emulate.c: * Returns:	The ktime at the point of freeze.
arch/mips/kvm/emulate.c:static ktime_t kvm_mips_freeze_hrtimer(struct kvm_vcpu *vcpu, u32 *count)
arch/mips/kvm/emulate.c:	ktime_t now;
arch/mips/kvm/emulate.c:	now = ktime_get();
arch/mips/kvm/emulate.c: * @now:	ktime at point of resume.
arch/mips/kvm/emulate.c:				    ktime_t now, u32 count)
arch/mips/kvm/emulate.c:	ktime_t expire;
arch/mips/kvm/emulate.c:	expire = ktime_add_ns(now, delta);
arch/mips/kvm/emulate.c:	ktime_t now;
arch/mips/kvm/emulate.c:	vcpu->arch.count_bias = count - kvm_mips_ktime_to_count(vcpu, now);
arch/mips/kvm/emulate.c:	ktime_t now;
arch/mips/kvm/emulate.c:	vcpu->arch.count_bias = count - kvm_mips_ktime_to_count(vcpu, now);
arch/mips/kvm/emulate.c:	ktime_t now;
arch/mips/kvm/emulate.c:static ktime_t kvm_mips_count_disable(struct kvm_vcpu *vcpu)
arch/mips/kvm/emulate.c:	ktime_t now;
arch/mips/kvm/emulate.c:	now = ktime_get();
arch/mips/kvm/emulate.c:	ktime_t expire, now;
arch/mips/kvm/emulate.c:				vcpu->arch.count_resume = ktime_get();
arch/mips/kvm/emulate.c:			expire = ktime_add_ns(vcpu->arch.count_resume, delta);
arch/mips/kvm/emulate.c:			now = ktime_get();
arch/mips/kvm/emulate.c:			if (ktime_compare(now, expire) >= 0)
arch/mips/kvm/emulate.c:	if (count_resume < 0 || count_resume > ktime_to_ns(ktime_get()))
arch/mips/kvm/emulate.c:	vcpu->arch.count_resume = ns_to_ktime(count_resume);
arch/sh/kernel/time.c:	tv->tv_sec = mktime(2000, 1, 1, 0, 0, 0);
arch/sh/boards/mach-sh03/rtc.c:	return mktime(year, mon, day, hour, min, sec);
arch/nios2/kernel/time.c:	ts->tv_sec = mktime(2007, 1, 1, 0, 0, 0);
arch/x86/kernel/rtc.c:	now->tv_sec = mktime(year, mon, day, hour, min, sec);
arch/x86/xen/time.c:   doing so has complications when the ktime clocksource is not yet
arch/x86/events/intel/cqm.c:	hrtimer_forward_now(hrtimer, ms_to_ktime(MBM_CTR_OVERFLOW_TIME));
arch/x86/events/intel/cqm.c:	hrtimer_start(&mbm_timers[pkg_id], ms_to_ktime(MBM_CTR_OVERFLOW_TIME),
arch/x86/events/intel/uncore.c:	hrtimer_forward_now(hrtimer, ns_to_ktime(box->hrtimer_duration));
arch/x86/events/intel/uncore.c:	hrtimer_start(&box->hrtimer, ns_to_ktime(box->hrtimer_duration),
arch/x86/events/intel/rapl.c:	ktime_t			timer_interval;
arch/x86/events/intel/rapl.c:		pmu->timer_interval = ms_to_ktime(rapl_timer_ms);
arch/x86/platform/intel-mid/intel_mid_vrtc.c:	now->tv_sec = mktime(year, mon, mday, hour, min, sec);
arch/x86/kvm/hyperv.c:	ktime_t ktime_now;
arch/x86/kvm/hyperv.c:	ktime_now = ktime_get();
arch/x86/kvm/hyperv.c:			      ktime_add_ns(ktime_now,
arch/x86/kvm/hyperv.c:		      ktime_add_ns(ktime_now, 100 * (stimer->count - time_now)),
arch/x86/kvm/lapic.c:	ktime_t remaining;
arch/x86/kvm/lapic.c:	if (ktime_to_ns(remaining) < 0)
arch/x86/kvm/lapic.c:		remaining = ktime_set(0, 0);
arch/x86/kvm/lapic.c:	ns = mod_64(ktime_to_ns(remaining), apic->lapic_timer.period);
arch/x86/kvm/lapic.c:	struct kvm_timer *ktimer = &apic->lapic_timer;
arch/x86/kvm/lapic.c:		ktimer->expired_tscdeadline = ktimer->tscdeadline;
arch/x86/kvm/lapic.c:	ktime_t expire;
arch/x86/kvm/lapic.c:	ktime_t now;
arch/x86/kvm/lapic.c:		expire = ktime_add_ns(now, ns);
arch/x86/kvm/lapic.c:		expire = ktime_sub_ns(expire, lapic_timer_advance_ns);
arch/x86/kvm/lapic.c:	ktime_t now;
arch/x86/kvm/lapic.c:			      ktime_add_ns(now, apic->lapic_timer.period),
arch/x86/kvm/lapic.c:			   APIC_BUS_CYCLE_NS, ktime_to_ns(now),
arch/x86/kvm/lapic.c:			   ktime_to_ns(ktime_add_ns(now,
arch/x86/kvm/lapic.c:	struct kvm_timer *ktimer = container_of(data, struct kvm_timer, timer);
arch/x86/kvm/lapic.c:	struct kvm_lapic *apic = container_of(ktimer, struct kvm_lapic, lapic_timer);
arch/x86/kvm/lapic.c:		hrtimer_add_expires_ns(&ktimer->timer, ktimer->period);
arch/x86/kvm/x86.c:	boot_ns = ktime_to_ns(ktime_add(tk->tkr_mono.base, tk->offs_boot));
arch/x86/kvm/x86.c:	ns = ktime_get_boot_ns();
arch/x86/kvm/x86.c:		return ktime_get_boot_ns() + ka->kvmclock_offset;
arch/x86/kvm/x86.c:		kernel_ns = ktime_get_boot_ns();
arch/x86/kvm/x86.c:	 * elapsed; our helper function, ktime_get_boot_ns() will be using boot
arch/x86/kvm/x86.c:	kvm->arch.kvmclock_offset = -ktime_get_boot_ns();
arch/x86/kvm/vmx.c:	ktime_t entry_time;
arch/x86/kvm/vmx.c:			ktime_to_ns(ktime_sub(ktime_get(), vmx->entry_time));
arch/x86/kvm/vmx.c:		vmx->entry_time = ktime_get();
arch/x86/kvm/vmx.c:		      ns_to_ktime(preemption_timeout), HRTIMER_MODE_REL);
arch/x86/kvm/vmx.c:	ktime_t remaining =
arch/x86/kvm/vmx.c:	if (ktime_to_ns(remaining) <= 0)
arch/x86/kvm/vmx.c:	value = ktime_to_ns(remaining) * vcpu->arch.virtual_tsc_khz;
arch/x86/kvm/i8254.h:	ktime_t count_load_time;
arch/x86/kvm/i8254.c:			c->count_load_time = ktime_get();
arch/x86/kvm/i8254.c:	ktime_t remaining;
arch/x86/kvm/i8254.c:	elapsed = ps->period - ktime_to_ns(remaining);
arch/x86/kvm/i8254.c:	return ktime_to_ns(ktime_sub(ktime_get(), c->count_load_time));
arch/x86/kvm/i8254.c:	hrtimer_start(&ps->timer, ktime_add_ns(ktime_get(), interval),
arch/x86/kvm/i8254.c:		ps->channels[channel].count_load_time = ktime_get();
arch/x86/kvm/i8254.c:	refresh_clock = ((unsigned int)ktime_to_ns(ktime_get()) >> 14) & 1;
arch/parisc/kernel/time.c: *             fixed set_rtc_mmss, fixed time.year for >= 2000, new mktime
arch/s390/kvm/interrupt.c:	hrtimer_start(&vcpu->arch.ckc_timer, ktime_set (0, sltime) , HRTIMER_MODE_REL);
arch/s390/kvm/interrupt.c:	if (sltime && hrtimer_forward_now(timer, ns_to_ktime(sltime)))
arch/avr32/kernel/time.c:	ts->tv_sec = mktime(2007, 1, 1, 0, 0, 0);
arch/frv/kernel/time.c:	ts->tv_sec = mktime(year, mon, day, hour, min, sec);
init/main.c:	ktime_t calltime, delta, rettime;
init/main.c:	calltime = ktime_get();
init/main.c:	rettime = ktime_get();
init/main.c:	delta = ktime_sub(rettime, calltime);
init/main.c:	duration = (unsigned long long) ktime_to_ns(delta) >> 10;
mm/pagecache_manage.S:	.file 42 "/mnt/disk/jenkins/ci/workspace/chipset_patch_970_docker/opensource/component_code/vendor/huawei/extra/build/build_script/kirin_kernel_release/kernel/include/linux/ktime.h"
mm/pagecache_manage.S:	.string	"total_busy_ktime"
mm/pagecache_manage.S:	.string	"bio_stage_ktime"
mm/pagecache_manage.S:	.string	"total_idle_ktime"
mm/pagecache_manage.S:	.string	"last_busy_ktime"
mm/pagecache_manage.S:	.string	"req_stage_ktime"
mm/pagecache_manage.S:	.string	"ktime_t"
mm/pagecache_manage.S:	.string	"ktime"
mm/pagecache_manage.S:	.string	"last_idle_ktime"
